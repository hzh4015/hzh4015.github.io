<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笔记</title>
  
  <subtitle>一分钟等于六十秒</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T15:37:09.806Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>秋水一色</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL5.7概述以及下载安装（centOS7）</title>
    <link href="http://example.com/2022/04/29/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/04/29/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</id>
    <published>2022-04-29T07:59:56.560Z</published>
    <updated>2022-05-12T15:37:09.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL5-7概述以及下载安装（centOS7）"><a href="#MySQL5-7概述以及下载安装（centOS7）" class="headerlink" title="MySQL5.7概述以及下载安装（centOS7）"></a>MySQL5.7概述以及下载安装（centOS7）</h1><h5 id="数加科技整理"><a href="#数加科技整理" class="headerlink" title="数加科技整理"></a>数加科技整理</h5><h2 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h2><blockquote><p>MySQL是一个典型的关系数据库，目前是Oracle公司产品之一，也是目前主流使用的关系型数据库之一。使用MySQL可以进行最基本的数据存储、管理、查询等操作，也可以方便的组建数据库集群，配置读写分离。</p><p>MySQL数据库同样使用SQL（结构化查询语言）来进行操作，同时MySQL数据库自身也有很多可以直接使用的内置函数，在部分操作的语法上和其他数据库会存在区别。</p></blockquote><h2 id="二、版本选择"><a href="#二、版本选择" class="headerlink" title="二、版本选择"></a>二、版本选择</h2><h3 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.    应用场景"></a>1.    应用场景</h3><h5 id="社区版"><a href="#社区版" class="headerlink" title="社区版"></a>社区版</h5><blockquote><p>在学习阶段，可以使用免费的社区版，这也是中小型企业会选用的一个版本，可以在官方网站直接进行下载。在社区版中，除了提供数据库服务端以外，同样提供了社区版相关组件，如官方的可视化工具、MySQL集群、各开发语言数据库驱动等，可以根据需要直接下载。</p></blockquote><p><img src="D:/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%96%87%E4%BB%B6/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85.assets/1.png" alt="1"></p><h5 id="企业版"><a href="#企业版" class="headerlink" title="企业版"></a>企业版</h5><blockquote><p>MySQL企业版是提供了商用的解决方案，相关的产品除了数据库服务外，还包括：MySQL云服务、企业级数据备份、企业级防火墙、企业级数据加密等。</p></blockquote><h3 id="2-MySQL版本"><a href="#2-MySQL版本" class="headerlink" title="2.    MySQL版本"></a>2.    MySQL版本</h3><blockquote><p>目前MySQL官网提供了三个大版本的支持，5.6.x、5.7.x、8.0.x。8.x版本相较于5.7版本，在性能方面做出了较大的改进和优化：2x Faster than MySQL5.7!</p><p>在8.0的MySQL数据库中，对某些常用语法的细节部分也做了调整，<strong>如果准备进行升级，一定要注意兼容性的问题</strong>。<br>而5.7版本相较于5.6版本而言，主要是进行了性能上的优化，并提供了更丰富的设置。如：新增了优化器、原生JSON支持、GIS扩展等。</p></blockquote><h2 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h2><h3 id="1-官网地址"><a href="#1-官网地址" class="headerlink" title="1.    官网地址"></a>1.    官网地址</h3><blockquote><p>首先来到MySQL数据库官网，直接在百度搜索MySQL就可以找到：<a href="https://www.mysql.com/%EF%BC%8C%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%E7%9B%B4%E6%8E%A5%E7%82%B9%E5%87%BB**DOWNLOADS**%E6%8C%89%E9%92%AE%E3%80%82">https://www.mysql.com/，打开之后直接点击**DOWNLOADS**按钮。</a></p></blockquote><h3 id="2-社区版下载"><a href="#2-社区版下载" class="headerlink" title="2.    社区版下载"></a>2.    社区版下载</h3><blockquote><p>进入下载界面后，点击<strong>MySQL Community（GPL）Downloads</strong>按钮进入下载界面：</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/YdSUjexPNmyIiWa.png" alt="image-20220429195827454"></p><blockquote><p>选择<strong>MySQL Community Server</strong>：</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/7Jgtn3lzX6OeTcF.png" alt="image-20220429195858199"></p><blockquote><p>直击链接：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></blockquote><h3 id="3-选择版本"><a href="#3-选择版本" class="headerlink" title="3.    选择版本"></a>3.    选择版本</h3><blockquote><p>对于Linux平台而言而言，如果是解压安装基本没有任何差别。如果是软件包安装，在下载时一定要选择相应的版本。目前官网提供两个大的稳定版，一个是<strong>5.7</strong>，一个是<strong>8.0</strong>，将演示如何在CentOS 7系统下安装MySQL 5.7。</p></blockquote><p>进入界面后点击<strong>Looking for previous GA versions</strong>链接：</p><p><img src="https://s2.loli.net/2022/04/29/Xe6UCnRI4Z1NdSf.png" alt="image-20220429195935377"></p><blockquote><p>依次选择<strong>操作系统</strong> -&gt; <strong>系统版本</strong> -&gt; <strong>需要下载的软件包</strong>：</p><p>下载的软件包需要：common、client、libs、server。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/HRfwc8uvV17gsKT.png" alt="image-20220429195958113"></p><h3 id="4-下载安装包"><a href="#4-下载安装包" class="headerlink" title="4.    下载安装包"></a>4.    下载安装包</h3><blockquote><p>进入下载界面后，直接点击 No thanks,just start my download. 链接即可直接下载。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/V1yAObzluIWtN72.png" alt="image-20220429200026929"></p><blockquote><p>windows下载后的截图</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PpeOLoHWMQJN1gS.png" alt="image-20220429200037001"></p><h2 id="四、安装步骤"><a href="#四、安装步骤" class="headerlink" title="四、安装步骤"></a>四、安装步骤</h2><blockquote><p>RPM软件包格式适用于所有基于RedHat内核的Linux发行版，包括CentOS等，在安装之前都要解决好依赖和冲突的问题。由于在安装系统时所选的组件不同，可能预安装的系统环境有所不同。</p></blockquote><h3 id="1-解决依赖冲突"><a href="#1-解决依赖冲突" class="headerlink" title="1.    解决依赖冲突"></a>1.    解决依赖冲突</h3><blockquote><p>在安装之前先检查一下是否有历史版本，包括可能产生冲突的mariadb软件包。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br><span class="line">rpm -qa|grep MySQL</span><br><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/sXkPU9On2zQoLZi.png" alt="image-20220429200048782"></p><blockquote><p>查询出软件信息后进行卸载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.65-1.el7.x86_64</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/sXkPU9On2zQoLZi.png"></p><h3 id="2-解决依赖缺失"><a href="#2-解决依赖缺失" class="headerlink" title="2.    解决依赖缺失"></a>2.    解决依赖缺失</h3><blockquote><p>在CentOS系统中安装MySQL时通常会缺少Data::Dumper，需要先进行安装。</p><p><strong>注意：(后续需要什么我们按照同样方式安装即可)</strong></p><p>在有网的环境下，可以直接使用yum安装。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install autoconf</span><br></pre></td></tr></table></figure><h3 id="3-MySQL服务端安装"><a href="#3-MySQL服务端安装" class="headerlink" title="3.    MySQL服务端安装"></a>3.    MySQL服务端安装</h3><blockquote><p>将下载的rpm包上传至Linux服务器中</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/Sd7ulYDOUPVcgwm.png" alt="image-20220429200113190"></p><blockquote><p>MySQL服务端的安装包为server，安装的顺序为：<strong>common -&gt; libs -&gt; client -&gt; server</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/Qw5DSM23lu1zky8.png" alt="image-20220429200122777"></p><blockquote><p>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/lCEse3qhYFNz2JQ.png" alt="image-20220429200141913"></p><blockquote><p>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/lCEse3qhYFNz2JQ.png"></p><blockquote><p>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm(<strong>到这里可能会报错，如下图所示</strong>：)</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/97E13YhFpGVJOSP.png"></p><blockquote><p>只需要把对应的包安装一下即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><blockquote><p>再执行就可以了</p><p>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PAThaFMHZKR23V6.png" alt="image-20220429200225159"></p><blockquote><p>安装完成后创建的配置文件存放在**&#x2F;etc&#x2F;my.cnf**，如果需要进行一些自定义配置，可以修改该文件。</p></blockquote><h2 id="五、使用测试"><a href="#五、使用测试" class="headerlink" title="五、使用测试"></a>五、使用测试</h2><h3 id="1-启动数据库服务"><a href="#1-启动数据库服务" class="headerlink" title="1.    启动数据库服务"></a>1.    启动数据库服务</h3><blockquote><p>使用root用户来启动服务：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><blockquote><p>检查服务状态：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><blockquote><p>查看到下图状态证明启动成功。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PAThaFMHZKR23V6.png"></p><h3 id="2-首次连接修改密码"><a href="#2-首次连接修改密码" class="headerlink" title="2.    首次连接修改密码"></a>2.    首次连接修改密码</h3><blockquote><p>MySQL在启动后会产生一个日志文件，存放在 <strong>&#x2F;var&#x2F;log&#x2F;mysqld.log</strong> ，其中包含了初始密码的信息，可以通过以下命令快速找到：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/vxqckftduipNZSR.png" alt="image-20220429200247691"></p><blockquote><p><strong>复制时注意前后都不要有空格。</strong></p></blockquote><p>使用客户端命令连接</p><blockquote><p>mysql -uroot -pfqomD#lTo5lH</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/2jYR1fn6AP5ogXm.png" alt="image-20220429200256023"></p><blockquote><p>修改安全策略</p><p>MySQL 5.7版本会安装一个密码校验插件，要求设置的密码必须在一定的位数并且要符合密码安全策略（有一定的复杂性），在学习阶段可以先调低策略，设置为一个比较简单的密码。<br>验证策略修改为low（只校验密码长度）：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>修改最小密码长度为4：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><blockquote><p>设置新密码：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/8BuKyF7wbpzClne.png" alt="image-20220429200422898"></p><blockquote><p>使用新密码连接<br>修改密码后使用 exit; 退出，重新使用新密码登录测试。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xiaohu\AppData\Roaming\Typora\typora-user-images\image-20220428201943496.png" alt="image-20220428201943496"></p><blockquote><p>添加主机名连接规则<br>对于MySQL数据库，会将用户的登录密码及权限等信息存放在mysql.user表中，可以先通过以下命令查看一下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,authentication_string <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/SkI1CVrlNm7qiFX.png" alt="image-20220429200440293"></p><blockquote><p>为方便以后使用,添加任意主机的连接规则，命令如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="3-数据库远程连接-课程使用Navicat"><a href="#3-数据库远程连接-课程使用Navicat" class="headerlink" title="3.    数据库远程连接(课程使用Navicat)"></a>3.    数据库远程连接(课程使用Navicat)</h3><p>在Linux系统中安装好数据库以后，通常我们都会使用界面工具来进行远程连接。这个时候可以通过两种方式实现，如果只是需要通过界面工具远程查看数据库情况，可以通过SSH通道的方式连接，这样更安全。<br>如果需要在代码中直接连接远程数据进行调试，此时就需要在MySQL数据库中开启远程连接，也就是需要添加一个连接规则。</p><p><img src="https://s2.loli.net/2022/04/29/Uwtluy85QH4nmxo.png" alt="image-20220429200457727"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL5-7概述以及下载安装（centOS7）&quot;&gt;&lt;a href=&quot;#MySQL5-7概述以及下载安装（centOS7）&quot; class=&quot;headerlink&quot; title=&quot;MySQL5.7概述以及下载安装（centOS7）&quot;&gt;&lt;/a&gt;MySQL5.7概述以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell中系统任务设置</title>
    <link href="http://example.com/2022/04/28/shell%E4%BB%BB%E5%8A%A1%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2022/04/28/shell%E4%BB%BB%E5%8A%A1%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-04-28T10:27:00.053Z</published>
    <updated>2022-05-12T15:36:31.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell中系统任务设置"><a href="#shell中系统任务设置" class="headerlink" title="shell中系统任务设置"></a>shell中系统任务设置</h1><h3 id="1、系统启动流程"><a href="#1、系统启动流程" class="headerlink" title="1、系统启动流程"></a>1、系统启动流程</h3><p>启动计算机的硬件(BIOS)</p><p>​        读取时间</p><p>​        选择对应的启动模式(USB HDD EFI）</p><p>如果是Linux系统，回去找&#x2F;boot目录.引导这个系统启动</p><p>计算机系统开始启动,读取初始化配置文件</p><p>​        vim &#x2F;etc&#x2F;inittab</p><p>​        启动时控制着计算机的运行级别 runlevel</p><table><thead><tr><th>0</th><th>halt(关机)</th></tr></thead><tbody><tr><td>1</td><td>Single user mode(单用户模式)</td></tr><tr><td>2</td><td>Multiuser, without NFS(多用户模式，但是无网络状态) FS–&gt;FileSystem</td></tr><tr><td>3</td><td>Full multiuser mode(多用户完整版模式)</td></tr><tr><td>4</td><td>unused (保留模式)</td></tr><tr><td>5</td><td>X11(用户界面模式)</td></tr><tr><td>6</td><td>reboot(重启模式)</td></tr></tbody></table><p>​        id:3:initdefault: 默认runlevel为3 </p><p>​        以runlevel&#x3D;3开始启动对应的服务和组件</p><p>开始默认引导公共的组件或者服务</p><p>​        vim &#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit</p><p>开始加载对应runlevel的服务</p><p>​        vi &#x2F;etc&#x2F;rc3.d&#x2F;</p><p>​            K:关机时需要关闭的服务</p><p>​            S:启动时需要开启的服务</p><p>​            数字代表了开启或者关闭的顺序</p><p>​            所有的文件都是软链接，链接的地址为 &#x2F;etc&#x2F;init.d</p><p>当启动完毕，所有的服务也被加载完成</p><h3 id="2、系统服务"><a href="#2、系统服务" class="headerlink" title="2、系统服务"></a>2、系统服务</h3><p>​    我们可以使用chkconfig命令查看当前虚拟机的服务</p><p>​    通过查看可以得知不同的级别对应到每一个服务确定本次开机自动启动</p><p>​    开机结束后，我们需要使用service（Centos6）Systemctl(Centos7)命令控制服务的开启或者关闭</p><h3 id="3、-开机自启动服务"><a href="#3、-开机自启动服务" class="headerlink" title="3、 开机自启动服务"></a>3、 开机自启动服务</h3><h5 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h5><p>​        首先创建脚本存放的文件夹</p><p>​                mkdir -p &#x2F;usr&#x2F;local&#x2F;scripts</p><p>​        在文件夹中创建脚本文件</p><p>​                vim hello.sh</p><p>​                给予执行权限</p><p>​        去&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件中添加脚本的绝对路径</p><p>​                给予rc.local执行权限</p><p>​        创建一个文件夹</p><p>​                mkdir &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ceshitest</p><p>​        重启虚拟机</p><p>​                reboot</p><h5 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h5><p>​        创建开机自启动脚本文件</p><p>​        vim schoolntpdate.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#chkconfig: 2345 88 99 </span></span><br><span class="line"><span class="comment">#description:auto_run </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/soft/ceshitest2</span><br></pre></td></tr></table></figure><p>​        给其设置执行权限</p><p>​                chmod u+x schoolntpdate.sh</p><p>​        将脚本拷贝到 &#x2F;etc&#x2F;init.d    下</p><p>​                cp schoolntpdate.sh &#x2F;etc&#x2F;init.d&#x2F;</p><p>​        添加到服务</p><p>​                chkconfig –add &#x2F;etc&#x2F;init.d&#x2F;schoolntpdate.sh</p><p>​        重启服务器</p><p>​                reboot</p><h3 id="4、定时任务"><a href="#4、定时任务" class="headerlink" title="4、定时任务"></a>4、定时任务</h3><blockquote><p>在linux中最小时间是到分钟的</p></blockquote><p>在系统服务中心，crond负责周期任务</p><p>​        systemctl status crond.service</p><p>添加任务，编辑当前用户的任务列表</p><p>​        crontab -e</p><p>编辑任务</p><p>​        星 星 星 星 星 command</p><p>​        分 时 日 月 周 命令</p><p>​        第1列表示分钟1～59 每分钟用*或者 *&#x2F;2表示</p><p>​        第2列表示小时1～23（0表示0点）</p><p>​        第3列表示日期1～31</p><p>​        第4列表示月份1～12</p><p>​        第5列标识号星期0～6（0表示星期天）</p><p>​        第6列要运行的命令</p><p>​        *：表示任意时间都，实际上就是“每”的意思。可以代表00-23小时或者00-12每月或者00-59分</p><p>​        -：表示区间，是一个范围，00 17-19 * * * cmd，就是每天17,18,19点的整点执行命令</p><p>​        ,：是分割时段，30 3,19,21 * * * cmd，就是每天凌晨3和晚上19,21点的半点时刻执行命令</p><p>​        &#x2F;n：表示分割，可以看成除法，*&#x2F;5 * * * * cmd，每隔五分钟执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每晚的21:30重启apache。 </span><br><span class="line"></span><br><span class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache。 </span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache。 </span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 </span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache。 </span><br><span class="line"></span><br><span class="line">* */2 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">每两小时重启apache </span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache </span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">每月的4号与每周一到周三的11点重启apache </span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">一月一号的4点重启apache</span><br><span class="line"></span><br><span class="line">需求：每分钟要干一些事情</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--（功能描述：显示年月日时分秒） </span><br><span class="line"><span class="built_in">date</span> <span class="string">&quot;+%Y%m%d%H%M%S&quot;</span></span><br></pre></td></tr></table></figure><p>重启crontab，使配置生效</p><p>​        systemctl restart crond.service</p><p>通过crontab -l</p><p>​        查看当前的定时任务</p><p>查看任务的历史</p><p>​        vim &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</p><p>清除任务</p><p>​        crontab -r</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;shell中系统任务设置&quot;&gt;&lt;a href=&quot;#shell中系统任务设置&quot; class=&quot;headerlink&quot; title=&quot;shell中系统任务设置&quot;&gt;&lt;/a&gt;shell中系统任务设置&lt;/h1&gt;&lt;h3 id=&quot;1、系统启动流程&quot;&gt;&lt;a href=&quot;#1、系统启</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shell编程</title>
    <link href="http://example.com/2022/04/28/Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/04/28/Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2022-04-28T10:26:42.888Z</published>
    <updated>2022-05-12T15:36:48.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h3 id="1-1-Shell名词解释"><a href="#1-1-Shell名词解释" class="headerlink" title="1.1 Shell名词解释"></a>1.1 Shell名词解释</h3><p>• Kernel</p><p>​        Linux内核主要是为了和硬件打交道</p><p>• Shell</p><p>​        命令器(command interpreter)</p><p>​        Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言， 又是一种程序设计语言.</p><p>​        Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作集作系统内核的服务。</p><p>• shell两大主流：</p><p>​        sh:</p><p>​            ■ Bourne shell（sh） ,Solaris,hpux默认shell</p><p>​            ■ Bourne again shell（bash） ,Linux系统默认shell</p><p>​        bash:</p><p>​            ■ C shell(csh)</p><p>​            ■ tc shell(tcsh)</p><p>• #!声明</p><p>告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello world!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Shell本的执行"><a href="#1-2-Shell本的执行" class="headerlink" title="1.2 Shell本的执行"></a>1.2 Shell本的执行</h3><p>• 输入脚本的绝对路径或相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/root/helloworld.sh</span><br><span class="line"></span><br><span class="line">./helloworld.sh</span><br><span class="line"></span><br><span class="line">注意：执行的必须是一个可执行文件</span><br></pre></td></tr></table></figure><p>• bash或sh +脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh helloworld.sh</span><br><span class="line"></span><br><span class="line">注意：当脚本没有X权限时，root和文件所有者通过该方式可以正常执行</span><br></pre></td></tr></table></figure><p>•在脚本的路径前再加”或source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source helloworld.sh</span><br></pre></td></tr></table></figure><p>查看当前正在执行的进程：ps -ef</p><p>•区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一种和第二种会新开一个bash,不同bash中的变量无法共享。</span><br><span class="line"></span><br><span class="line">第三种是在同一个shell里面执行的</span><br></pre></td></tr></table></figure><p>•export :可以将当前进程的变量传递给子进程去使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将来配置profile的时候所有的变量前必须加export</span><br></pre></td></tr></table></figure><h1 id="2-Shell基础入门"><a href="#2-Shell基础入门" class="headerlink" title="2. Shell基础入门"></a>2. Shell基础入门</h1><h3 id="2-1-shell变量"><a href="#2-1-shell变量" class="headerlink" title="2.1. shell变量"></a>2.1. shell变量</h3><p>定义变量时，变量名不加美元符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</span><br><span class="line"></span><br><span class="line">​中间不能有空格，可以使用下划线（_）。</span><br><span class="line"></span><br><span class="line">​不能使用标点符号。</span><br><span class="line"></span><br><span class="line">​不能使用bash里的关键字（可用help命令查看保留关键字）</span><br></pre></td></tr></table></figure><p>变量的类型</p><p>​    局部变量</p><p>​        局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><p>​    环境变量</p><p>​        所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。</p><p>​    Shell变量</p><p>​        shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量</p><p>(时间同步 ntpdate cn.ntp.org.cn)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量的声明</span></span><br><span class="line">name=<span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> /etc` </span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(<span class="built_in">ls</span> /etc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量的调用 (推荐不省略大括号)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># x /bin/sh: NAME: This variable is read only. </span></span><br><span class="line">url=<span class="string">&quot;https://www.google.com&quot;</span> </span><br><span class="line"><span class="built_in">readonly</span> url </span><br><span class="line">url=<span class="string">&quot;https://www.runoob.com&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除变量 </span></span><br><span class="line"><span class="built_in">unset</span> name</span><br></pre></td></tr></table></figure><h3 id="2-2-Shell的字符串"><a href="#2-2-Shell的字符串" class="headerlink" title="2.2. Shell的字符串"></a>2.2. Shell的字符串</h3><p>字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号</p><p>​    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p><p>​    单引号字串中不能出现单独一个的单引号，但可成对出现，作为字符串拼接使用。</p><p>双引号</p><p>​    双引号里可以有变量</p><p>​    双引号里可以出现转义字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明字符串 </span></span><br><span class="line">str1=<span class="string">&quot;hello world 1&quot;</span> </span><br><span class="line">str2=<span class="string">&#x27;hello world 2&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接--双引号 </span></span><br><span class="line">name=<span class="string">&#x27;sunwukong&#x27;</span> </span><br><span class="line">name1=<span class="string">&quot;hello, &quot;</span><span class="variable">$name</span><span class="string">&quot; !&quot;</span> </span><br><span class="line">name2=<span class="string">&quot;hello, <span class="variable">$&#123;name&#125;</span> !&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接--单引号 </span></span><br><span class="line">passwd=<span class="string">&#x27;123456&#x27;</span> </span><br><span class="line">passwd1=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$passwd</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">passwd2=<span class="string">&#x27;hello, $&#123;passwd&#125; !&#x27;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd2</span> <span class="comment"># hello, $&#123;passwd&#125; ! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的长度 </span></span><br><span class="line">email=<span class="string">&quot;123456@qq.com&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#email&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;email:1:4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Shell数组（尾对象）伪数组"><a href="#2-3-Shell数组（尾对象）伪数组" class="headerlink" title="2.3  Shell数组（尾对象）伪数组"></a>2.3  Shell数组（尾对象）伪数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义数组 括号来表示数组，数组元素用&quot;空格&quot;符号分割开 </span></span><br><span class="line">数组名=(值1 值2 ... 值n) </span><br><span class="line">favs=(<span class="string">&quot;足球&quot;</span> <span class="string">&quot;蓝球&quot;</span> <span class="string">&quot;乒乓球&quot;</span> <span class="string">&quot;保龄球&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组 $&#123;数组名[下标]&#125; </span></span><br><span class="line">fav=<span class="variable">$&#123;favs[1]&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 @ 符号可以获取数组中的所有元素 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;favs[@]&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的长度 </span></span><br><span class="line">length1=<span class="variable">$&#123;#favs[@]&#125;</span> </span><br><span class="line">length2=<span class="variable">$&#123;#favs[*]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Shell的注释"><a href="#2-4-Shell的注释" class="headerlink" title="2.4  Shell的注释"></a>2.4  Shell的注释</h3><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------- </span></span><br><span class="line"><span class="comment"># 这是一个注释 </span></span><br><span class="line"><span class="comment"># author： </span></span><br><span class="line"><span class="comment"># site： </span></span><br><span class="line"><span class="comment">#-------------------------------------------- </span></span><br><span class="line"><span class="comment">##### 服务器配置-start #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">##### 服务器配置-end ##### </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊的多行注释 </span></span><br><span class="line"><span class="comment"># end of file</span></span><br><span class="line">:&lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;! </span><br><span class="line">注释内容... </span><br><span class="line">注释内容... </span><br><span class="line">注释内容... </span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="2-5-Shell参数传递"><a href="#2-5-Shell参数传递" class="headerlink" title="2.5  Shell参数传递"></a>2.5  Shell参数传递</h3><p>执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字</p><table><thead><tr><th><strong>参数处理</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr><tr><td>$0</td><td>执行的文件名</td></tr></tbody></table> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># ./hello.sh 11 22 33 44</span></span><br></pre></td></tr></table></figure><h1 id="3-Shell高级进阶"><a href="#3-Shell高级进阶" class="headerlink" title="3  Shell高级进阶"></a>3  Shell高级进阶</h1><h3 id="3-1-Shell运算符"><a href="#3-1-Shell运算符" class="headerlink" title="3.1 Shell运算符"></a>3.1 Shell运算符</h3><p>运算符的分类</p><p>​    算数运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>‘expr $a + $b’ 为 30。</td></tr><tr><td>-</td><td>减法</td><td>‘expr $a-$b’结果为-10。</td></tr><tr><td>*</td><td>乘法</td><td>‘expr $a * $b’ 结果为 200。</td></tr><tr><td>&#x2F;</td><td>除法</td><td>‘expr$b&#x2F;$a’结果为2。</td></tr><tr><td>%</td><td>取余</td><td>‘expr $b % $a’ 结果为0。</td></tr><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;$b将把变量b的值赋给a</td></tr><tr><td>&#x3D;&#x3D;</td><td>相等，用于比较两个数字，相同返回true</td><td>[$a &#x3D;&#x3D; $b]返回false。</td></tr><tr><td>!&#x3D;</td><td>不相等,用于比较两个数字，不相同返回true</td><td>[$a !&#x3D; $b]返回true。</td></tr></tbody></table><p>​    关系运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回true</td><td>[$a -eq $b ]返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回true</td><td>[$a -ne $b ]返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，返回true</td><td>[$a -gt $b ]返回 false.</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，返回true</td><td>[$a -It $b ]返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，返回true</td><td>[$a -ge $b ]返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，返回true</td><td>[$a -le $b ]返回 true.</td></tr></tbody></table><p>​    布尔运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>！</td><td>非运算，表达式为true则返回false,否则退回true。</td><td>[! false ]返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为true则返回true。</td><td>[$a -It 20 -o $b -gt100 ]返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为true才返回true.</td><td>[$a -It 20 -a $b -gt100 J 返回 false。</td></tr></tbody></table><p>​    字符串运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的AND</td><td>[[$a -It 100 &amp;&amp; $b-gt 100 ]]返回 false</td></tr><tr><td>||</td><td>逻辑的OR</td><td>[[$a -It 100 || $b -gt 100 ]]返回 true</td></tr></tbody></table><p>​    文件测试运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>检测两个字符串是否相等，相等返回true。</td><td>[$a &#x3D; $b ]返回 false。</td></tr><tr><td>!&#x3D;</td><td>检测两个字符串是否相等，不相等返回true。</td><td>[$a !&#x3D; $b ]返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0,为0返回true。</td><td>[-z $a ]返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为不为0返回true。</td><td>[n “$a”]返回 true.</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回trueo</td><td>[$a]返回 true.</td></tr></tbody></table><h4 id="3-1-1-算数运算符"><a href="#3-1-1-算数运算符" class="headerlink" title="3.1.1 算数运算符"></a>3.1.1 算数运算符</h4><p> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a - b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a * b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> / <span class="variable">$a</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b / a : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> % <span class="variable">$a</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b % a : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-关系运算符"><a href="#3-1-2-关系运算符" class="headerlink" title="3.1.2 关系运算符"></a>3.1.2 关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 大于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 不大于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 小于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 不小于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 大于或等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 小于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3布尔运算符"><a href="#3-1-3布尔运算符" class="headerlink" title="3.1.3布尔运算符"></a>3.1.3布尔运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> == <span class="variable">$b</span>: a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-4-逻辑运算符"><a href="#3-1-4-逻辑运算符" class="headerlink" title="3.1.4 逻辑运算符"></a>3.1.4 逻辑运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span> elseecho <span class="string">&quot;返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span> elseecho <span class="string">&quot;返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-5-字符串运算符"><a href="#3-1-5-字符串运算符" class="headerlink" title="3.1.5 字符串运算符"></a>3.1.5 字符串运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span> </span><br><span class="line">b=<span class="string">&quot;efg&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度不为 0&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$a</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度不为 0&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度为 0&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串不为空&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串为空&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-6-文件测试运算符"><a href="#3-1-6-文件测试运算符" class="headerlink" title="3.1.6 文件测试运算符"></a>3.1.6 文件测试运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">file=<span class="string">&quot;/var/node/test.sh&quot;</span> </span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可读&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可读&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可写&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可写&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可执行&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可执行&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为普通文件&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为特殊文件&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件是个目录&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不是个目录&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不为空&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为空&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-2-echo打印数据"><a href="#3-2-echo打印数据" class="headerlink" title="3.2 echo打印数据"></a>3.2 echo打印数据</h4><p> Shell的echo指令用于字符串的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 显示普通字符串 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示转义字符 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello World\&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示变量 </span></span><br><span class="line">name=<span class="string">&quot;zhangsan&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示换行 </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示不换行 </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示结果定向至文件 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; myfile </span><br><span class="line"><span class="comment">## &gt; 代表覆盖</span></span><br><span class="line"><span class="comment"># &gt;&gt; 追加写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 原样输出字符串 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示命令执行结果 </span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br></pre></td></tr></table></figure><h3 id="3-4-Shell流程控制"><a href="#3-4-Shell流程控制" class="headerlink" title="3.4 Shell流程控制"></a>3.4 Shell流程控制</h3><h4 id="3-4-1-if"><a href="#3-4-1-if" class="headerlink" title="3.4.1  if"></a>3.4.1  if</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditionl</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">commandl</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 小于 bn&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;没有符合的条件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="Shell-case语句为多选择语句。"><a href="#Shell-case语句为多选择语句。" class="headerlink" title="Shell case语句为多选择语句。"></a>Shell case语句为多选择语句。</h4><h4 id="可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。"><a href="#可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。" class="headerlink" title="可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。"></a>可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span> </span><br><span class="line">模式1)</span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN ;; </span><br><span class="line"></span><br><span class="line">模式2）</span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入 1 到 4 之间的数字:&#x27;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你输入的数字为:&#x27;</span> </span><br><span class="line"><span class="built_in">read</span> num </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span> </span><br><span class="line">1) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 1&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">2) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 2&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">3) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 3&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">4) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 4&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span> </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-for"><a href="#3-4-2-for" class="headerlink" title="3.4.2 for"></a>3.4.2 for</h4><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。</p><p>命令可为田可有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5 </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The value is: <span class="variable">$loop</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">&#x27;This is a string&#x27;</span> <span class="string">&#x27;hello moto&#x27;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-while循环"><a href="#3-4-3-while循环" class="headerlink" title="3.4.3 while循环"></a>3.4.3 while循环</h4><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">command</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line">int=1 </span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$int</span> </span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;int++&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限循环 </span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">command</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-4-break"><a href="#3-4-4-break" class="headerlink" title="3.4.4 break"></a>3.4.4 break</h4><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">while</span> : </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字:&quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span> </span><br><span class="line">1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span> </span><br><span class="line"><span class="built_in">break</span> </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-5-continue"><a href="#3-4-5-continue" class="headerlink" title="3.4.5 continue"></a>3.4.5 continue</h4><p>continue命令不会跳出所有循环，仅仅跳出当前循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">while</span> : </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span> </span><br><span class="line">1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span></span><br><span class="line">        <span class="built_in">continue</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;游戏结束&quot;</span> </span><br><span class="line">        ;; </span><br><span class="line">    <span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="3-5-Shell函数"><a href="#3-5-Shell函数" class="headerlink" title="3.5 Shell函数"></a>3.5 Shell函数</h2><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</p><p>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第一个函数------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这是我的第一个 shell 函数!&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数开始执行-----&quot;</span> </span><br><span class="line">demoFun </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数执行完毕-----&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数返回值------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第一个数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第二个数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> anotherNum  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !&quot;</span> </span><br><span class="line"><span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>)) </span><br><span class="line">&#125;</span><br><span class="line">funWithReturn </span><br><span class="line"><span class="comment"># 函数返回值在调用该函数后通过 $? 来获得。 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入的两个数字之和为 $? !&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数参数------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell编程&quot;&gt;&lt;a href=&quot;#Shell编程&quot; class=&quot;headerlink&quot; title=&quot;Shell编程&quot;&gt;&lt;/a&gt;Shell编程&lt;/h1&gt;&lt;h3 id=&quot;1-1-Shell名词解释&quot;&gt;&lt;a href=&quot;#1-1-Shell名词解释&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux用户管理</title>
    <link href="http://example.com/2022/04/25/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/04/25/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</id>
    <published>2022-04-25T09:53:05.008Z</published>
    <updated>2022-05-12T15:37:42.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、用户组管理"><a href="#1、用户组管理" class="headerlink" title="1、用户组管理"></a>1、用户组管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户组的管理包括用户组的添加、删除和修改。</span><br><span class="line"></span><br><span class="line">为什么要建立用户组</span><br><span class="line"></span><br><span class="line">人事部有20名员工，我们要建立一个组，叫 hr，这样就不用分别给20个员工设置权限了。</span><br></pre></td></tr></table></figure><h3 id="①-用户组添加"><a href="#①-用户组添加" class="headerlink" title="① 用户组添加"></a>① 用户组添加</h3><p>命令：groupadd</p><p>作用：添加组</p><p>语法：# groupadd  [参数选项  选项值]  用户组名</p><p>选项：-g：设置用户组ID 数字，如果不指定，则默认从1000 之后递增（1-999系统组）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupadd 组名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#groupadd bigdata</span></span><br><span class="line">含义：新建一个组叫做bigdata</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/npRaHjm9SbX6M1k.png" alt="image-20220425210757721"></p><p>提示：linux下我们执行完命令，有时候会没有任何提示，直接回到#提示符，这种状态表明，命令执行成功，没有报错。&#x3D;&#x3D;“没有消息就是最好的消息”&#x3D;&#x3D;</p><p>存储用户组信息的文件：&#x2F;etc&#x2F;group<br> 使用cat命令，查看&#x2F;etc&#x2F;group文件</p><p>&#x2F;etc&#x2F;group文件结构：</p><p>特别说明：</p><p>1） 密码位<code>x</code>代表<code>占位符</code>，用户组可以设置密码，但是大部分情况下不需要设置</p><p>2）组内用户名：表示附加组是该组的用户名称。</p><p><img src="https://s2.loli.net/2022/04/25/YDOHwAhScxNpVGe.png" alt="image-20220425211850494"></p><h3 id="②-用户组修改"><a href="#②-用户组修改" class="headerlink" title="② 用户组修改"></a>② 用户组修改</h3><p>命令：groupmod</p><p>语法：# groupmod   [选项   选项值]   用户组名</p><p>选项：-g  ：gid缩写，设置一个自定义的用户组ID 数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n  ：name缩写，设置新的用户组的名称</span><br></pre></td></tr></table></figure><p>示例代码：修改bigdata用户组，将组ID改成1100，将名称改为bigdata1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupmod -g 新的组ID -n 新的组ID 原有组ID</span><br><span class="line">示例代码：</span><br><span class="line">#groupmod -g 1100 -n bigdata1 bigdata</span><br><span class="line">含义：将bigdata组的组ID改成1100，组名改成bigdata1</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/59HpA2iK1Cvdxb6.png" alt="image-20220425220023602"></p><h3 id="③-用户组删除"><a href="#③-用户组删除" class="headerlink" title="③ 用户组删除"></a>③ 用户组删除</h3><p>命令：groupdel</p><p>语法：# groupdel  用户组名</p><p>案例：删除bigdata1组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupdel 组名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#groupdel bigdata1</span></span><br><span class="line">含义：将bigdata1组删除</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/EtZWhnz6brfRJxg.png" alt="image-20220425221937616"></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><p>用户的管理涉及用户的添加、删除和修改。</p><p>与用户相关的文件：&#x2F;etc&#x2F;passwd</p><h3 id="①useradd添加用户"><a href="#①useradd添加用户" class="headerlink" title="①useradd添加用户"></a>①useradd添加用户</h3><p>命令：useradd</p><p>作用：添加用户</p><p>语法：# useradd   [选项  选项的值]   …   用户名</p><p>选项：-g：表示指定用户的用户主（主要）组，选项值可以是用户组ID，也可以是组名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-G：表示指定用户的用户附加（额外）组，选项值可以是用户组ID，也可以是组名</span><br><span class="line"></span><br><span class="line">-u ：uid，用户的id（用户的标识符），系统默认会从500 /或1000之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ 的自选靓号情况】</span><br><span class="line"></span><br><span class="line">-c：comment，添加注释（选择是否添加）</span><br><span class="line"></span><br><span class="line">-s：指定用户登入后所使用的shell 解释器，默认/bin/bash【专门的接待员】，如果不想让其登录，则可以设置为/sbin/nologin   （重要）</span><br><span class="line"></span><br><span class="line">-d：指定用户登入时的启始目录（家目录位置）</span><br><span class="line"></span><br><span class="line">    -n：取消建立以用户名称为名的群组（了解）</span><br><span class="line"></span><br><span class="line"> 当我新建一个账户叫user01, 同时，系统会自动建立一个组也叫user01</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：useradd 用户名</span><br><span class="line">示例代码：</span><br><span class="line">#useradd hzh</span><br><span class="line">含义：创建用户hzh，不带任何选项。</span><br></pre></td></tr></table></figure><p>注意：不用任何参数，创建用户，系统会默认执行以下操作：</p><p>1）在 &#x2F;etc&#x2F;passwd 文件中创建一行关于hzh用户的数据</p><p><img src="https://s2.loli.net/2022/04/25/l149argXGmFtVoK.png" alt="image-20220425222337183"></p><p> 2）在 &#x2F;etc&#x2F;shadow 文件中新增了一行关于wyh密码的数据</p><p><img src="https://s2.loli.net/2022/04/25/oqDQihSmxaUlYCJ.png" alt="image-20220425224109139"></p><p> 3）在 &#x2F;etc&#x2F;group 文件中创建一行与用户名相同的组，例如wyh</p><p><img src="https://s2.loli.net/2022/04/25/V1fFiYKbUw5eumD.png" alt="image-20220425224156762"></p><p> 4）在 &#x2F;etc&#x2F;gshadow 文件中新增一行与新增群组相关的密码信息，例如wyh</p><p><img src="https://s2.loli.net/2022/04/25/mgCprBDyfAshOKx.png" alt="image-20220425224224338"></p><p> 5）自动创建用户的家目录，默认在&#x2F;home下，与用户名同名</p><p><img src="https://s2.loli.net/2022/04/25/k4gRO2fNYBuovF9.png" alt="image-20220425224328709"></p><p>验证是否成功：</p><p>1）使用tail文件查看&#x2F;etc&#x2F;passwd文件</p><p>2）使用tail文件查看&#x2F;etc&#x2F;group文件</p><p>3）验证是否存在家目录（在Centos 下创建好用户之后随之产生一个同名家目录）</p><h3 id="②etc-x2F-passwd存储用户信息的文件"><a href="#②etc-x2F-passwd存储用户信息的文件" class="headerlink" title="②etc&#x2F;passwd存储用户信息的文件"></a>②etc&#x2F;passwd存储用户信息的文件</h3><p>使用vim命令打开&#x2F;etc&#x2F;passwd文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root : x : <span class="number">0</span> : <span class="number">0</span> : root : <span class="regexp">/root : /</span>bin/bash</span><br><span class="line">用户名 : 密码 : 用户<span class="variable constant_">ID</span> : 用户组<span class="variable constant_">ID</span> : 注释 : 家目录 : 解释器shell</span><br></pre></td></tr></table></figure><p><strong>用户名</strong>：登录linux时使用的用户名<br> <strong>密码</strong>：此密码位置一般情况都是”x”，表示密码的占位，真实密码存储在&#x2F;etc&#x2F;shadow<br> <strong>用户ID</strong>：用户的识别符，每个用户都有唯一的UID【-u】<br> <strong>用户组ID</strong>：该用户所属的主组ID；【-g】</p><p><strong>注释</strong>：解释该用户是做什么用的；【-c】<br> <strong>家目录</strong>：用户登录进入系统之后默认的位置；【-d】<br> <strong>解释器shell</strong>：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，转换成机器语言，传递给内核处理；如果解释器是&#x3D;&#x3D;&#x2F;bin&#x2F;bash 表示用户可以登录到系统&#x3D;&#x3D;，&#x3D;&#x3D;&#x2F;sbin&#x2F;nologin表示该用户不能登录到系统&#x3D;&#x3D;【-s】</p><p>下面我们来看一下对于useradd参数的使用</p><p><strong>企业场景1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     公司新员工lisi，属于bigdata部门，用户ID1200，不允许登录系统</span><br><span class="line">思路：</span><br><span class="line">    创建用户lisi，默认lisi属于自己同名的主组，让lisi 属于附加组bigdata1，用户ID 1200，注释为<span class="string">&quot;数据工程师lisi&quot;</span>，解释器为/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法二：useradd <span class="literal">-G</span> 附加组名 <span class="literal">-u</span> 用户ID <span class="literal">-s</span> /sbin/nologin <span class="literal">-c</span> <span class="string">&quot;shuser lisi&quot;</span> 用户名</span><br><span class="line">示例代码：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># useradd -G bigdata -u 1200 -s /sbin/nologin -c &quot;数据工程师lisi&quot; lisi</span></span><br><span class="line">useradd：“bigdata”组不存在</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># groupadd bigdata</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># useradd -G bigdata -u 1200 -s /sbin/nologin -c &quot;数据工程师lisi&quot; lisi</span></span><br><span class="line"></span><br><span class="line">含义：创建用户lisi，不带任何选项。</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bigdata行的含义：在bigdata的组里（组<span class="type">id</span> 是<span class="number">1002</span>）有一个组内用户lisi（lisi 的附加组就是<span class="number">1002</span>，附加组的名字是bigdata1）。</span><br><span class="line">如果需要为一个用户指定多个附加组，只需要将多个附加组的<span class="type">id</span> 通过英文逗号“,”分割即可。</span><br><span class="line">例如-G <span class="number">500</span>,<span class="number">501</span>,<span class="number">502</span></span><br><span class="line"></span><br><span class="line">① 主组只能有<span class="number">1</span> 个（类似于亲生父母只有一对），附加组可以多个，也可以没有附加组（类似于认干爹干妈，可以有也可以没有，也可以有多个）</span><br><span class="line">② 主组必须有</span><br><span class="line">③ 后期将权限管理的时候，关于文档的属组指的是主组（了解）</span><br></pre></td></tr></table></figure><h3 id="③id查看用户信息"><a href="#③id查看用户信息" class="headerlink" title="③id查看用户信息"></a>③id查看用户信息</h3><p>命令：id</p><p>作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。</p><p>语法1：# id  <code>默认显示当前执行该命令的用户的基本信息</code></p><p><img src="https://s2.loli.net/2022/04/25/vXxAD93nSeRUKhf.png" alt="image-20220425224939961"></p><p> 语法2：# id <code>用户名</code>， 显示指定用户的基本信息</p><p> 如何验证以上信息是否正确？</p><p>&#x3D;&#x3D;答：验证用户信息：通过文件&#x2F;etc&#x2F;passwd，验证用户组信息：通过文件&#x2F;etc&#x2F;group&#x3D;&#x3D;</p><h3 id="④usermod修改用户"><a href="#④usermod修改用户" class="headerlink" title="④usermod修改用户"></a>④usermod修改用户</h3><p>命令：usermod(user modify)</p><p>语法：# usermod   [选项  选项的值]   …  用户名</p><p>作用：修改用户的各种属性</p><p>选项：-g：表示指定用户的用户主组，选项的值可以是用户组的ID，也可以是组名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-G：表示指定用户的用户附加组，选项的值可以是用户组的ID，也可以是组名</span><br><span class="line"></span><br><span class="line">-u：uid，用户的id（用户的标识符），系统默认会从500 之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ 的自选靓号情况】</span><br><span class="line"></span><br><span class="line"> -L：锁定用户，锁定后用户无法登陆系统lock</span><br><span class="line"></span><br><span class="line">     -U：解锁用户unlock</span><br><span class="line"></span><br><span class="line"> -c&lt;备注&gt;：修改用户帐号的备注文字</span><br><span class="line"></span><br><span class="line"> -d&lt;登入目录&gt;：修改用户登入时的目录</span><br><span class="line"></span><br><span class="line"> -s<span class="tag">&lt;<span class="name">shell</span>&gt;</span>：修改用户登入后所使用的shell</span><br></pre></td></tr></table></figure><p><strong>企业场景2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公司员工wangwu，属于bigdata部门，现在要休产假，产假期间，暂时停止她登陆电脑的权限，同时原来属于wyhshujia部门的员工lisi，负责wangwu的工作，所以，需要把lisi加入到bigdata的组，同时，修改lisi的账户注释为“wyhshujia bigdata user”</span><br><span class="line"></span><br><span class="line">对于wangwu用户，我们要执行锁定和解锁操作</span><br><span class="line"></span><br><span class="line">对于lisi用户，我们要将lisi加入到bigdata的附加组，同时修改lisi账户的注释</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master hzh]<span class="comment"># usermod -L wangwu</span></span><br><span class="line">usermod：用户“wangwu”不存在</span><br><span class="line">[root@master hzh]<span class="comment"># useradd -G bigdata -u 1300 -c &quot;大数据开发&quot; wangwuuseradd：“bigdata”组不存在</span></span><br><span class="line">[root@master hzh]<span class="comment"># groupadd bigdata</span></span><br><span class="line">[root@master hzh]<span class="comment"># useradd -G bigdata -u 1300 -c &quot;大数据开发&quot; wangwu</span></span><br><span class="line">[root@master hzh]<span class="comment"># usermod -L wangwu</span></span><br><span class="line"></span><br><span class="line">用法一：usermod -L 王五账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#usermod -L wangwu</span></span><br><span class="line">含义：将王五账户暂时锁定</span><br><span class="line"></span><br><span class="line">用法二：usermod -U 王五账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#usermod -U wangwu</span></span><br><span class="line">含义：将王五账户解锁</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法三：usermod <span class="operator">-</span><span class="type">G</span> 组名 <span class="operator">-</span>c “注释内容” 李四用户账号</span><br><span class="line">示例代码：</span><br><span class="line">#usermod <span class="operator">-</span><span class="type">G</span> bigdata <span class="operator">-</span>c <span class="string">&quot;bigdata user&quot;</span> lisi</span><br><span class="line">含义：将李四的账户加入bigdata组，并修改注释内容为shhr user</span><br></pre></td></tr></table></figure><h3 id="⑤passwd修改用户密码"><a href="#⑤passwd修改用户密码" class="headerlink" title="⑤passwd修改用户密码"></a>⑤passwd修改用户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux ==不允许没有密码的用户登录到系统==，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。</span><br></pre></td></tr></table></figure><p>命令：passwd</p><p>语法：# passwd  用户名 【如果不指定用户名则修改自己的密码】</p><p>作用：修改用户密码<br> <strong>企业场景3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">王五产假休完回到公司上班，需要将王五的账户解锁，在使用usermod -U解锁时，我们看到一个错误信息如下：</span><br></pre></td></tr></table></figure><p>usermod: unlocking the user’s password would result in a passwordless account.</p><p>解锁这个账户，将导致一个没有密码的账户，因为之前王五的账户没有密码。这时候，我们就需要使用passwd命令，给王五的账户设置一个密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法一：passwd 账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#passwd wangwu</span></span><br><span class="line">含义：为wangwu账户设置密码</span><br><span class="line">注意：</span><br><span class="line">    当密码过于简单时，系统会提示这是一个不好的密码，因为它太简单了，但是我们仍然可以坚持使用这个密码。</span><br><span class="line">    在我们输入密码时，屏幕不会有任何显示。</span><br><span class="line">    密码需要输入两次，请确保两次输入的密码是一样的。</span><br></pre></td></tr></table></figure><h3 id="⑥认识-x2F-etc-x2F-shadow文件"><a href="#⑥认识-x2F-etc-x2F-shadow文件" class="headerlink" title="⑥认识&#x2F;etc&#x2F;shadow文件"></a>⑥认识&#x2F;etc&#x2F;shadow文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于 /etc/passwd文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分离出来，并单独放到了shadow文件中。</span><br><span class="line"></span><br><span class="line">/etc/shadow 文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就保证了用户密码的安全性。  </span><br></pre></td></tr></table></figure><p>与用户密码相关的文件：&#x2F;etc&#x2F;shadow</p><p>为用户设置密码之后，会自动在&#x2F;etc&#x2F;shadow文件中进行体现，使用vim编辑器打开</p><p>第一列为用户名，例如zhangsan</p><p>后面是加密后的密码，就是$开头的字符串</p><p>如果显示为!!,则表示这个用户&#x3D;&#x3D;没有&#x3D;&#x3D;设置密码。</p><p>由以上截图所知，wyh,lisi是没有设置密码的。wangwu我们刚刚设置了密码，所以显示为一个加密的字符创</p><p>任务：新建一个账户叫shujiaxiaoli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建第二个账户叫shujiaxiaoli</span><br><span class="line"></span><br><span class="line">给shujiaxiaoli账户设置一个密码</span><br><span class="line"></span><br><span class="line">进入shadow文件，观察两个账户的区别</span><br></pre></td></tr></table></figure><h3 id="⑦su切换用户"><a href="#⑦su切换用户" class="headerlink" title="⑦su切换用户"></a>⑦su切换用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在设置用户密码之后就可以使用此账号进行登录系统了，如果系统处于已登录状态，则可以使用su命令进行切换用户。</span><br><span class="line"></span><br><span class="line">为了系统安全，企业中通常不会允许root用户直接登录计算机，但是工作需要，我们又需要使用root权限，这时候，我们就可以先使用一个普通用户登录计算机，再通过su命令切换到root权限。</span><br></pre></td></tr></table></figure><p>命令：su</p><p>语法：# su  [-]   账号</p><p>作用：切换用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法一：su 用户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="selector-id">#su</span> root</span><br><span class="line">含义：切换到root权限</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="selector-tag">a</span>. 从root 往普通用户切换不需要密码，但是反之则需要root 密码；</span><br><span class="line"><span class="selector-tag">b</span>. 切换用户之后前后的工作路径是不变的，添加了选项<span class="selector-attr">[-]</span>会自动切换到用户的家；</span><br><span class="line">c. 普通用户没有办法访问root 用户家目录，但是反之则可以；</span><br></pre></td></tr></table></figure><p>启用wheel组设置（了解）</p><p>步骤1：使用vim编辑器 打开&#x2F;etc&#x2F;pam.d&#x2F;su文件</p><p>步骤2：编辑文件，去掉auth required pam_wheel.so use_uid这一行前面的#，使这一行配置生效</p><p>步骤3：下面是去掉#后的状态</p><p>步骤4：保存退出 ：wq<br>这时，只有在wheel组内的用户才可以su到root</p><p><img src="https://s2.loli.net/2022/04/25/9CUH3kfQtROpW5K.png" alt="image-20220425225804162"></p><p> ⑧userdel删除用户<br> 命令：userdel</p><p>语法：# userdel   选项   用户名</p><p>作用：删除账户及其对应家目录</p><p>选项：-r：表示删除用户的同时，删除其家目录&#x2F;home下的对应文件夹</p><p>权限:<br>    通过ll查看详细信息时:-rw-r–r–. 1 root root     11 4月  24 21:22 xiao.txt<br>    -:表示类型<br>    rw-:当前用户权限<br>    r–:当前用户组权限<br>    r–:其他用户权限</p><pre><code>r:读     4w:写     2x:执行   1u:当前用户g:当前组o:其他a:所有</code></pre><p>权限分配<br>    chmod:修改权限<br>        格式1:(使用相加减表达权限)<br>            chmod [选项] [权限修改] [文件]<br>        格式2:(使用数字表达权限)<br>            chmod [选项] [权限修改] [文件]<br>            4:读<br>            2:写<br>            1:执行<br>            7:全部<br>        注意:如果只给一个数字表示修改o,两个表示修改go<br>        选项:<br>            -R:迭代修改</p><pre><code>chgrp:修改用户组    格式:        chgrp [选项] [组名] [文件或目录]    选项:        -R:表达迭代修改    注意:文件或目录的所有用户或所有组,都是以编号来查询所有用户或所有组        如果不存在就显示编号,存在显示名称chown:修改所属用户    格式:        chown [选项] [组名] [文件或目录]    选项:        -R:表达迭代修改sudo:越权执行    格式:        sudo 命令    注意:sudo实际上去借root权限执行命令(root对普通用户分配了权限)sudo -l:查看当前权限visudo:修改配置文件进行权限分配(文件所在位置/etc/sudoers)    例如:普通用户拥有root所有权限        用户名 ALL=(ALL) ALL        用户名 ALL=(root) ALL    例如:普通用户只能执行一个命令        用户名 ALL=(root)/bin/rm可以同过vim /etc/sudoers修改权限分配</code></pre><p>查找<br>    find<br>        格式:<br>            find 开始查找路径 [选项] [条件]<br>        选项:<br>            -name<br>                <em>表示匹配所有<br>                ?表示匹配一个<br>                例如:从&#x2F;开始查找后缀为.txt<br>                    find &#x2F; -name “</em>.txt”<br>            -type<br>                d:表示目录<br>                f:表示文件<br>                例如:从&#x2F;开始查找文件<br>                    find &#x2F; -type f<br>            -size<br>                ll –block-size&#x3D;单位<br>                    例如:大小以k为单位进行显示<br>                        ll –block-size&#x3D;k<br>                注意:条件需要给上单位<br>                    +表示大于<br>                    -表示小于<br>                    不给就是等于<br>                例如:从&#x2F;开始查找文件大小大于2k<br>                    find &#x2F; -size +2k<br>            -user<br>            -group<br>Linux常见符号<br>    |:管道,把前面一部分的内容交给后面去处理<br>    例如:<br>        cat &#x2F;etc&#x2F;profile | more</p><pre><code>grep:筛选    格式:        grep 筛选条件&gt;&gt;:追加,把命令1的结果写入到命令2    格式:        命令1 &gt;&gt; 命令2     例如:cat profile &gt;&gt; test.txt&gt;:覆盖    格式:        命令1 &gt; 命令2     例如:cat profile &gt; test.txt</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、用户组管理&quot;&gt;&lt;a href=&quot;#1、用户组管理&quot; class=&quot;headerlink&quot; title=&quot;1、用户组管理&quot;&gt;&lt;/a&gt;1、用户组管理&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://example.com/2022/04/23/linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/04/23/linux%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-23T09:08:19.486Z</published>
    <updated>2022-05-12T15:37:55.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h5 id="linux基础命令："><a href="#linux基础命令：" class="headerlink" title="linux基础命令："></a>linux基础命令：</h5><blockquote><p>1、ll 和 ls    查看当前目录下所有的文件和文件夹<br>2、cd    切换目录<br>3、pwd    查看当前目录的一个完整路径<br>4、ls -a    列出当前目录下的所有文件（包括隐藏文件）<br>5、stat 文件名    查看文件信息<br>6、ls –help    查看ls用法（–help查看命令使用手册）<br>7、mkdir    文件夹的名称<br>8、mkdir-p ….    创建多级文件夹<br>9、touch 文件名    创建文件<br>10、mv    移动一个文件，可以在移动的同时修改文件名<br>11、cp    复制文件<br>12、.    当前目录    ..    上一级目录<br>13、rm 文件的名称    删除一个文件，会进行提示，输入y则表示删除，输入n表示不删除<br>14、rm -f 文件的名称    不进行提示强制删除一个文件<br>15、rm -r    删除一个文件或文件夹，会进行提示，输入y则表示删除，输入n表示不删除<br>16、rm -rf    强制删除文件或文件夹，不进行提示   使用时一定要注意路径！！！<br>17、cat 文件名    不打开文件查看文件内容<br>18、tac 文件名    不打开文件倒序查看内容<br>19、cat file1 file2 &gt; file3    文件合并   ，注意的是file3目标文件可以不存在，会自动创建，如果存在则会覆盖原本内容<br>20、cat -b    显示行号输出<br>21、分屏显示 more    用一次显示一屏，没有显示完时最后一行显示进度。回车显示下一行，按b显示上一页，空格显示下一页，q退出。</p></blockquote><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><blockquote><p>touch 文件名    创建一个文件<br>vi 文件名    创建打开并编辑</p></blockquote><h5 id="vi-打开文件"><a href="#vi-打开文件" class="headerlink" title="vi 打开文件"></a>vi 打开文件</h5><blockquote><p>按下i进入编辑模式</p><p>按下esc 退出编辑模式</p><p>英文输入状态下 输入：</p><p>输入wq    表示保存并退出</p><p>输入q!    表示不保存退出</p><p>进入编辑模式后退格一个一个字符删除</p><p>不进入编辑模式 连续两次 d表示删除一行</p><p>另外一种编辑模式 vim</p><p>centOS7并不自带这种编辑命令，需要额外下载安装</p><p>通过yum进行下载并安装 （类比python中的pip）</p><p>yum install vim</p><p>yum -y install vim   使用这个命令在安装过程中不需要手动输入y进行继续，默认都是y</p></blockquote><h5 id="linux安装jdk1-8"><a href="#linux安装jdk1-8" class="headerlink" title="linux安装jdk1.8"></a>linux安装jdk1.8</h5><blockquote><p>1、上传jdk压缩包到&#x2F;usr&#x2F;local&#x2F;soft&#x2F;目录下<br>2、使用解压命令进行解压  tar -zxvf jdk-8u171-linux-x64.tar.gz<br>3、配置环境变量<br>        在linux中环境的变量的文件是&#x2F;etc&#x2F;profile<br>4、打开并编辑环境变量文件<br>        vim &#x2F;etc&#x2F;profile<br>5、按下i进入编辑模式（注意：不要修改文件原本的内容，我们增加环境变量只需要额外增加即可，不要动原本的内容！！！！！！）<br>        export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;jdk1.8.0_171<br>        export PATH&#x3D;.:$PATH:$JAVA_HOME&#x2F;bin<br>6、保存退出<br>7、在linux中环境变量修改完后需要使用命令让其生效<br>        source &#x2F;etc&#x2F;profile<br><strong>可能会出现的错误：</strong><br>1、发现交换文件 “&#x2F;etc&#x2F;.profile.swp”<br>            所有者: root    日期: Sat Apr 23 15:35:57 2022<br>            文件名: &#x2F;etc&#x2F;profile<br>            修改过: 是<br>            用户名: root      主机名: master<br>           进程 ID: 61454<br>正在打开文件 “&#x2F;etc&#x2F;profile”<br>              日期: Sat Apr 23 15:2<br>这是由于上一次打开的文件没有正确关闭导致的，需要删除交换文件： rm -rf &#x2F;etc&#x2F;.profile.swp</p></blockquote><h5 id="修改主机名（centOS7）"><a href="#修改主机名（centOS7）" class="headerlink" title="修改主机名（centOS7）"></a>修改主机名（centOS7）</h5><blockquote><p>vim &#x2F;etc&#x2F;hostname<br>修改后需要重启虚拟机<br>使用命令重启：reboot</p></blockquote><h5 id="centOS7关闭防火墙"><a href="#centOS7关闭防火墙" class="headerlink" title="centOS7关闭防火墙"></a>centOS7关闭防火墙</h5><blockquote><p>systemctl stop firewalld.service #停止firewall<br>systemctl disable firewalld.service #禁止firewall开机启动</p></blockquote><h5 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h5><blockquote><p>firewall-cmd –state<br>systemctl status firewalld.service</p></blockquote><h5 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h5><blockquote><p>systemctl start firewalld.service</p></blockquote><h5 id="关闭networkmanage服务（centOS7内置一个网络服务）"><a href="#关闭networkmanage服务（centOS7内置一个网络服务）" class="headerlink" title="关闭networkmanage服务（centOS7内置一个网络服务）"></a>关闭networkmanage服务（centOS7内置一个网络服务）</h5><blockquote><p>systemctl status NetworkManager    #查看NetworkManager状态<br>systemctl stop NetworkManager    #停止NetworkManager<br>systemctl disable NetworkManager    #禁止NetworkManager开机启动</p></blockquote><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><blockquote><p>1、克隆之前不要开启被克隆的虚拟机<br>2、注意：克隆过程中需要选择完整克隆！！！<br>3、克隆完后不要立即启动，因为mac地址和被克隆的虚拟机一模一样，需要修改克隆后虚拟机的mac地址<br>4、需要修改克隆后虚拟机的主机名和ip地址，先不要启动被克隆的虚拟机<br>5、修改主机名：<br>        cd &#x2F;etc<br>        vim hostname<br>        修改后重启生效<br>6、修改ip地址<br>        cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts<br>        vim ifcfg-ens33<br>7、重启 reboot</p></blockquote><h5 id="基础命令进阶："><a href="#基础命令进阶：" class="headerlink" title="基础命令进阶："></a>基础命令进阶：</h5><h6 id="1、远程复制命令："><a href="#1、远程复制命令：" class="headerlink" title="1、远程复制命令："></a>1、远程复制命令：</h6><p>​        远程复制文件：scp test.txt 192.168.40.130:&#x2F;usr&#x2F;local&#x2F;soft&#x2F;<br>​        远程复制文件夹：scp -r aaaa 192.168.40.120:&#x2F;usr&#x2F;local&#x2F;soft&#x2F;</p><h6 id="2、配置ip映射"><a href="#2、配置ip映射" class="headerlink" title="2、配置ip映射"></a>2、配置ip映射</h6><p>​    2.1、vim &#x2F;etc&#x2F;hosts</p><p>​        添加如下内容：</p><p>​            192.168.40.110  master<br>​            192.168.40.120  node1<br>​            192.168.40.130  node2</p><p>​    2.2、远程复制到其他节点上，覆盖原来的hosts文件，每台虚拟机都要进行覆盖<br>​        scp &#x2F;etc&#x2F;hosts node1:&#x2F;etc&#x2F;hosts<br>​        scp &#x2F;etc&#x2F;hosts node2:&#x2F;etc&#x2F;hosts</p><p>​    2.3、覆盖完后，尝试ping其他虚拟机</p><h6 id="3、配置免密操作（每个虚拟机都要进行操作）"><a href="#3、配置免密操作（每个虚拟机都要进行操作）" class="headerlink" title="3、配置免密操作（每个虚拟机都要进行操作）"></a>3、配置免密操作（每个虚拟机都要进行操作）</h6><p>​     <strong>在任意目录都可以执行</strong><br>​        3.1 ssh-keygen -t rsa 然后三次回车<br>​        3.2  ssh-copy-id -i 主机名<br>​            注意：生成密钥的虚拟机复制密钥的时候，自己也要复制一份<br>​            举例：ssh-copy-id -i master<br>​                        ssh-copy-id -i node1<br>​                        ssh-copy-id -i node2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h3&gt;&lt;h5 id=&quot;linux基础命令：&quot;&gt;&lt;a href=&quot;#linux基础命令：&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/</id>
    <published>2022-04-18T12:00:42.122Z</published>
    <updated>2022-04-18T12:09:20.578Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><blockquote><p>•当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</p><h4 id="•加载"><a href="#•加载" class="headerlink" title="•加载"></a>•加载</h4><p>•就是指将class文件读入内存，并为之创建一个Class对象。</p><p>•任何类被使用时系统都会建立一个Class对象。</p><h4 id="•连接"><a href="#•连接" class="headerlink" title="•连接"></a>•连接</h4><p>•验证 是否有正确的内部结构，并和其他类协调一致</p><p>•准备 负责为类的静态成员分配内存，并设置默认初始化值</p><p>•解析 将类的二进制数据中的符号引用替换为直接引用</p><h4 id="•初始化"><a href="#•初始化" class="headerlink" title="•初始化"></a>•初始化</h4><p>就是我们以前讲过的初始化步骤</p></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载器的组成"><a href="#类加载器的组成" class="headerlink" title="类加载器的组成"></a>类加载器的组成</h4><h5 id="•Bootstrap-ClassLoader-根类加载器"><a href="#•Bootstrap-ClassLoader-根类加载器" class="headerlink" title="•Bootstrap ClassLoader 根类加载器"></a>•Bootstrap ClassLoader 根类加载器</h5><blockquote><p>也被称为引导类加载器，负责Java核心类的加载</p><p>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</p></blockquote><h5 id="•Extension-ClassLoader-扩展类加载器"><a href="#•Extension-ClassLoader-扩展类加载器" class="headerlink" title="•Extension ClassLoader 扩展类加载器"></a>•Extension ClassLoader 扩展类加载器</h5><blockquote><p>负责JRE的扩展目录中jar包的加载。</p><p>在JDK中JRE的lib目录下ext目录</p></blockquote><h5 id="•Sysetm-ClassLoader-系统类加载器"><a href="#•Sysetm-ClassLoader-系统类加载器" class="headerlink" title="•Sysetm ClassLoader 系统类加载器"></a>•Sysetm ClassLoader 系统类加载器</h5><blockquote><p>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</p></blockquote><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><h4 id="通过反射获取构造方法并使用"><a href="#通过反射获取构造方法并使用" class="headerlink" title="通过反射获取构造方法并使用"></a>通过反射获取构造方法并使用</h4><blockquote><h5 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h5><p>getConstructors</p><p>getDeclaredConstructors</p><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p>newInstance()</p><p>con.newInstance(“zhangsan”, 20);</p></blockquote><h4 id="通过反射获取成员变量并使用"><a href="#通过反射获取成员变量并使用" class="headerlink" title="通过反射获取成员变量并使用"></a>通过反射获取成员变量并使用</h4><blockquote><h5 id="获取所有成员"><a href="#获取所有成员" class="headerlink" title="获取所有成员"></a>获取所有成员</h5><p>getFields,getDeclaredFields</p><h5 id="获取单个成员"><a href="#获取单个成员" class="headerlink" title="获取单个成员"></a>获取单个成员</h5><p>getField,getDeclaredField</p><h5 id="修改成员的值"><a href="#修改成员的值" class="headerlink" title="修改成员的值"></a>修改成员的值</h5><p>set(Object obj,Object value)<br>将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</p></blockquote><h4 id="通过反射获取成员方法并使用"><a href="#通过反射获取成员方法并使用" class="headerlink" title="通过反射获取成员方法并使用"></a>通过反射获取成员方法并使用</h4><blockquote><h5 id="获取所有方法"><a href="#获取所有方法" class="headerlink" title="获取所有方法"></a>获取所有方法</h5><p>getMethods</p><p>getDeclaredMethods</p><h5 id="获取单个方法"><a href="#获取单个方法" class="headerlink" title="获取单个方法"></a>获取单个方法</h5><p>getMethod</p><p>getDeclaredMethod</p><h5 id="暴力访问"><a href="#暴力访问" class="headerlink" title="暴力访问"></a>暴力访问</h5><p>method.setAccessible(true);</p></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote><p>在程序运行过程中产生的这个对象,而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理</p></blockquote><p>在Java中<strong>java.lang.reflect</strong>包下提供了一个Proxy类和一个<strong>InvocationHandler</strong>接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib</p><p>Proxy类中的方法创建动态代理类对象</p><p>•public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</p><p>•最终会调用InvocationHandler的方法</p><p>InvocationHandler</p><p>Object invoke(Object proxy,Method method,Object[] args)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;类的加载&quot;&gt;&lt;a href=&quot;#类的加载&quot; class=&quot;headerlink&quot; title=&quot;类的加载&quot;&gt;&lt;/a&gt;类的加载&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;•当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://example.com/2022/04/13/%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2022/04/13/%E9%80%92%E5%BD%92/</id>
    <published>2022-04-13T08:02:26.644Z</published>
    <updated>2022-05-03T13:54:54.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h5 id="方法定义中调用方法本身的现象"><a href="#方法定义中调用方法本身的现象" class="headerlink" title="方法定义中调用方法本身的现象"></a>方法定义中调用方法本身的现象</h5><p> 递归的注意事项：<br>        1、递归一定要有一个出口，结束条件，否则就是死递归<br>        2、递归的次数不能太多，否则就会造成栈内存溢出<br>        3、构造方法不能初始化</p><pre><code>public static int jieCheng(int i) &#123;        if (i == 1) &#123;            return 1;        &#125; else &#123;            //5 * jieCheng(4)            //5 * 4 * jieCheng(3)            //5 * 4 * 3 * jieCheng(2)            //5 * 4 * 3 * 2 * jieCheng(1)            return i * jieCheng(i - 1);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h4&gt;&lt;h5 id=&quot;方法定义中调用方法本身的现象&quot;&gt;&lt;a href=&quot;#方法定义中调用方法本身的现象&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>File类</title>
    <link href="http://example.com/2022/04/13/File%E7%B1%BB/"/>
    <id>http://example.com/2022/04/13/File%E7%B1%BB/</id>
    <published>2022-04-13T06:46:43.524Z</published>
    <updated>2022-04-13T08:01:57.796Z</updated>
    
    <content type="html"><![CDATA[<h4 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h4><blockquote><p>•public File(String pathname)</p><p>•public File(String parent,String child)</p><p>•public File(File parent,String child)</p></blockquote><h4 id="File类的成员方法"><a href="#File类的成员方法" class="headerlink" title="File类的成员方法"></a>File类的成员方法</h4><h5 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h5><p>•public boolean createNewFile()</p><p>•public boolean mkdir()</p><p>•public boolean mkdirs()</p><h5 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h5><p>•public boolean delete()</p><h5 id="重命名功能"><a href="#重命名功能" class="headerlink" title="重命名功能"></a>重命名功能</h5><p>•public boolean renameTo(File dest)</p><h5 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h5><p>•public boolean isDirectory()    判断是不是文件夹</p><p>•public boolean isFile()    判断是不是文件</p><p>•public boolean exists()    判断是否存在</p><p>•public boolean canRead()    判断是否可读</p><p>•public boolean canWrite()    判断是否可写</p><p>•public boolean isHidden()    判断是否隐藏</p><h5 id="基本获取功能"><a href="#基本获取功能" class="headerlink" title="基本获取功能"></a>基本获取功能</h5><p>•public String getAbsolutePath()    获取完整路径（绝对路径）</p><p>•public String getPath()    获取相对路径</p><p>•public String getName()    获取名称</p><p>•public long length()    获取文件或者文件夹的字节数</p><p>•public long lastModified()    获取文件最后一次修改时间，时间戳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;测试文件&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified());</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="高级获取功能"><a href="#高级获取功能" class="headerlink" title="高级获取功能"></a>高级获取功能</h5><p>•public String[] list()    将指定目录下的所有文件和文件夹的名称组成一个数组</p><p>•public File[] listFiles()    将指定目录下的所有文件和文件夹返回File对象数组，使用增强for循环遍历</p><h5 id="文件名称过滤器"><a href="#文件名称过滤器" class="headerlink" title="文件名称过滤器"></a>文件名称过滤器</h5><p>•public String[] list(FilenameFilter filter)    将指定目录下文件的名称过滤后组成一个数组</p><p>•public File[] listFiles(FilenameFilter filter)    将指定目录下文件的名称过滤后组成一个file对象数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;File类的构造方法&quot;&gt;&lt;a href=&quot;#File类的构造方法&quot; class=&quot;headerlink&quot; title=&quot;File类的构造方法&quot;&gt;&lt;/a&gt;File类的构造方法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;•public File(String pathn</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://example.com/2022/04/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/04/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-04-12T12:18:04.375Z</published>
    <updated>2022-04-12T14:32:54.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>一般是指  <strong>OSI</strong>（Open System Interconnection开放系统互连）参考模型</p><p> TCP&#x2F;IP参考模型</p><p><img src="https://s2.loli.net/2022/04/12/im2Ahos6F5baYTI.png" alt="屏幕截图 2022-04-12 223205"></p><h4 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h4><p>1、IP地址:InetAddress</p><p>2、端口号</p><p>3、传输协议：UDP、TCP</p><h5 id="InetAddress类的使用"><a href="#InetAddress类的使用" class="headerlink" title="InetAddress类的使用"></a>InetAddress类的使用</h5><blockquote><p>获取任意主机：getByName</p><p>主机名：getHostName</p><p>主机Ip地址：getHostAddress</p></blockquote><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><blockquote><p>1、物理端口     网卡口</p></blockquote><blockquote><p>2、逻辑端口     一般端口号指的就是逻辑端口</p><p>有效端口：0<del>65535，其中0</del>1024系统使用或保留端口        通过netstat -ano可以查看端口号</p></blockquote><h5 id="传输协议：UDP、TCP"><a href="#传输协议：UDP、TCP" class="headerlink" title="传输协议：UDP、TCP"></a>传输协议：UDP、TCP</h5><blockquote><p>UDP：将数据源和目的封装成数据包中，不需要建立连接；每个数据报包的大小在限制在64k；因无连接，是不可靠协议；不需要建立连接，速度快</p></blockquote><blockquote><p>TCP：建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连接，是可靠协议；必须建立连接，效率会稍低</p></blockquote><h5 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h5><p>Socket套接字：</p><blockquote><p>•网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</p><p>Socket原理机制：</p><p>•通信的两端都有Socket。</p><p>•网络通信其实就是Socket间的通信。</p><p>•数据在两个Socket间通过IO传输。</p></blockquote><p><img src="https://s2.loli.net/2022/04/12/ztSLHWufJV4QpXm.png" alt="image-20220412213817650"></p><h5 id="UDP传输"><a href="#UDP传输" class="headerlink" title="UDP传输"></a>UDP传输</h5><blockquote><p>1、DatagramSocket与DatagramPacket</p><p>2、建立发送端，接收端。</p><p>3、建立数据包。</p><p>4、调用Socket的发送接收方法。</p><p>5、关闭Socket。</p><p>6、发送端与接收端是两个独立的运行程序。</p></blockquote><h5 id="UDP传输-发送端思路"><a href="#UDP传输-发送端思路" class="headerlink" title="UDP传输-发送端思路"></a>UDP传输-发送端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:将要发送的数据封装成数据包</p><p>3:通过udp的socket服务,将数据包发送出</p><p>4:关闭资源</p></blockquote><h5 id="UDP传输-接收端思路"><a href="#UDP传输-接收端思路" class="headerlink" title="UDP传输-接收端思路"></a>UDP传输-接收端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:通过receive方法接收数据</p><p>3:将收到的数据存储到数据包对象中</p><p>4:通过数据包对象的功能来完成对接收到数据进行解析</p><p>5:可以对资源进行关闭</p></blockquote><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h5><blockquote><p>1、Socket和ServerSocket</p><p>2、建立客户端和服务器端</p><p>3、建立连接后，通过Socket中的IO流进行数据的传输</p><p>4、关闭socket</p><p>5、同样，客户端与服务器端是两个独立的应用程序。</p></blockquote><h5 id="TCP传输-客户端思路"><a href="#TCP传输-客户端思路" class="headerlink" title="TCP传输-客户端思路"></a>TCP传输-客户端思路</h5><blockquote><p>1:建立客户端的Socket服务,并明确要连接的服务器。</p><p>2:如果连接建立成功,就表明,已经建立了数据传输的通道.就可以在该通道通过IO进行数据的读取和写入.该通道称为Socket流,Socket流中既有读取流,也有写入流.</p><p>3:通过Socket对象的方法,可以获取这两个流</p><p>4:通过流的对象可以对数据进行传输</p><p>5:如果传输数据完毕,关闭资源</p></blockquote><h5 id="TCP传输-服务器端思路"><a href="#TCP传输-服务器端思路" class="headerlink" title="TCP传输-服务器端思路"></a>TCP传输-服务器端思路</h5><blockquote><p>1:建立服务器端的socket服务，需要一个端口</p><p>2:服务端没有直接流的操作,而是通过accept方法获取客户端对象，在通过获取到的客户端对象的流和客户端进行通信</p><p>3:通过客户端的获取流对象的方法,读取数据或者写入数据</p><p>4:如果服务完成,需要关闭客户端,然后关闭服务器，但是,一般会关闭客户端,不会关闭服务器,因为服务端是一直提供服务的</p></blockquote><h5 id="TCP传输容易出现的问题"><a href="#TCP传输容易出现的问题" class="headerlink" title="TCP传输容易出现的问题"></a>TCP传输容易出现的问题</h5><blockquote><p>客户端连接上服务端，两端都在等待，没有任何数据传输。</p><p>通过例程分析：</p><p>因为read方法或者readLine方法是阻塞式。</p><p>解决办法：</p><p>自定义结束标记</p><p>使用shutdownInput，shutdownOutput方法。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h3&gt;&lt;h4 id=&quot;网络模型&quot;&gt;&lt;a href=&quot;#网络模型&quot; class=&quot;headerlink&quot; title=&quot;网络模型&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://example.com/2022/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-04-11T13:12:12.682Z</published>
    <updated>2022-04-18T11:48:49.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h4><blockquote><p>是指正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都有它自己的内存空间和资源，在windows下通过任务管理器查看</p></blockquote><h4 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h4><blockquote><p>是进程的单个顺序控制流，或者就是说是一个单独执行的路径<br>如果一个进程只有一条执行路径，称之为单线程<br>如果一个进程有多条执行路径，称之为多线程<br><strong>线程</strong>包含在<strong>进程</strong>中</p></blockquote><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><blockquote><p>指一个程序中所有的任务都是按照先后顺序执行的，在前一个任务还没有处理完的情况下，是不会进行处理下一个任务的。<br>举例：理发店只有一个理发师，很多人去理发，就需要排队，就有先后顺序，先等前面的人理完发，再轮到后面的人。</p></blockquote><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><blockquote><p>指将任务分给不同的处理器去处理，每一个处理器中的任务再进行串行处理<br>举例：火车站上有很多卖票窗口，多个窗口同时卖票，但是呢，针对于某一个窗口来说，是一个接着一个去处理的。</p></blockquote><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>指一个现象，并发需要处理器的支持，比如在处理一个任务的时候，操作系统可以调用资源去处理其他的任务，这个任务并行还是串行都可以。<br>无论是串行还是并行，都需要处理支持并发。<br>举例：假设喝水是一个任务，每个火车站售票员，他再售票的同时也能喝水，这就表示支持并发。</p></blockquote><h5 id="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"><a href="#在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。" class="headerlink" title="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"></a><strong>在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。</strong></h5><h4 id="java中实现线程的方式"><a href="#java中实现线程的方式" class="headerlink" title="java中实现线程的方式"></a>java中实现线程的方式</h4><blockquote><p>有三种</p></blockquote><blockquote><p>第一种，继承Thread类，重写run方法，使用start启动线程；（thread默认是从0开始）<br>第一种，实现Runnable接口，实现run方法，借助Thread类创建线程对象，使用start方法启动；<br>第三种，实现Callable接口，实现call方法，需要结合线程池的方式创建线程对象，提交到线程池执行。（thread默认是从1开始）</p></blockquote><h5 id="start-启动线程"><a href="#start-启动线程" class="headerlink" title="start() 启动线程"></a>start() 启动线程</h5><h5 id="setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"><a href="#setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）" class="headerlink" title="setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"></a>setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）</h5><h5 id="getName-获取线程名字"><a href="#getName-获取线程名字" class="headerlink" title="getName() 获取线程名字"></a>getName() 获取线程名字</h5><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><h5 id="线程有两种调度模型："><a href="#线程有两种调度模型：" class="headerlink" title="线程有两种调度模型："></a>线程有两种调度模型：</h5><blockquote><p>1、分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片<br>2、抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。</p></blockquote><h5 id="Java使用的是抢占式调度模型"><a href="#Java使用的是抢占式调度模型" class="headerlink" title="Java使用的是抢占式调度模型"></a>Java使用的是抢占式调度模型</h5><blockquote><p>1、线程的默认优先级是5<br>2、设置优先级的时候，范围是1-10<br>3、线程的优先级越高仅仅表示的是获取CPU时间片的机率会高一些，并不能保证一定会先执行。</p></blockquote><h5 id="获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。"><a href="#获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。" class="headerlink" title="获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。"></a>获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。</h5><p>设置线程优先级的方法：public final void setPriority(int newPriority) 更改此线程的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>; 线程可以拥有的最小的优先级</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>; 线程可以拥有的最大的优先级</span><br></pre></td></tr></table></figure><h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><h5 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h5 id="线程加入"><a href="#线程加入" class="headerlink" title="线程加入"></a>线程加入</h5><blockquote><p>public final void join()    加入线程<br>线程对象调用该方法的时候，目的是让调用该方法的当前线程先执行完，执行完毕后，再让其他线程执行，其他没有调用join方法的线程，他们之间还是会抢CPU执行权的。</p></blockquote><p><strong>注意：join方法的调用，必须是紧跟着当前线程start()方法后调用，否则不起作用。</strong></p><h5 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h5><blockquote><p>public final void yield()    礼让线程</p></blockquote><blockquote><p>礼让线程的目的是暂停当前正在执行的线程，并让其他线程执行，它的作用实际上是为了让线程之间看起来更加和谐，它并不能保证多个线程之间一人一次。</p></blockquote><h5 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h5><blockquote><p>public final void setDaemon(boolean on)    后台线程(守护线程)</p><p><strong>Java中有两类：用户线程，守护线程</strong><br><strong>用户线程</strong>：在学习线程之前，运行起来的一个一个程序中的线程都是用户线程<br><strong>守护线程</strong>：所谓的守护线程，指的是程序运行的时候，在后台提供了一个通用的服务线程，比如说垃圾回收线程，就是一个守护线程。这种线程不一定是要存在的，但是可能程序会出问题。只要程序存在用户线程，程序就不会停止.</p><p><strong>守护线程进行设置</strong><br>   public final void setDaemon(boolean on)</p><p>注意事项：</p><p>​    <strong>守护线程必须在启动之前进行设置</strong></p></blockquote><h5 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h5><blockquote><p>public final void stop()    已弃用<br>public void interrupt()    打断线程</p></blockquote><h5 id="休眠线程"><a href="#休眠线程" class="headerlink" title="休眠线程"></a>休眠线程</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h4 id="线程的生命周期图"><a href="#线程的生命周期图" class="headerlink" title="线程的生命周期图"></a>线程的生命周期图</h4><p><img src="https://s2.loli.net/2022/04/11/SYz8thrRo27uw6N.png" alt="image-20220411225244933"></p><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>•格式：</p><p><strong>synchronized</strong>(对象){</p><p>​        需要同步的代码;</p><p>}</p><blockquote><p>同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。</p></blockquote><h5 id="同步的前提"><a href="#同步的前提" class="headerlink" title="同步的前提"></a>同步的前提</h5><blockquote><p>•多个线程</p></blockquote><blockquote><p>•多个线程使用的是同一个锁对象</p></blockquote><h5 id="同步的好处"><a href="#同步的好处" class="headerlink" title="同步的好处"></a>同步的好处</h5><blockquote><p>•同步的出现解决了多线程的安全问题。</p></blockquote><h5 id="同步的弊端"><a href="#同步的弊端" class="headerlink" title="同步的弊端"></a>同步的弊端</h5><blockquote><p>•当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。</p></blockquote><h5 id="同步弊端"><a href="#同步弊端" class="headerlink" title="同步弊端"></a>同步弊端</h5><blockquote><p>•效率低</p></blockquote><blockquote><p>•如果出现了同步嵌套，就容易产生死锁问题</p></blockquote><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><blockquote><p>•是指两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象</p></blockquote><h4 id="线程的状态转换图"><a href="#线程的状态转换图" class="headerlink" title="线程的状态转换图"></a>线程的状态转换图</h4><p><img src="https://s2.loli.net/2022/04/18/CX7pwtn3ZgamueV.png" alt="屏幕截图 2022-04-18 194219"></p><h4 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a><strong>线程组</strong></h4><blockquote><p>Java中使用<strong>ThreadGroup</strong>来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</p><p>•默认情况下，所有的线程都属于主线程组。</p><p>•<strong>public final ThreadGroup getThreadGroup()</strong></p><p>•我们也可以给线程设置分组</p><p>•<strong>Thread(ThreadGroup group, Runnable target, String name)</strong> </p></blockquote><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><p>•线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。</p></blockquote><p>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法</p><p>•public static ExecutorService newCachedThreadPool()</p><p>•public static ExecutorService newFixedThreadPool(int nThreads)</p><p>•public static ExecutorService newSingleThreadExecutor()</p><p>•这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</p><p>•Future&lt;?&gt; submit(Runnable task)</p><p>•<T> Future<T> submit(Callable<T> task)</p><p>•案例演示</p><p>•创建线程池对象</p><p>•创建Runnable实例</p><p>•提交Runnable实例</p><p>•关闭线程池</p><h4 id="匿名内部类方式使用多线程"><a href="#匿名内部类方式使用多线程" class="headerlink" title="匿名内部类方式使用多线程"></a><strong>匿名内部类方式使用多线程</strong></h4><blockquote><p>匿名内部类方式使用多线程</p><p>new Thread(){代码…}.start();</p><p>New Thread(new Runnable(){代码…}).start();</p></blockquote><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><blockquote><p>在java中可以通过Timer和TimerTask类来实现定义调度的功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建定时对象</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">MyTask</span>(timer),<span class="number">2000</span>,<span class="number">3000</span>);<span class="comment">//2秒后开始打印，并且每隔3秒执行一次打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Timer timer;</span><br><span class="line">        MyTask(Timer timer)&#123;</span><br><span class="line">            <span class="built_in">this</span>.timer=timer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"><span class="comment">//            timer.cancel();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AzKaBan是一个完全由java编写的开源调度框架</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><blockquote><p>1、创建型    创建对象</p><p>2、结构型    对象的组成</p><p>3、行为型    对象的功能</p></blockquote><h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p><strong>1、单例模式</strong>    指的是在程序运行过程中，内存只允许有一个对象存在</p><blockquote><p>保障类在内存中只有一个对象</p><p>1、构造方法私有化</p><p>2、在类的内部成员变量位置上创建一个对象</p><p>3、提供公共的方法将唯一的对象返回出来获取</p></blockquote><p>​    饿汉式：类一加载，对象就创建好了（线程安全）</p><p>​    懒汉式：用的时候，再创建对象</p><p><strong>2、简单工厂模式</strong></p><p><strong>3、工厂方法模式</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;h4 id=&quot;进程：&quot;&gt;&lt;a href=&quot;#进程：&quot; class=&quot;headerlink&quot; title=&quot;进程：&quot;&gt;&lt;/a&gt;进程：&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="http://example.com/2022/04/08/Io%E6%B5%81/"/>
    <id>http://example.com/2022/04/08/Io%E6%B5%81/</id>
    <published>2022-04-08T10:16:38.041Z</published>
    <updated>2022-04-08T13:31:37.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><blockquote><p>按照流向：输入流、输出流</p></blockquote><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节"><a href="#1、一次读取一个字节" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>int b &#x3D; 0；</p><p>while(b &#x3D; fis.read() !&#x3D; -1){</p><p>​        Systeam.out.println((char) b );</p><p>}</p><h6 id="2、一次读取一个字节数组"><a href="#2、一次读取一个字节数组" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>byte[] bytes &#x3D; new byte[1024];</p><p>int   length &#x3D; 0;</p><p>while((length &#x3D; fis.read(bytes)) !&#x3D; -1){</p><p>​        String s &#x3D; new String(bytes,0,length);</p><p>​        Systeam.out.print(s);</p><p>}</p><h5 id="字节缓冲输入流"><a href="#字节缓冲输入流" class="headerlink" title="字节缓冲输入流"></a>字节缓冲输入流</h5><p>BufferedInputStream</p><p>BufferedInputStteam bis &#x3D; new BufferedInputStream(new FileInputStream(“文件名”))；</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节-1"><a href="#1、一次读取一个字节-1" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>​        int b &#x3D; 0;<br>​        while((b&#x3D;bis.read()) !&#x3D; -1){<br>​                System.out.print((char)b);<br>​        }</p><h6 id="2、一次读取一个字节数组-1"><a href="#2、一次读取一个字节数组-1" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>​        byte[] bytes &#x3D; new byte[1024];<br>​        int length &#x3D; 0;<br>​        while((length &#x3D; bis.read(bytes)) !&#x3D; -1){<br>​                String s &#x3D; new String(bytes,0,length);<br>​                System.out.print(s);</p><p>}</p><h5 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>如果目标文件不存在，会自动创建</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>1、一次写一个int类型的数据<br>    fos.write(97);<br>2、一次写一个字节数组<br>    fos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    fos.write(bytes,1,3);</p></blockquote><h5 id="字节缓冲输出流"><a href="#字节缓冲输出流" class="headerlink" title="字节缓冲输出流"></a>字节缓冲输出流</h5><p>BufferedOutputStream</p><p>BufferedOutputStream bos &#x3D; new BufferedOutputStream(new FileOutputStream(“..”));</p><blockquote><p>1、一次写一个int类型的数据<br>    bos.write(97);<br>2、一次写一个字节数组<br>    bos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    bos.write(bytes,1,3);</p></blockquote><h4 id="字符流-x3D-字节流-编码表"><a href="#字符流-x3D-字节流-编码表" class="headerlink" title="字符流 &#x3D; 字节流 + 编码表"></a>字符流 &#x3D; 字节流 + 编码表</h4><h5 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h5><p>Reader – InputStreamReader</p><p>InputStreamReader isr &#x3D; new InputStreamReader(new FileInputStream(“…”));</p><h6 id="1、一次读取一个字符"><a href="#1、一次读取一个字符" class="headerlink" title="1、一次读取一个字符"></a>1、一次读取一个字符</h6><p>​    int ch &#x3D; 0;<br>​    while((ch&#x3D;isr.read())!&#x3D;-1){<br>​            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>​    }</p><h6 id="2、一次读取一个字符数组"><a href="#2、一次读取一个字符数组" class="headerlink" title="2、一次读取一个字符数组"></a>2、一次读取一个字符数组</h6><p>​    char[] chars &#x3D; new char[1024];</p><p>​    int length &#x3D; 0;</p><p>​    while((length&#x3D;isr.read(chars))!&#x3D;-1){<br>​            String s &#x3D; new String(chars,0,length);<br>​            System.out.print(s);</p><p>}</p><h6 id="简化写法："><a href="#简化写法：" class="headerlink" title="简化写法："></a>简化写法：</h6><p>fileReader</p><p>fileReader fr &#x3D; new FileReader(“…”);<br>1、一次读取一个字符<br>              int ch &#x3D; 0;<br>              while((ch&#x3D;fr.read())!&#x3D;-1){<br>                 System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>              }</p><p> 2）一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;fr.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);</p><p>​        System.out.print(s);</p><p>}</p><h5 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h5><p>BufferedReader</p><p>BufferedReader br &#x3D; new BufferedReader(new OutputStreamReader(new FileOutputStream(“文件”)))</p><p> &#x2F;&#x2F;简化写法改进：<br>BufferedReader br &#x3D; new BufferedReader(new FileReader(“…”));<br>1、一次读取一个字符<br>    int ch &#x3D; 0;<br>    while((ch&#x3D;br.read())!&#x3D;-1){<br>            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>    }</p><p>2、一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;br.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);<br>            System.out.print(s);<br>    }</p><p>3、使用特殊方法一次读取一行</p><p>​    String line &#x3D; null;<br>​    while((line &#x3D; br.readLine())!&#x3D;null){<br>​            System.out.print(line);</p><p>​    }</p><h5 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h5><p>Writer –OutputStreamWriter</p><p>OutputStreamWriter osw &#x3D; new OutputStreamWriter(new FileOutputStream(“文件”));</p><p>简化写法：FileWriter<br>FileWriter fw &#x3D; new FileWriter(“…”);</p><h5 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h5><p>BufferedWriter</p><p>BufferedWriter bw &#x3D; new BufferedWriter(new OutputStreamWriter(new FileOutputStream(“文件”)));<br>简化写法改进：BufferedWriter bw &#x3D; new BufferedWriter(new FileWriter(“文件”));</p><p>特殊的方法：写换行符：newLine();</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IO流&quot;&gt;&lt;a href=&quot;#IO流&quot; class=&quot;headerlink&quot; title=&quot;IO流&quot;&gt;&lt;/a&gt;IO流&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;按照流向：输入流、输出流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;字节流&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2022/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-04-06T13:04:19.092Z</published>
    <updated>2022-04-06T13:04:19.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><p><img src="https://s2.loli.net/2022/04/06/asuo1fbJLt4mIRZ.png" alt="image-20220406205727748"></p><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><p><img src="https://s2.loli.net/2022/04/06/oWvhCb9R1UucIVO.png" alt="image-20220406205910981"></p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><img src="https://s2.loli.net/2022/04/06/lQZNqR4ijroWKFc.png" alt="image-20220406210017338"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://s2.loli.net/2022/04/06/1FmKhpXzNIdqu8x.png" alt="image-20220406210122779"></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="https://s2.loli.net/2022/04/06/j1lcME2yN3axgSG.png" alt="image-20220406210221158"></p><blockquote><p>给定N个权值作为N个<a href="https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)</p></blockquote><blockquote><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栈和队列&quot;&gt;&lt;a href=&quot;#栈和队列&quot; class=&quot;headerlink&quot; title=&quot;栈和队列&quot;&gt;&lt;/a&gt;栈和队列&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/04/06/asuo1fbJLt4mIRZ.png&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Collection集合</title>
    <link href="http://example.com/2022/04/05/collection%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2022/04/05/collection%E9%9B%86%E5%90%88/</id>
    <published>2022-04-05T07:55:27.152Z</published>
    <updated>2022-04-05T08:01:38.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection(接口)"></a>Collection(接口)</h3><h4 id="–-List-允许元素重复，且有序（存储和取出顺序一致）-接口"><a href="#–-List-允许元素重复，且有序（存储和取出顺序一致）-接口" class="headerlink" title="– List:允许元素重复，且有序（存储和取出顺序一致）(接口)"></a>– List:允许元素重复，且有序（存储和取出顺序一致）(接口)</h4><h5 id="–-ArrayList"><a href="#–-ArrayList" class="headerlink" title="– ArrayList"></a>– ArrayList</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程不安全，效率高</p></blockquote><h5 id="–-Vector"><a href="#–-Vector" class="headerlink" title="– Vector"></a>– Vector</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程安全，效率低</p></blockquote><h5 id="–-LinkedList"><a href="#–-LinkedList" class="headerlink" title="– LinkedList"></a>– LinkedList</h5><blockquote><p>底层数据结构是双链表，查询慢，增删快<br>线程不安全，效率高</p></blockquote><h5 id="List相关集合特点："><a href="#List相关集合特点：" class="headerlink" title="List相关集合特点："></a>List相关集合特点：</h5><blockquote><p>1、存在索引下标的概念，可以通过get()方法，通过索引获取集合中的元素<br>2、存储的元素和取出的顺序一致</p></blockquote><h4 id="–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口"><a href="#–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口" class="headerlink" title="– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)"></a>– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)</h4><h5 id="–-HashSet"><a href="#–-HashSet" class="headerlink" title="– HashSet"></a>– HashSet</h5><blockquote><p>底层数据结构是哈希表（元素是以链表节点的形式存在）<br>哈希表保证了元素的唯一性<br>线程不安全，效率高</p></blockquote><h5 id="–-LinkedHashSet"><a href="#–-LinkedHashSet" class="headerlink" title="– LinkedHashSet"></a>– LinkedHashSet</h5><blockquote><p>底层数据结构是双链表和哈希表共同决定的<br>哈希表保证元素的唯一性<br>双链表保证元素的顺序</p></blockquote><h5 id="–-TreeSet"><a href="#–-TreeSet" class="headerlink" title="– TreeSet"></a>– TreeSet</h5><blockquote><p>底层数据结构是红黑树（自平衡二叉树）<br>提供了两种排序方案：<br>1）自然排序<br>要求元素类实现Comparable<T>接口，并重写compareTo()方法<br>2）比较器排序<br>实现起来有两种方式，第一种是写具体的子类实现Comparator<T>接口，并重写compare(..,..)方法<br>第二种是匿名内部类当作TreeSet构造方法参数传入。</p></blockquote><h4 id="注意：遍历Collection集合的方式："><a href="#注意：遍历Collection集合的方式：" class="headerlink" title="注意：遍历Collection集合的方式："></a>注意：遍历Collection集合的方式：</h4><blockquote><p>1、迭代器遍历<br>2、增强for循环<br>3、注意，其中我们说过的get()和size()方法使用普通for循环仅仅适用于List相关集合，因为只有List相关集合才存在索引下标。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Collection-接口&quot;&gt;&lt;a href=&quot;#Collection-接口&quot; class=&quot;headerlink&quot; title=&quot;Collection(接口)&quot;&gt;&lt;/a&gt;Collection(接口)&lt;/h3&gt;&lt;h4 id=&quot;–-List-允许元素重复，且有序（存</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2022/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-04-05T07:52:50.063Z</published>
    <updated>2022-04-06T04:32:54.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p>需求：编写一个java程序检验qq号是否符合规范</p><p>​    1、必须全部都是数字</p><p>​    2、必须是5-10</p><p>​    3、不能以0开头</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：编写一个java程序检验qq号是否符合规范</span></span><br><span class="line"><span class="comment">    1、必须是5-10</span></span><br><span class="line"><span class="comment">    2、不能以0开头</span></span><br><span class="line"><span class="comment">3、必须全部都是数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1165872335&quot;</span>;</span><br><span class="line">        System.out.println(checkQQ(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//感受一下使用正则表达式来解决这个需求</span></span><br><span class="line">        System.out.println(checkQQ2(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ2</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正则表达式可以很容易地完成字符串地查找匹配替换等工作</span></span><br><span class="line">        <span class="comment">//正则表达式实现</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[1-9][0-9]&#123;4,9&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> s.matches(regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是5-10位</span></span><br><span class="line">        <span class="keyword">if</span>(s.length()&gt;=<span class="number">5</span> &amp;&amp; s.length()&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//不能以0开头</span></span><br><span class="line">            <span class="keyword">if</span>(!s.startsWith(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将字符串转成字符数组</span></span><br><span class="line">                <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++)&#123;</span><br><span class="line">                    <span class="comment">//包装类Character类中有一个方法可以进行判断该字符是否是数字</span></span><br><span class="line">                    <span class="comment">//public static boolean isDigit(char ch)确定指定的字符是否是数字。</span></span><br><span class="line">                    <span class="keyword">if</span>(!Character.isDigit(chars[i]))&#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;长度不符合规范，不是qq号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">长度不符合规范，不是qq号</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="学习正则表达式-正则表达式本身是一个字符串"><a href="#学习正则表达式-正则表达式本身是一个字符串" class="headerlink" title="学习正则表达式(正则表达式本身是一个字符串)"></a>学习正则表达式(正则表达式本身是一个字符串)</h4><blockquote><p>学习正则表达式的目的：通过正则表达式进行处理字符串的复杂的查找&#x2F;替换&#x2F;匹配&#x2F;分割等工作。</p><p>正则表达式是一个独立于任何一门语言的技术，不依附于java,但是它可以在java中进行使用，也可以在python&#x2F;Js等语言中进行使用</p></blockquote><h3 id="正则表达式的概述"><a href="#正则表达式的概述" class="headerlink" title="正则表达式的概述"></a>正则表达式的概述</h3><blockquote><p>概念：使用单个字符串来描述或者匹配一系列符合某种语法规则的字符串</p><p>正则表达式的使用步骤：</p><p>​    1、使用大量的字符串来寻找规律使用正则语法来定义规则<br>​    2、使用这种规则区匹配新的字符串</p><p>​    3、匹配成功后的相应的操作</p></blockquote><p><a href="mailto:&#x31;&#49;&#x36;&#53;&#x38;&#x37;&#50;&#x33;&#x33;&#53;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;">&#x31;&#49;&#x36;&#53;&#x38;&#x37;&#50;&#x33;&#x33;&#53;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a></p><h3 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h3><h4 id="1、原义字符（字符本身就可以当作一个正则表达式）"><a href="#1、原义字符（字符本身就可以当作一个正则表达式）" class="headerlink" title="1、原义字符（字符本身就可以当作一个正则表达式）"></a>1、原义字符（字符本身就可以当作一个正则表达式）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a\b\c\...\z \t \r \n</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        原义字符（字符本身就可以当作一个正则表达式）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc12342121sadsa&amp;.;123!&quot;</span>;</span><br><span class="line">        <span class="comment">//String replaceAll(String regex, String replacement)</span></span><br><span class="line">        <span class="comment">//用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串。</span></span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_bc12342121s_ds_&amp;.;<span class="number">123</span>!</span><br></pre></td></tr></table></figure><h4 id="正则表达是元字符高级用法"><a href="#正则表达是元字符高级用法" class="headerlink" title="正则表达是元字符高级用法"></a>正则表达是元字符高级用法</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”&#96;(?&lt;&#x3D;95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”&#96;(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h5 id="字符类："><a href="#字符类：" class="headerlink" title="字符类："></a>字符类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式的语法规则：</span></span><br><span class="line"><span class="comment">        字符类：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//[]作用是将字符进行分类，可以匹配到中括号中的任意一个字符</span></span><br><span class="line">        <span class="comment">//[abc]将来会匹配到abc中任意一个字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[abc]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc1234cc21c21sadcsa&amp;.;123!&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">___1234__21_21s_d_s_&amp;.;<span class="number">123</span>!</span><br></pre></td></tr></table></figure><h5 id="范围类："><a href="#范围类：" class="headerlink" title="范围类："></a>范围类：</h5><blockquote><p>其实就是在字符类的基础之上增加了一个范围</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        范围类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求1：我想要匹配所有的小写字母</span></span><br><span class="line"><span class="comment">//        String regex = &quot;[abcdefghijklmnopqrstuvwxyz]&quot;;</span></span><br><span class="line">        <span class="comment">//[a-z]表示匹配a到z中的所有小写字母</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-z]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcABC1234ERQcc21c21sDASadcsABCCa&amp;.;123!&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我想要匹配所有的大写字母</span></span><br><span class="line">        regex = <span class="string">&quot;[A-Z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：我即想要匹配小写字母，也想要匹配大写字母</span></span><br><span class="line"><span class="comment">//        regex = &quot;[a-zA-Z]&quot;;</span></span><br><span class="line">        regex = <span class="string">&quot;[A-z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：我想要匹配所有的数字</span></span><br><span class="line">        regex = <span class="string">&quot;[0-9]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：我想匹配不仅大小写数字还有感叹号，分号咋办？</span></span><br><span class="line">        regex = <span class="string">&quot;[0-9a-zA-Z!;&amp;.]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需求6：我想匹配除了大小写字母和数字以外的符号</span></span><br><span class="line">        regex = <span class="string">&quot;[^0-9a-zA-Z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abcABC1234ERQcc21c21sDASadcsABCCa&amp;.;<span class="number">123</span>!</span><br><span class="line">==========================================</span><br><span class="line">___ABC1234ERQ__21_21_DAS____ABCC_&amp;.;<span class="number">123</span>!</span><br><span class="line">abc___1234___cc21c21s___adcs____a&amp;.;<span class="number">123</span>!</span><br><span class="line">______1234_____21_21_____________&amp;.;<span class="number">123</span>!</span><br><span class="line">abcABC____ERQcc__c__sDASadcsABCCa&amp;.;___!</span><br><span class="line">________________________________________</span><br><span class="line">abcABC1234ERQcc21c21sDASadcsABCCa___123_</span><br></pre></td></tr></table></figure><h5 id="预定义类："><a href="#预定义类：" class="headerlink" title="预定义类："></a>预定义类：</h5><blockquote><p>我们在上面的范围类的情况下，在实际开发中我们可能会遇见一些常见的需求：判断是否是数字，是否是小写字母，是否是大写字母等等这些情况，用上面范围类的写法的话正则会比较长，所以在正则表达式中会给出一些含有特殊含义的表达式，这些表达式更加简化了我们使用范围类的用法，统称为预定义类，具体我们来探讨一下有哪些：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d == [0-9] 代表的是数字</span><br><span class="line">\D == [^0-9]代表的是非数字</span><br><span class="line">\s == 空白字符</span><br><span class="line">\w == [a-zA-Z0-9]</span><br><span class="line">\W == [^a-zA-Z0-9]</span><br><span class="line">.  == 任意字符</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        预定义类</span></span><br><span class="line"><span class="comment">        \d == [0-9] 代表的是数字</span></span><br><span class="line"><span class="comment">        \D == [^0-9]代表的是非数字</span></span><br><span class="line"><span class="comment">        \s == 空白字符</span></span><br><span class="line"><span class="comment">        \w == [a-zA-Z0-9]</span></span><br><span class="line"><span class="comment">        \W == [^a-zA-Z0-9]</span></span><br><span class="line"><span class="comment">        .  == 任意字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d&quot;</span>;  <span class="comment">// \\d代表转义，使用它原本的意思</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcABC 1234  ERQcc2 1c21sDA Sadcs ABC Ca&amp;.;12  3!&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\D&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\s&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\w&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\W&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//仅仅单纯要匹配一个字符.</span></span><br><span class="line">        regex = <span class="string">&quot;[.]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        regex = <span class="string">&quot;\\.&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;.;<span class="number">12</span>  <span class="number">3</span>!</span><br><span class="line">==========================================</span><br><span class="line">abcABC ____  ERQcc_ _c__sDA Sadcs ABC Ca&amp;.;__  _!</span><br><span class="line">_______1234_______2_1_21___________________12__3_</span><br><span class="line">abcABC_1234__ERQcc2_1c21sDA_Sadcs_ABC_Ca&amp;.;<span class="number">12__3</span>!</span><br><span class="line">______ ____  ______ _______ _____ ___ __&amp;.;__  _!</span><br><span class="line">abcABC_1234__ERQcc2_1c21sDA_Sadcs_ABC_Ca___12__3_</span><br><span class="line">_________________________________________________</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;_;<span class="number">12</span>  <span class="number">3</span>!</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;_;<span class="number">12</span>  <span class="number">3</span>!</span><br></pre></td></tr></table></figure><h5 id="边界类字符"><a href="#边界类字符" class="headerlink" title="边界类字符"></a>边界类字符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^:以xxx开头</span><br><span class="line">$:以xxx结尾</span><br><span class="line">\b:单词边界</span><br><span class="line">\B:非单词边界</span><br></pre></td></tr></table></figure><h5 id="量词分类"><a href="#量词分类" class="headerlink" title="量词分类"></a>量词分类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?:出现了<span class="number">0</span>次或者<span class="number">1</span>次</span><br><span class="line">+:代表出现了<span class="number">1</span>次或者多次</span><br><span class="line">*:代表出现了任意次</span><br><span class="line">&#123;n&#125;:代表出现了n次</span><br><span class="line">&#123;n,m&#125;:出现了n-m次</span><br><span class="line">&#123;n,&#125;:代表出现了至少n次</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        量词分类：</span></span><br><span class="line"><span class="comment">        ?:出现了0次或者1次</span></span><br><span class="line"><span class="comment">        +:代表出现了1次或者多次</span></span><br><span class="line"><span class="comment">        *:代表出现了任意次</span></span><br><span class="line"><span class="comment">        &#123;n&#125;:代表出现了n次</span></span><br><span class="line"><span class="comment">        &#123;n,m&#125;:出现了n-m次</span></span><br><span class="line"><span class="comment">        &#123;n,&#125;:代表出现了至少n次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^b?&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;aaaaaabaaacdeaaaafg&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^b+&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a+&quot;</span>; <span class="comment">//匹配连续出现1次以上并且是开头的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;a+&quot;</span>; <span class="comment">//匹配连续出现1次以上的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a&#123;2&#125;&quot;</span>; <span class="comment">//匹配连续出现2次的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a&#123;2,5&#125;&quot;</span>; <span class="comment">//匹配连续出现2次到5次的a开头</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;a&#123;4,&#125;&quot;</span>; <span class="comment">//匹配连续出现4次以上</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">aaaaaabaaacdeaaaafg</span><br><span class="line">==========================================</span><br><span class="line">_aaaaaabaaacdeaaaafg</span><br><span class="line">aaaaaabaaacdeaaaafg</span><br><span class="line">_baaacdeaaaafg</span><br><span class="line">_b_cde_fg</span><br><span class="line">_aaaabaaacdeaaaafg</span><br><span class="line">_abaaacdeaaaafg</span><br><span class="line">_baaacde_fg</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分组的符号：()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式语法：</span></span><br><span class="line"><span class="comment">        分组：()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将连续出现了3次以上的abc替换成_</span></span><br><span class="line"><span class="comment">//        String regex = &quot;abc&#123;3,&#125;&quot;; //ab后面接着3次以上的c</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(abc)&#123;3,&#125;&quot;</span>; <span class="comment">//使用小括号将abc看作是一组，然后匹配这组出现了3次以上</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abccccccccABC123ABC123abcABCabcabcabc123ABC123123&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：ABC后面跟上出现1次以上的123为一个整体进行匹配</span></span><br><span class="line">        <span class="comment">//ABC123123123</span></span><br><span class="line">        regex = <span class="string">&quot;ABC(123)&#123;1,&#125;&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：ABC后面跟上出现1次以上的123或者abc为一个整体进行匹配</span></span><br><span class="line">        <span class="comment">//ABC123123</span></span><br><span class="line">        <span class="comment">//ABCabcabc</span></span><br><span class="line">        regex = <span class="string">&quot;ABC(123|abc)&#123;1,&#125;&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abccccccccABC123ABC123abcABCabcabcabc123ABC123123</span><br><span class="line">==========================================</span><br><span class="line">abccccccccABC123ABC123abcABC_123ABC123123</span><br><span class="line">abcccccccc__abcABCabcabcabc123_</span><br><span class="line">abcccccccc____</span><br></pre></td></tr></table></figure><h5 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        反向引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//日期案例</span></span><br><span class="line">        <span class="comment">// 2022-03-28  ---&gt; 03/28/2022</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-03-28 dasdas 2022-04-05&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;$2/$3/$1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我不想你取出月份</span></span><br><span class="line">        regex = <span class="string">&quot;(\\d&#123;4&#125;)-(?:\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;$2/$1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">03</span>/<span class="number">28</span>/<span class="number">2022</span> dasdas <span class="number">04</span>/<span class="number">05</span>/<span class="number">2022</span></span><br><span class="line"><span class="number">28</span>/<span class="number">2022</span> dasdas <span class="number">05</span>/<span class="number">2022</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式在java中的应用"><a href="#正则表达式在java中的应用" class="headerlink" title="正则表达式在java中的应用"></a>正则表达式在java中的应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、字符串的查找操作：Pattern和Matcher</span><br><span class="line">2、字符串的匹配操作：可以使用字符串String类中matches()方法</span><br><span class="line">3、字符串的分割操作：可以使用字符串String类中的split()方法</span><br><span class="line">4、字符串的替换工作：字符串中的replaceAll()方法和replaceFirst()方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式在Java中的应用：</span></span><br><span class="line"><span class="comment">        1、字符串的查找操作：Pattern和Matcher</span></span><br><span class="line"><span class="comment">        2、字符串的匹配操作：可以使用字符串String类中matches()方法</span></span><br><span class="line"><span class="comment">        3、字符串的分割操作：可以使用字符串String类中的split()方法</span></span><br><span class="line"><span class="comment">        4、字符串的替换工作：字符串中的replaceAll()方法和replaceFirst()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\w&#123;3,&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdef123;!&quot;</span>;</span><br><span class="line">        <span class="comment">//public boolean matches(String regex)告诉这个字符串是否匹配给定的regular expression 。</span></span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;[a-z]&#123;2,&#125;&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abc def hello 123dsa&quot;</span>;</span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        System.out.println(str.replaceFirst(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;hllo wdw worel spark&quot;</span>;</span><br><span class="line">        <span class="comment">//public String[] split(String regex)将此字符串拆分为给定的regular expression的匹配。</span></span><br><span class="line">        String[] strings = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            System.out.println(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        String[] ws = str.split(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.toString(ws);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//字符串的查找操作：Pattern和Matcher</span></span><br><span class="line">        regex = <span class="string">&quot;\\w&#123;3,7&#125;&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abcd123qqqq122321dddd44&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个java对应的正则表达式对象</span></span><br><span class="line">        <span class="comment">//public static Pattern compile(String regex)将给定的正则表达式编译为模式</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">compile</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="comment">//public Matcher matcher(CharSequence input)创建一个匹配器，匹配给定的输入与此模式。</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> compile.matcher(str);</span><br><span class="line">        <span class="comment">//boolean matches()</span></span><br><span class="line">        <span class="comment">//尝试将整个区域与模式进行匹配。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.matches());</span></span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//boolean find()</span></span><br><span class="line">        <span class="comment">//尝试找到匹配模式的输入序列的下一个子序列。</span></span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line"><span class="comment">//        System.out.println(matcher.group());</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line">======================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">_ _ _ 123_</span><br><span class="line">_ def hello 123dsa</span><br><span class="line">=======================================</span><br><span class="line">hllo</span><br><span class="line">wdw</span><br><span class="line"><span class="type">worel</span></span><br><span class="line"><span class="variable">spark</span></span><br><span class="line"><span class="operator">=</span>======================================</span><br><span class="line">[hllo , d,  , orel spark]</span><br><span class="line">=======================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">abcd123</span><br><span class="line">====================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line">qqqq122</span><br><span class="line">================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line">321dddd</span><br><span class="line">==================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalStateException: No match available</span><br><span class="line">at java.util.regex.Matcher.end(Matcher.java:<span class="number">415</span>)</span><br><span class="line">at com.shujia.wyh.day17.RegularDemo10.main(RegularDemo10.java:<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="正则表达式练习："><a href="#正则表达式练习：" class="headerlink" title="正则表达式练习："></a>正则表达式练习：</h5><p>题目：治疗口吃</p><p>将字符串“我我我我我我我……….我……..要要要要要………….要要要要….学习习习……习习习习习习习习习编程程程程程程程程程程程…..程程程程程程程程” —-&gt; “我要学习编程”</p><p>分析：1、先将.去掉      2、再将叠词变成一个</p><p>帮助理解正则表达式的网址：<a href="https://regexper.com/">https://regexper.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;需求：编写一个java程序检验qq号是否符合规范&lt;/p&gt;
&lt;p&gt;​    1、必须全部都是</summary>
      
    
    
    
    
  </entry>
  
</feed>
