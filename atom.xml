<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  
  <subtitle>little notes</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-25T15:08:13.128Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>秋水一色</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop高可用集群搭建（HA）</title>
    <link href="http://example.com/2022/05/25/Hadoop%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88HA%EF%BC%89/"/>
    <id>http://example.com/2022/05/25/Hadoop%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88HA%EF%BC%89/</id>
    <published>2022-05-24T16:00:00.000Z</published>
    <updated>2022-05-25T15:08:13.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、zookeeper搭建"><a href="#1、zookeeper搭建" class="headerlink" title="1、zookeeper搭建"></a>1、zookeeper搭建</h3><p>1、上传安装包到master并解压<br>    tar -xvf zookeeper-3.4.6.tar.gz</p><p>2、配置环境变量<br>    vim &#x2F;etc&#x2F;profile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/soft/zookeeper-3.4.6</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line"></span><br><span class="line">别忘记source /etc/profile</span><br></pre></td></tr></table></figure><p>3、修改配置文件<br>    cd conf<br>    cp  zoo_sample.cfg zoo.cfg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改</span><br><span class="line">dataDir=/usr/local/soft/zookeeper-3.4.6/data</span><br><span class="line"></span><br><span class="line">增加</span><br><span class="line">server.0=master:2888:3888</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br></pre></td></tr></table></figure><p>4、同步到其它节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scp -r zookeeper-3.4.6 node1:`pwd`</span><br><span class="line">scp -r zookeeper-3.4.6 node2:`pwd`</span><br><span class="line"></span><br><span class="line">配置node1和node2的环境变量</span><br><span class="line">scp /etc/profile node1:/etc/</span><br><span class="line">scp /etc/profile node2:/etc/</span><br><span class="line"></span><br><span class="line">在所有节点执行</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>5、创建&#x2F;usr&#x2F;local&#x2F;soft&#x2F;zookeeper-3.4.6&#x2F;data目录,所有节点都要创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/soft/zookeeper-3.4.6/data</span><br><span class="line"></span><br><span class="line">在data目录下创建myid文件</span><br><span class="line">vim myid </span><br><span class="line">master,node1,node2分别加上0，1，2</span><br></pre></td></tr></table></figure><p>6、启动zk，</p><pre><code>zkServer.sh start  三台都需要执行zkServer.sh status 查看状态当有一个leader的时候启动成功</code></pre><p>连接zk</p><pre><code>zkCli.shzk  是一个目录结构 ，每个节点可以存数据，同时可以有子节点</code></pre><p>zk shell</p><pre><code>创建目录create /test testcreate /test/a 1获取数据get /test ls /testdelete 只能删除没有子节点的节点rmr /test  删除节点</code></pre><p><strong>关闭命令</strong></p><p>zkServer.sh stop</p><p><strong>拍摄快照</strong></p><p><strong>重置zk</strong><br>1、杀掉所有zk进程<br>kiil -9 pid</p><p>2、删除data目录下的version文件, 所有节点都要删除<br>rm -rf &#x2F;usr&#x2F;local&#x2F;soft&#x2F;zookeeper-3.4.6&#x2F;data&#x2F;version-2</p><p>2、启动zk<br>zkServer.sh start</p><h3 id="2、Hadoop-HA"><a href="#2、Hadoop-HA" class="headerlink" title="2、Hadoop-HA"></a>2、Hadoop-HA</h3><table><thead><tr><th></th><th>ZK</th><th>NN</th><th>DN</th><th>RN</th><th>NM</th><th>JN</th><th>ZKFC</th></tr></thead><tbody><tr><td>master</td><td>1</td><td>1</td><td></td><td>1</td><td></td><td>1</td><td>1</td></tr><tr><td>node1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>node2</td><td>1</td><td></td><td>1</td><td></td><td>1</td><td></td><td></td></tr></tbody></table><h4 id="防火墙、时间同步、免密配置操作不再赘述"><a href="#防火墙、时间同步、免密配置操作不再赘述" class="headerlink" title="防火墙、时间同步、免密配置操作不再赘述"></a>防火墙、时间同步、免密配置操作不再赘述</h4><p>1、修改hadoop配置文件</p><p><strong>core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://cluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/soft/hadoop-2.7.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:2181,node1:2181,node2:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>hdfs-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定hdfs元数据存储的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/soft/hadoop-2.7.6/data/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定hdfs数据存储的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/soft/hadoop-2.7.6/data/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据备份的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关闭权限验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启WebHDFS功能（基于REST的接口服务） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- //////////////以下为HDFS HA的配置////////////// --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定hdfs的nameservices名称为mycluster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定cluster的两个namenode的名称分别为nn1,nn2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.cluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置nn1,nn2的rpc通信端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.cluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.cluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置nn1,nn2的http通信端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.cluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.cluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定namenode元数据存储在journalnode中的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://master:8485;node1:8485;node2:8485/cluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定journalnode日志文件存储的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/soft/hadoop-2.7.6/data/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定HDFS客户端连接active namenode的java类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.cluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置隔离机制为ssh --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定秘钥的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启自动故障转移 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- NodeManager上运行的附属服务，需配置成mapreduce_shuffle才可运行MapReduce程序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Web Application Proxy安全代理（防止yarn被攻击） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置日志删除时间为7天，-1为禁用，单位为秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改日志目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置nodemanager可用的资源内存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置nodemanager可用的资源CPU --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- //////////////以下为YARN HA的配置////////////// --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启YARN HA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用自动故障转移 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN HA的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarncluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定两个resourcemanager的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置rm1，rm2的主机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置YARN的http端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置zookeeper的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:2181,node1:2181,node2:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置zookeeper的存储位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-state-store.parent-path<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/rmstore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启yarn resourcemanager restart --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置resourcemanager的状态存储到zookeeper中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启yarn nodemanager restart --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置nodemanager IPC的通信端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:45454<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定MapReduce计算框架使用YARN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定jobhistory server的rpc地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定jobhistory server的http地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启uber模式（针对小作业的优化） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.ubertask.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置启动uber模式的最大map数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.ubertask.maxmaps<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>9<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置启动uber模式的最大reduce数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.ubertask.maxreduces<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、删除hadoop数据存储目录下的文件  每个节点都需要删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /usr/local/soft/hadoop-2.7.6/tmp</span><br></pre></td></tr></table></figure><p>3、启动zookeeper<strong>三台都需要启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start启动</span><br><span class="line">zkServer.sh status查看状态</span><br></pre></td></tr></table></figure><p>4、启动 JN 存储hdfs元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode每个节点都要执行</span><br></pre></td></tr></table></figure><p> 5、格式化 在一台NN上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format在master上执行</span><br></pre></td></tr></table></figure><p>6、启动当前的NN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode在master上执行</span><br></pre></td></tr></table></figure><p>7、执行同步 没有格式化的NN上执行  在另外一个namenode上面执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -bootstrapStandby在node1上执行</span><br></pre></td></tr></table></figure><p>8、格式化ZK   在已经启动的namenode上面执行<br>    <strong>！！一定要先 把zk集群正常 启动起来！！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZKmaster上执行</span><br></pre></td></tr></table></figure><p>9、启动hdfs集群,在启动了namenode的节点上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.shmaster上执行</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对学习Hadoop的一些知识笔记</summary>
    
    
    
    <category term="大数据" scheme="http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="http://example.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop进程相关</title>
    <link href="http://example.com/2022/05/24/Hadoop%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2022/05/24/Hadoop%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/</id>
    <published>2022-05-23T16:00:00.000Z</published>
    <updated>2022-05-24T14:55:23.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、进程理解"><a href="#1、进程理解" class="headerlink" title="1、进程理解"></a>1、进程理解</h3><h4 id="HDFS相关（NN、DN、SNN）"><a href="#HDFS相关（NN、DN、SNN）" class="headerlink" title="HDFS相关（NN、DN、SNN）"></a>HDFS相关（NN、DN、SNN）</h4><h5 id="NameNode（NN）"><a href="#NameNode（NN）" class="headerlink" title="NameNode（NN）"></a>NameNode（NN）</h5><p><img src="https://s2.loli.net/2022/05/24/OAdzRlIwaLnFTB7.png" alt="image-20220524205656034"></p><blockquote><p>功能：</p><p>​    1、接收客户端的读&#x2F;写服务    因为NN知道数据文件与DN的对应（映射）关系</p><p>​    2、保存文件的时候会保存文件的元数据信息</p><p>​            a、文件的归属</p><p>​            b、文件的权限</p><p>​            c、文件的大小 、时间</p><p>​            d、Block块的信息，但是Block块的位置信息不会持久化，需要每次开启集群的时候DN向NN汇报。</p><p>​    3、收集Block块的位置信息</p><p>​        3.1    系统启动</p><p>​            a、NN关机的时候不会存储任何的Block块与DN的映射信息</p><p>​            b、DN启动的时候会自动将自己节点上存储的Block块信息汇报给NN</p><p>​            c、NN接收请求之后会重新生成映射关系</p><p>​                        File –&gt;Block</p><p>​                        Block–&gt;DN</p><p>​            d、如果数据块的副本数小于设置数，NN会将整个副本拷贝到其他节点</p><p>​        3.2    集群运行中</p><p>​            a、NN与DN保持心跳机制，三秒钟发送一次</p><p>​            b、如果客户端需要读取或者上传数据的时候，NN可以知道DN的健康情况</p><p>​            c、可以让客户端读取存活的DN节点</p><p>​            d、如果NN与DN三秒没有心跳反馈，就会认为DN出现异常（掉线），此时不会让新的数据写到这个异常的DN中，客户端访问的时候不提供异常的DN节点地址</p><p>​            e、如果超过十分钟没有心跳，那么NN会认为它宕机，会将当前DN节点存储的数据转移到其他节点</p><p>​    4、NameNode为了效率，将所有操作都在内存中进行</p><p>​        a、执行速度快</p><p>​        b、NameNode不会和磁盘进行任何的数据交换</p><p>​        但是会存在两个问题：</p><p>​        1、数据的持久化</p><p>​        2、数据保存在内存中，断电会丢失</p></blockquote><h5 id="DataNode（DN）"><a href="#DataNode（DN）" class="headerlink" title="DataNode（DN）"></a>DataNode（DN）</h5><blockquote><p>1、存放的是文件的数据信息，以及验证文件完整性的校验信息 </p><p>2、数据会存放在硬盘上</p><p>​        a、1m&#x3D;1条数据</p><p>​        b、1G&#x3D;1条数据</p><p>​        c、NN非常排斥存储小文件（能存，但是不推荐）</p><p>​            一般小文件在存储之前需要进行压缩</p><p>3、汇报</p><p>​        1、启动时</p><p>​                汇报之前会先验证Block文件是否损坏</p><p>​                向NN汇报当前DN上Block的信息</p><p>​        2、运行时</p><p>​                向NN保持心跳机制</p><p>4、当客户端读写数据的时候，首先会先去查询file与block与DN的映射，然后客户端直接与DN建立连接，然后读写数据</p></blockquote><h5 id="SecondaryNameNode（SNN）"><a href="#SecondaryNameNode（SNN）" class="headerlink" title="SecondaryNameNode（SNN）"></a>SecondaryNameNode（SNN）</h5><blockquote><h5 id="1、传统的内存持久化方案"><a href="#1、传统的内存持久化方案" class="headerlink" title="1、传统的内存持久化方案"></a>1、传统的内存持久化方案</h5><p>​    1）日志机制</p><p>​            a、做任何操作之前先记录日志</p><p>​            b、在数据改变之前先记录对应的日志，当NN停止的时候</p><p>​            c、当我下次启动的时候，只需要重新按照以前的日志”重做一遍”即可</p><p>​            <strong>缺点：</strong></p><p>​                a、log日志文件的大小不可控，随着时间的变化，集群启动的时间也会越来越长</p><p>​                b、日志中会存在大量无效日志</p><p>​            <strong>优点：</strong></p><p>​                a、不会丢失数据</p><h5 id="2）拍摄快照"><a href="#2）拍摄快照" class="headerlink" title="2）拍摄快照"></a>2）拍摄快照</h5><p>​            a、将内存中的数据写到硬盘上（序列化）</p><p>​            b、启动时还可以将硬盘上的数据写回到内存中（反序列化）</p><p>​            <strong>缺点</strong></p><p>​                a、关机时间长</p><p>​                b、如果时异常关机，数据还在内存中，没法写入到硬盘</p><p>​                c、如果写出的频率过高，导致内存使用效率低</p><p>​            <strong>优点</strong></p><p>​                启动时间较短</p><h5 id="2、SNN的解决方案"><a href="#2、SNN的解决方案" class="headerlink" title="2、SNN的解决方案"></a>2、SNN的解决方案</h5><p>​    1）解决思路</p><p>​            a、让日志大小可控（每64M）</p><p>​            b、快照需要定时保存（每隔1h）</p><p>​            c、日志+快照</p><p>​    2）解决方案 </p><p>​            a、当我们启动一个集群的时候，会产生4个文件 …&#x2F;name&#x2F;current&#x2F;</p><p><img src="https://s2.loli.net/2022/05/24/Us7rSuhcvWiNzdJ.png" alt="image-20220524222400282"></p><p>​            b、我们每次操作都会记录日志–&gt;edits-inprogress- edits_00000001，随着时间的推移，日志文件会越来越大-当达到阈值的时候（64M或3600秒），会生成新的日志文件，edits_inprogress-000000001 –&gt;edits_0000001，创建新的日志文件 edits_inprogress-0000000016。</p><p><img src="https://s2.loli.net/2022/05/24/N5eijCIE2SUzJ7v.png" alt="image-20220524222453522"></p></blockquote><h3 id="2、安全模式"><a href="#2、安全模式" class="headerlink" title="2、安全模式"></a>2、安全模式</h3><blockquote><p>安全模式是 HDFS 的一种工作状态，处于安全模式的状态下，只向客户端提供文件的只读视图，不接受对命名空间的修改；同时 NameNode 节点也不会进行数据块的复制或者删除，<br><strong>NameNode 启动时，</strong><br>        1）首先将镜像文件（ fsimage ）载入内存，并执行编辑日志（ edits ）中的各项操作。<br>        2）一旦在内存中成功建立文件系统元数据的映射，则创建一个新的 fsimage 文件和一个空的编辑日志。<br>        3）NameNode 开始监听 RPC 和 Http 请求。<br>        4）此时 NameNode 处于<strong>安全模式</strong>，只接受客户端的读请求。</p><p>​        5）处于这个状态是为了保护数据的安全所以只能被客户端访问读取数据</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 对安全模式的理解</span></span><br><span class="line"><span class="section"># 1.工作流程</span></span><br><span class="line"><span class="code">a.启动 NameNode，NameNode 加载 fsimage 到内存，对内存数据执行 edits log 日 志中的事务操作。</span></span><br><span class="line"><span class="code">b.文件系统元数据内存镜像加载完毕，进行 fsimage 和 edits log 日志的合并，并创 建新的 fsimage 文件和一个空的 edits log 日志文件。</span></span><br><span class="line"><span class="code">c.NameNode 等待 DataNode 上传 block 列表信息，直到副本数满足最小副本条件。</span></span><br><span class="line"><span class="code">d.当满足了最小副本条件，再过 30 秒，NameNode 就会退出安全模式。最小副本条件指 整个文件系统中有 99.9%的 block 达到了最小副本数（默认值是 1，可设置）</span></span><br><span class="line"><span class="code"># 在 NameNode 安全模式（safemode）</span></span><br><span class="line"><span class="code">对文件系统元数据进行只读操作</span></span><br><span class="line"><span class="code">当文件的所有 block 信息具备的情况下，对文件进行只读操作</span></span><br><span class="line"><span class="code">不允许进行文件修改（写，删除或重命名文件）</span></span><br><span class="line"><span class="code"># 2.注意事项</span></span><br><span class="line"><span class="code">a.NameNode 不会持久化 block 位置信息；DataNode 保有各自存储的 block 列表信息。 正常操作时，NameNode 在内存中有一个 blocks 位置的映射信息（所有文件的所有文 件块的位置映射信息）。</span></span><br><span class="line"><span class="code">b.NameNode 在安全模式，NameNode 需要给 DataNode 时间来上传 block 列表信息到 NameNode。如果 NameNode 不等待 DataNode 上传这些信息的话，则会在 DataNode 之间进行 block 的复制，而这在大多数情况下都是非必须的（因为只需要等待 DataNode 上传就行了），还会造成资源浪费。</span></span><br><span class="line"><span class="code">c.在安全模式 NameNode 不会要求 DataNode 复制或删除 block。</span></span><br><span class="line"><span class="code">d.新格式化的 HDFS 不进入安全模式，因为 DataNode 压根就没有 block。</span></span><br><span class="line"><span class="code"># 4.命令操作</span></span><br><span class="line"><span class="code"># 通过命令查看 namenode 是否处于安全模式：</span></span><br><span class="line"><span class="code">hdfs dfsadmin -safemode get</span></span><br><span class="line"><span class="code">Safe mode is ON HDFS 的前端 webUI 页面也可以查看 NameNode 是否处于安全模式。 有时候我们希望等待安全模式退出，之后进行文件的读写操作，尤其是在脚本中，此时：</span></span><br><span class="line"><span class="code">`hdfs dfsadmin -safemode wait`</span></span><br><span class="line"><span class="code"># your read or write command goes here 管理员有权在任何时间让 namenode 进入或退出安全模式。进入安全模式：</span></span><br><span class="line"><span class="code">`hdfs dfsadmin -safemode enter`</span></span><br><span class="line"><span class="code">Safe mode is ON 这 样 做 可 以 让 namenode 一 直 处 于 安 全 模 式 ， 也 可 以 设 置 `dfs.namenode.safemode.threshold-pct` 为 1 做到这一点。 离开安全模式：</span></span><br><span class="line"><span class="code">`hdfs dfsadmin -safemode leave`</span></span><br><span class="line"><span class="code">Safe mode is OFF</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>系统中的数据块的位置并不是由 NameNode 维护的，而是以块列表的形式存储在 DataNode 中。</strong><br>[root@node01 ~]# rm -rf &#x2F;var&#x2F;yjx&#x2F;hadoop&#x2F;full&#x2F;dfs&#x2F;name&#x2F;current&#x2F;*<br>[root@node01 ~]# scp -r<br>root@node02:&#x2F;var&#x2F;yjx&#x2F;hadoop&#x2F;full&#x2F;dfs&#x2F;namesecondary&#x2F;current&#x2F;*<br>&#x2F;var&#x2F;yjx&#x2F;hadoop&#x2F;full&#x2F;dfs&#x2F;name&#x2F;current </p><p><strong>安全模式下</strong><br>        a. 安全模式下，各个 DataNode 会向 NameNode 发送自身的数据块列表<br>        b. 当 NameNode 有足够的数据块信息后，便在 30 秒后退出安全模式<br>        c. NameNode 发现数据节点过少会启动数据块复制过程<br><strong>如果 NN 收集的 Block 信息没有达到最少副本数，就会将缺失的副本 , 从有的 DN 上拷贝到其他 DN</strong><br>        a. dfs.replication.min&#x3D;2<br>        b. 但是默认最低副本数为 1<br>        c. 在拷贝的过程中系统还是处于安全模式<br><strong>安全模式相关命令</strong><br>hadoop dfsadmin -safemode leave 强制 NameNode 退出安全模式<br>hadoop dfsadmin -safemode enter 进入安全模式<br>hadoop dfsadmin -safemode get 查看安全模式状态<br>hadoop dfsadmin -safemode wait 等待一直到安全模式结束</p></blockquote><h3 id="3、HDFS的权限"><a href="#3、HDFS的权限" class="headerlink" title="3、HDFS的权限"></a>3、HDFS的权限</h3><blockquote><p>HDFS对权限的控制</p><p>​        a. 只能防止好人做错事</p><p>​        b. 不能防止坏人做坏事</p><p><strong>但是告诉你是谁，他就认为你是谁！！</strong></p></blockquote><h3 id="4、机架感知"><a href="#4、机架感知" class="headerlink" title="4、机架感知"></a>4、机架感知</h3><blockquote><p>机架感知是为了保证副本在集群中的安全性<br>我们需要将节点放在不同的DN节点上，节点也需要一定的考量<br>     可靠性，可用性，带宽消耗<br>第一个节点：<br>     集群内部（优先考虑和客户端相同的节点作为第一个节点）<br>     集群外部（选择资源丰富且不繁忙的节点作为第一个节点）<br>第二个节点：<br>     第二个节点选择与第一个节点不同机架的其他节点<br>第三个节点：<br>     与第二个相同机架相同的其他节点<br>第N个节点：<br>     与前面节点不重复的其他节点</p></blockquote><h3 id="5、HDFS的读写流程（重点）"><a href="#5、HDFS的读写流程（重点）" class="headerlink" title="5、HDFS的读写流程（重点）"></a>5、HDFS的读写流程（重点）</h3><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><blockquote><p> <strong>写数据就是将客户端上的数据上传到HDFS</strong></p><h4 id="宏观过程"><a href="#宏观过程" class="headerlink" title="宏观过程"></a>宏观过程</h4><p> <img src="https://s2.loli.net/2022/05/24/wTPqf3aR9eGsKv7.png" alt="image-20220524222751307"></p><p> <strong>1.客户端向HDFS发送写数据请求</strong></p><p>   hdfs dfs -put students.txt &#x2F;shujia&#x2F;</p><p> <strong>2. Filesystem通过rpc调用namenode的put方法</strong></p><p> a. nn首先检查是否有足够的空间权限等条件创建这个文件,或者这个路径是否已经存在，权限</p><p> b. 有：NN会针对这个文件创建一个空的Entry对象,并返回成功状态给DFS        </p><p> c. 没有：直接抛出对应的异常，给予客户端错误提示信息</p><p> <strong>3.如果DFS接收到成功的状态，会创建一个FSDataOutputStream的对象给客户端使用</strong></p><p> <strong>4.客户端要向nn询问第一个Block存放的位置</strong></p><p> ​    NN通过机架感知策略 (node1 node 2 node3)</p><p> <strong>5.需要将客户端和DN节点创建连接</strong></p><pre><code>pipeline(管道)客户端 和 node1 创建连接 socketnode1 和 node2 创建连接 socketnode2 和 Node3 创建连接 socket</code></pre><p> <strong>6.客户端按照文件块切分数据，但是按照packet发送数据</strong><br>    默认一个packet大小为64K,Block128M为2048个packet</p><p> <strong>7.客户端通过pipeline管道开始使用FDSOutputStream对象将数据输出</strong></p><pre><code>    1. 客户端首先将一个 packet 发送给 node1, 同时给予 node1 一个 ack 状态    2. node1接受数据后会将数据继续传递给 node2, 同时给予 node2 一个 ack 状态    3. node2接受数据后会将数据继续传递给 node3, 同时给予 node3 一个 ack 状态    4. node3将这个 packet 接受完成后，会响应这个 ack 给 node2 为 true    5. node2会响应给 node1 , 同理 node1 响应给客户端</code></pre><p> <strong>8.客户端接收到成功的状态 , 就认为某个 packet 发送成功了，直到当前块所有的 packet 都发送完成</strong></p><p> ​    1. 如果客户端接收到最后一个 pakcet 的成功状态 , 说明当前 block 传输完成，管道就会被撤销</p><p> ​    2. 客户端会将这个消息传递给 NN ， NN 确认传输完成</p><p> ​        1. NN会将 block 的信息记录到 Entry, 客户端会继续向 NN 询问第二个块的存储位置 , 依次类推</p><p> ​                block1 (node1 node2 node3)</p><p> ​                block2 (node1 node3 node6)</p><p> ​                ….</p><p> ​                blockn(node1 node4 node6)</p><pre><code> 3. 当所有的 block 传输完成后， NN 在 Entry 中存储所有的 File 与 Block 与 DN 的映射关系关闭FsDataOutPutStream</code></pre><h4 id="微观过程（如何保证package发送的时候不出错呢？）"><a href="#微观过程（如何保证package发送的时候不出错呢？）" class="headerlink" title="微观过程（如何保证package发送的时候不出错呢？）"></a>微观过程（如何保证package发送的时候不出错呢？）</h4><p> <strong>1.客户端首先从自己的硬盘中以流的形式将自己的数据读取到缓存中</strong><br> <strong>2.然后将缓存中的数据以chunk(512B)和checksum(4B)的方式放入到packet（64k)</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. chunk:checksum=128:1</span><br><span class="line">2. checksum:在数据处理和数据通信领域中，用于校验目的的一组数据项的和</span><br><span class="line">3. Packet中的数据分为两类，一类是实际数据包，另一类是 header 包。</span><br><span class="line">4. 一个 Packet 数据包的组成结构（分两类，一类是实际的数据包，另一类是header包。）</span><br></pre></td></tr></table></figure><p> <strong>一个数据包的组成结构：</strong></p><p> <img src="https://s2.loli.net/2022/05/24/jfzr86gaTiWdvlD.png" alt="image-20220524225301985"></p><p> <strong>参数理解：</strong></p><p> <img src="https://s2.loli.net/2022/05/24/yp9kOTUjeMYHxEZ.png" alt="image-20220524225333906"></p><p> <strong>3.（默认生成的快，发送的慢）当packet满的时候添加到dataqueue</strong><br> <strong>4.datastreamer开始从dataqueue队列上读取一个packet,通过FDSDataOPS发送到Poepleline</strong><br>     在取出的时候，也会将 packet 加入到 ackQueue, 典型的生产者消费者模式</p><p> ​    客户端发送一个 Packet 数据包以后开始接收 ack ，会有一个用来接收 ack 的 ResponseProcessor 进<br> 程，如果收到成功的 ack </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 如果某一个 packet 的 ack 为 true, 那么就从 ackqueue 删除掉这个 packet</span><br><span class="line">2. 如果某一个 packet 的 ack 为 false, 将 ackqueue 中所有的 packet 重新挂载到 发送队列 , 重新发送</span><br></pre></td></tr></table></figure><p> <img src="https://s2.loli.net/2022/05/24/1W63lkyhUTdDBGg.png" alt="image-20220524225407656"></p><p> <strong>最终DFS保存的数据格式：</strong></p><p> <img src="https://s2.loli.net/2022/05/24/9lJKUgNxXzPv16Q.png" alt="image-20220524225430756"></p><p> <strong>读数据</strong></p><p> <img src="https://s2.loli.net/2022/05/24/C9qYBsOL6RjZyM4.png" alt="image-20220524225514935"></p><p> <strong>1.首先客户端发送请求到 DFS ，申请读取某一个文件</strong><br> <strong>2.DFS 去 NN 查找这个文件的信息 ( 权限 , 文件是否存在 )</strong><br>     如果文件不存在，抛出指定的错误<br>     如果文件存在，返回成功状态<br> <strong>3.DFS 创建 FSDataInputStream 对象，客户端通过这个对象读取数据</strong><br> <strong>4.客户端获取文件第一个 Block 信息 , 返回 DN1 DN2 DN8</strong><br> <strong>5.客户端直接就近原则选择 DN1 对应的数据即可</strong><br> <strong>6.依次类推读取其他块的信息，直到最后一个块 , 将 Block 合并成一个文件</strong><br> <strong>7.关闭 FSDataInputStream</strong></p></blockquote>]]></content>
    
    
    <summary type="html">对学习Hadoop的一些知识笔记</summary>
    
    
    
    <category term="大数据" scheme="http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="http://example.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop-2.7.6-基础</title>
    <link href="http://example.com/2022/05/23/Hadoop-2.7.6-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/23/Hadoop-2.7.6-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2022-05-24T11:45:23.600Z</updated>
    
    <content type="html"><![CDATA[<p>hadoop的<strong>特点</strong>：</p><p><strong>扩容能力</strong></p><p>扩容能力(Scalable)：能可靠(reliably)地存储和处理PB级别的数据。如果数据量更大，存储不下了,再增加节点就可以了。</p><p><strong>成本低</strong></p><p>成本低(Economical):可以通过普通机器组成的服务器集群来分发以及处理数据.这些服务器集群可达数千个节点。</p><p><strong>高效率</strong></p><p>高效率(Efficient):通过分发计算程序,hadoop可以在数据所在节点上(本地)并行地(parallel)处理他们,这使得处理非常的迅速</p><p><strong>可靠性</strong></p><p>可靠性(Reliable):hadoop能够自动地维护数据的多份副本,并且在任务失败后能够自动地重新部署(redeploy)计算任务</p><p>作者Doug Cutting 受Google三篇论文的启发，开发了hadoop</p><blockquote><p><strong>Google FS</strong></p><p><strong>MapReduce</strong></p><p><strong>BigTable</strong></p></blockquote><p>hadoop是一个统称，目前hadoop主要包含<strong>三大组件</strong></p><blockquote><p><strong>hdfs</strong>：是一个分布式存储框架，适合海量数据存储</p><p><strong>mapreduce</strong>：是一个分布式计算框架，适合海量数据计算</p><p><strong>yarn</strong>：是一个资源调度平台，负责给计算框架分配计算资源</p></blockquote><p>HDFS具有<strong>主从架构</strong>。HDFS集群由单个名称节点组成，主服务器管理文件系统名称空间并控制客户机对文件的访问。此外，还有许多数据节点，通常是集群中每个节点一个，它们管理连接到运行它们的节点的存储。</p><p><img src="https://s2.loli.net/2022/05/17/SODawkZY6AnX4RL.png" alt="image-20220517200532901"></p><p>hadoop的三种启动（停止）方式</p><p>第一种：全部启动集群所有进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动：sbin/start-all.sh</span><br><span class="line">停止：sbin/stop-all.sh</span><br></pre></td></tr></table></figure><p>第二种：单独启动hdfs【web端口50070】和【web端口8088】的相关进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动：sbin/start-dfs.sh sbin/start-yarn.sh</span><br><span class="line">停止：sbin/stop-dfs.sh  sbin/stop-yarn.sh</span><br><span class="line">**每次重新启动集群的时候使用**</span><br></pre></td></tr></table></figure><p>第三种：单独启动某一个进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动hdfs：sbin/hadoop-daemon.sh start (namenode | datanode)</span><br><span class="line">停止hdfs：sbin/hadoop-daemon.sh stop (namenode | datanode)</span><br><span class="line">启动yarn：sbin/hadoop-daemon.sh start (resourcemanager | nodemanager)</span><br><span class="line">停止yarn：sbin/hadoop-daemon.sh stop (resourcemanager | nodemanager)</span><br><span class="line">**用于当某个进程启动失败或者down掉的时候，重启进程**</span><br></pre></td></tr></table></figure><p><strong>hdfs shell</strong></p><p>调用文件系统(FS)Shell命令应使用 bin&#x2F;hdfs dfs -xxx 的形式。</p><p>所有的FS shell命令使用URI路径作为参数。</p><p>URI格式是scheme:&#x2F;&#x2F;authority&#x2F;path。HDFS的scheme是hdfs，对本地文件系统，scheme是file。其中scheme和authority参数都是可选的，如果未加指定，就会使用配置中指定的默认scheme。</p><p>例如：&#x2F;parent&#x2F;child可以表示成hdfs:&#x2F;&#x2F;namenode:namenodePort&#x2F;parent&#x2F;child，或者更简单的&#x2F;parent&#x2F;child（假设配置文件是namenode:namenodePort）</p><p>大多数FS Shell命令的行为和对应的Linux Shell命令类似。</p><p>常用操作</p><p>-ls            查看hdfs上目录，如hdfs dfs -ls &#x2F;</p><p>-put         将本地文件上传到hdfs，如hdfs dfs -put 本地文件路径 hdfs路径</p><p>-get         将hdfs文件下载到本地，如hdfs dfs -get hdfs的文件路径 本地文件路径</p><p>-mkdir    在hdfs上创建文件夹，如hdfs dfs -mkdir &#x2F;test</p><p>-cp          将hdfs文件或目录复制，如hdfs dfs -cp &#x2F;test.txt &#x2F;a&#x2F;</p><p>-cat         查看hdfs上文件内容，如hdfs dfs -cat &#x2F;test.txt</p><p><strong>运行word count实例</strong></p><p>hadoop jar  &#x2F;usr&#x2F;local&#x2F;soft&#x2F;hadoop-2.7.6&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.6.jar wordcount  inputpath outputpath</p><p>运行结果：</p><p><img src="https://s2.loli.net/2022/05/17/ix2tcnZwKjelkMo.png" alt="image-20220517211619031"></p>]]></content>
    
    
    <summary type="html">对学习Hadoop的一些知识笔记</summary>
    
    
    
    <category term="大数据" scheme="http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="http://example.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群搭建（完全分布式）</title>
    <link href="http://example.com/2022/05/22/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%EF%BC%89/"/>
    <id>http://example.com/2022/05/22/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%EF%BC%89/</id>
    <published>2022-05-21T16:00:00.000Z</published>
    <updated>2022-05-24T12:03:01.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ul><li><p>三台虚拟机：master、node1、node2</p></li><li><p>时间同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate ntp.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>调整时区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure></li><li><p>jdk1.8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>修改主机名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三台分别执行 vim /etc/hostname 并将内容指定为对应的主机名</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙：systemctl stop firewalld   </p><ul><li>查看防火墙状态：systemctl status firewalld </li><li>取消防火墙自启：systemctl disable firewalld</li></ul></li><li><p>静态IP配置（两种方式）</p><ul><li><p>1、直接使用图形化界面配置</p></li><li><p>2、手动编辑配置文件进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、编辑网络配置文件</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">HWADDR=00:0C:29:E2:B8:F2</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.190.100</span><br><span class="line">GATEWAY=192.168.190.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=192.168.190.2</span><br><span class="line">DNS2=223.6.6.6</span><br><span class="line"></span><br><span class="line">需要修改：HWADDR（mac地址,centos7不需要手动指定mac地址）</span><br><span class="line">IPADDR（根据自己的网段，自定义IP地址）</span><br><span class="line">GATEWAY（根据自己的网段填写对应的网关地址）</span><br><span class="line"></span><br><span class="line">2、关闭NetworkManager，并取消开机自启</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br><span class="line"></span><br><span class="line">3、重启网络服务</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li></ul></li><li><p>免密登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1、生成密钥</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"># 2、配置免密登录</span><br><span class="line">ssh-copy-id master</span><br><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line"># 3、测试免密登录</span><br><span class="line">ssh node1</span><br></pre></td></tr></table></figure></li><li><p>配置好映射文件：&#x2F;etc&#x2F;hosts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.151.81 master</span><br><span class="line">192.168.151.82 node1</span><br><span class="line">192.168.151.83 node2</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、搭建Hadoop集群"><a href="#二、搭建Hadoop集群" class="headerlink" title="二、搭建Hadoop集群"></a>二、搭建Hadoop集群</h3><blockquote><p>NameNode：接受客户端的读&#x2F;写服务,收集 DataNode 汇报的 Block 列表信息</p><p>DataNode：真实数据存储的地方（block）</p><p>SecondaryNameNode：做持久化的时候用到</p></blockquote><table><thead><tr><th>进程</th><th>master（主）</th><th>node1（从）</th><th>node2（从）</th></tr></thead><tbody><tr><td>NameNode</td><td>√</td><td></td><td></td></tr><tr><td>SecondaryNameNode</td><td>√</td><td></td><td></td></tr><tr><td>ResourceManager</td><td>√</td><td></td><td></td></tr><tr><td>DataNode</td><td></td><td>√</td><td>√</td></tr><tr><td>NodeManager</td><td></td><td>√</td><td>√</td></tr></tbody></table><h3 id="2-1-完全分布式搭建"><a href="#2-1-完全分布式搭建" class="headerlink" title="2.1    完全分布式搭建"></a>2.1    完全分布式搭建</h3><h4 id="1、上传安装包并解压"><a href="#1、上传安装包并解压" class="headerlink" title="1、上传安装包并解压"></a>1、上传安装包并解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用xftp上传压缩包至master的/usr/local/soft/packages/</span><br><span class="line">cd /urs/local/soft/packages/</span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf hadoop-2.7.6.tar.gz -C /usr/local/soft/</span><br></pre></td></tr></table></figure><h4 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/local/soft/jdk1.8.0_171</span><br><span class="line">HADOOP_HOME=/usr/local/soft/hadoop-2.7.6</span><br><span class="line">export PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line"># 重新加载环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="3、修改Hadoop配置文件"><a href="#3、修改Hadoop配置文件" class="headerlink" title="3、修改Hadoop配置文件"></a>3、修改Hadoop配置文件</h4><ul><li><p><code>cd /usr/local/soft/hadoop-2.7.6/etc/hadoop/</code></p></li><li><p>core-site.xml</p><blockquote><p>fs.defaultFS： 默认文件系统的名称。其方案和权限决定文件系统实现的URI。uri的方案确定命名文件系统实现类的配置属性（fs.scheme.impl）。uri的权限用于确定文件系统的主机、端口等。</p><p>hadoop.tmp.dir：是 hadoop文件系统依赖的基本配置，很多配置路径都依赖它，它的默认位置是在 &#x2F;tmp&#x2F;{$user}下面，注意这是个临时目录！！！</p><p>因此，它的持久化配置很重要的！ 如果选择默认，一旦因为断电等外在因素影响，&#x2F;tmp&#x2F;{$user}下的所有东西都会丢失。</p><p>fs.trash.interval：启用垃圾箱配置，dfs命令删除的文件不会立即从HDFS中删除。相反，HDFS将其移动到垃圾目录（每个用户在<code>/user/&lt;username&gt;/.Trash</code>下都有自己的垃圾目录）。只要文件保留在垃圾箱中，文件可以快速恢复。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/usr/local/soft/hadoop-2.7.6/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1440&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>hadoop-env.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/soft/jdk1.8.0_171</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/24/ABd2KfenPMkySoT.png" alt="image.png"></p></li><li><p>hdfs-site.xml</p></li><li><blockquote><p>dfs.replication：每个datanode上只能存放一个副本。我这里就2个datanode</p><p>dfs.permissions：如果为“true”，则在HDFS中启用权限检查。如果为“false”，则关闭权限检查，但所有其他行为保持不变。从一个参数值切换到另一个参数值不会更改文件或目录的模式、所有者或组。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>mapred-site.xml.template</p></li><li><blockquote><p>mapreduce.framework.name：用于执行MapReduce作业的运行时框架。</p><p>mapreduce.jobhistory.address：Hadoop自带了一个历史服务器，可以通过历史服务器查看已经运行完的Mapreduce作业记录，比如用了多少个Map、用了多少个Reduce、作业提交时间、作业启动时间、作业完成时间等信息。默认情况下，Hadoop历史服务器是没有启动的，我们可以通过*mr-<strong>jobhistory-daemon.sh start historyserver</strong>命令来启动Hadoop历史服务器。我们可以通过Hadoop jar的命令来实现我们的程序jar包的运行，关于运行的日志，我们一般都需要通过启动一个服务来进行查看，就是我们的JobHistoryServer，我们可以启动一个进程，专门用于查看我们的任务提交的日志。mapreduce.jobhistory.address和mapreduce.jobhistory.webapp.address默认的值分别是0.0.0.0:10020和0.0.0.0:19888</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 1、重命名文件</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line"># 2、修改</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;  </span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;master:10020&lt;/value&gt;  </span><br><span class="line">    &lt;/property&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;property&gt;  </span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;master:19888&lt;/value&gt;  </span><br><span class="line">    &lt;/property&gt; </span><br></pre></td></tr></table></figure></li><li><p>slaves</p></li><li><blockquote><p>从节点的信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure></li><li><p>yarn-site.xml</p></li><li><blockquote><p>yarn.resourcemanager.hostname：指定yarn主节点</p></blockquote></li></ul><blockquote><p>yarn.nodemanager.aux-services：NodeManager上运行的附属服务。需配置成mapreduce_shuffle，才可运行MapReduce程序。默认值：“”</p><p>yarn.log-aggregation-enable：yarn日志聚合功能开关</p><p>yarn.log-aggregation.retain-seconds：日志保留时限，默认7天</p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h4 id="4、分发Hadoop到node1、node2"><a href="#4、分发Hadoop到node1、node2" class="headerlink" title="4、分发Hadoop到node1、node2"></a>4、分发Hadoop到node1、node2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/soft/</span><br><span class="line">scp -r hadoop-2.7.6/ node1:`pwd`</span><br><span class="line">scp -r hadoop-2.7.6/ node2:`pwd`</span><br></pre></td></tr></table></figure><h4 id="5、格式化namenode（第一次启动的时候需要执行，以及每次修改核心配置文件后都需要）"><a href="#5、格式化namenode（第一次启动的时候需要执行，以及每次修改核心配置文件后都需要）" class="headerlink" title="5、格式化namenode（第一次启动的时候需要执行，以及每次修改核心配置文件后都需要）"></a>5、格式化namenode（第一次启动的时候需要执行，以及每次修改核心配置文件后都需要）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/24/tQ9ZOuvozXcPIB2.png" alt="image.png"></p><h4 id="6、启动Hadoop集群"><a href="#6、启动Hadoop集群" class="headerlink" title="6、启动Hadoop集群"></a>6、启动Hadoop集群</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><h4 id="7、检查master、node1、node2上的进程"><a href="#7、检查master、node1、node2上的进程" class="headerlink" title="7、检查master、node1、node2上的进程"></a>7、检查master、node1、node2上的进程</h4><ul><li><p>master：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master soft]# jps</span><br><span class="line">2597 NameNode</span><br><span class="line">2793 SecondaryNameNode</span><br><span class="line">2953 ResourceManager</span><br><span class="line">3215 Jps</span><br></pre></td></tr></table></figure></li><li><p>node1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 jdk1.8.0_171]# jps</span><br><span class="line">11361 DataNode</span><br><span class="line">11459 NodeManager</span><br><span class="line">11559 Jps</span><br></pre></td></tr></table></figure></li><li><p>node2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# jps</span><br><span class="line">11384 DataNode</span><br><span class="line">11482 NodeManager</span><br><span class="line">11582 Jps</span><br></pre></td></tr></table></figure></li></ul><h4 id="8、访问HDFS的WEB界面"><a href="#8、访问HDFS的WEB界面" class="headerlink" title="8、访问HDFS的WEB界面"></a>8、访问HDFS的WEB界面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:50070</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/24/7MHt8o3gIjN2rBn.png" alt="image.png"></p><h4 id="9、访问YARN的WEB界面"><a href="#9、访问YARN的WEB界面" class="headerlink" title="9、访问YARN的WEB界面"></a>9、访问YARN的WEB界面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:8088</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/24/6bOFBZ7GKSyxYEU.png" alt="image.png"></p><h3 id="强制格式化集群（遇到问题的简单暴力的方法）"><a href="#强制格式化集群（遇到问题的简单暴力的方法）" class="headerlink" title="强制格式化集群（遇到问题的简单暴力的方法）"></a>强制格式化集群（遇到问题的简单暴力的方法）</h3><blockquote><p>1、停止正在运行的集群</p><p>​    <strong>stop-all.sh</strong></p><p>2、删除所有节点hadoop根目录中的tmp文件夹</p><p>3、在主节点（master）中hadoop的根目录中的bin目录下，重新格式化HDFS</p><p>​    <strong>.&#x2F;hdfs namenode -format</strong></p><p>4、启动集群</p><p>​    <strong>start-all.sh</strong></p></blockquote>]]></content>
    
    
    <summary type="html">对学习Hadoop的一些知识笔记</summary>
    
    
    
    <category term="大数据" scheme="http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="http://example.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据库</title>
    <link href="http://example.com/2022/05/22/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2022/05/22/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-05-21T16:00:00.000Z</published>
    <updated>2022-05-23T06:35:18.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-NoSQL的引言"><a href="#1-NoSQL的引言" class="headerlink" title="1.  NoSQL的引言"></a>1.  NoSQL的引言</h3><p><strong>NoSQL</strong>(<code> Not Only SQL</code> )，意即<strong>不仅仅是SQL</strong>, 泛指非关系型的数据库。Nosql这个技术门类,早期就有人提出,发展至2009年趋势越发高涨。</p><h3 id="2-为什么是NoSQL"><a href="#2-为什么是NoSQL" class="headerlink" title="2. 为什么是NoSQL"></a>2. 为什么是NoSQL</h3><p>随着互联网网站的兴起，传统的关系数据库在应付动态网站，特别是超大规模和高并发的纯动态网站已经显得力不从心，暴露了很多难以克服的问题。如<code>商城网站中对商品数据频繁查询</code>、<code>对热搜商品的排行统计</code>、<code>订单超时问题</code>、以及微信朋友圈（音频，视频）存储等相关使用传统的关系型数据库实现就显得非常复杂，虽然能实现相应功能但是在性能上却不是那么乐观。nosql这个技术门类的出现，更好的解决了这些问题，它告诉了世界不仅仅是sql。</p><h3 id="3-NoSQL的四大分类"><a href="#3-NoSQL的四大分类" class="headerlink" title="3. NoSQL的四大分类"></a>3. NoSQL的四大分类</h3><h4 id="3-1键值-Key-Value-存储数据库"><a href="#3-1键值-Key-Value-存储数据库" class="headerlink" title="3.1键值(Key-Value)存储数据库"></a>3.1键值(Key-Value)存储数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1.说明: </span><br><span class="line">- 这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。</span><br><span class="line"></span><br><span class="line"># 2.特点</span><br><span class="line">- Key/value模型对于IT系统来说的优势在于简单、易部署。  </span><br><span class="line">- 但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。</span><br><span class="line"></span><br><span class="line"># 3.相关产品</span><br><span class="line">- Tokyo Cabinet/Tyrant,</span><br><span class="line">- Redis  基于内存的    运行软件---&gt;磁盘---&gt;内存中</span><br><span class="line">- SSDB   基于磁盘的    直接与磁盘做交互--&gt; IO</span><br><span class="line">- Voldemort </span><br><span class="line">- Oracle BDB</span><br></pre></td></tr></table></figure><h4 id="3-2列存储数据库-gt-Hbase"><a href="#3-2列存储数据库-gt-Hbase" class="headerlink" title="3.2列存储数据库-&gt;Hbase"></a>3.2列存储数据库-&gt;Hbase</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.说明- 这部分数据库通常是用来应对分布式存储的海量数据。</span><br><span class="line">2.特点- 键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。列簇- rowkey</span><br><span class="line">3.相关产品- Cassandra、`HBase`、Riak.</span><br></pre></td></tr></table></figure><h4 id="3-3文档型数据库"><a href="#3-3文档型数据库" class="headerlink" title="3.3文档型数据库"></a>3.3文档型数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1.说明</span><br><span class="line">- 文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高</span><br><span class="line">&#123;&#x27;id&#x27;:1001,&#x27;name&#x27;:xiaohu&#125;</span><br><span class="line">&#123;&#x27;id&#x27;:1001,&#x27;name&#x27;:&#x27;xiaohu2,&#x27;address&#x27;:&#x27;anhuihefei&#x27;,&#x27;likes&#x27;:[&#x27;play&#x27;,&#x27;eat&#x27;],&#x27;study&#x27;:&#123;&#x27;yuyan&#x27;:java,&#x27;ruanjian&#x27;:&#x27;mysql&#x27;&#125;&#125;</span><br><span class="line">文档数据库对于单条数据来说，他的事务支持并没有那么强大</span><br><span class="line">目前的mongodb5，支持了单条数据的事务，但是多条不行</span><br><span class="line"></span><br><span class="line"># 2.特点</span><br><span class="line">- 以文档形式存储</span><br><span class="line"></span><br><span class="line"># 3.相关产品</span><br><span class="line">- MongoDB、CouchDB、 MongoDb(4.x). 国内也有文档型数据库SequoiaDB，已经开源。</span><br></pre></td></tr></table></figure><h4 id="3-4图形-Graph-数据库"><a href="#3-4图形-Graph-数据库" class="headerlink" title="3.4图形(Graph)数据库"></a>3.4图形(Graph)数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1.说明</span><br><span class="line">- 图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。</span><br><span class="line"></span><br><span class="line"># 2.特点</span><br><span class="line">- NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。</span><br><span class="line"></span><br><span class="line"># 3.相关产品</span><br><span class="line">- Neo4J、InfoGrid、 Infinite Graph</span><br></pre></td></tr></table></figure><h3 id="4-NoSQL应用场景"><a href="#4-NoSQL应用场景" class="headerlink" title="4.NoSQL应用场景"></a>4.NoSQL应用场景</h3><p>数据模型比较简单 </p><p>需要灵活性更强的IT系统 </p><p>对数据库性能要求较高</p><p>不需要高度的数据一致性（NoSQL数据库对事物的支持不是很好）</p><h3 id="5-什么是Redis"><a href="#5-什么是Redis" class="headerlink" title="5.什么是Redis"></a>5.什么是Redis</h3><p>redis是一个内存型的数据库，开源遵循BSD基于内存数据存储被用于作为数据库缓存消息中间件 </p><h3 id="6-Redis特点"><a href="#6-Redis特点" class="headerlink" title="6.Redis特点"></a>6.Redis特点</h3><p>Redis是一个高性能Key-Value内存型数据库在redis中，所有的数据形式都是以键值对的方式来存储的</p><p>redis支持丰富的数据类型string，list，set，sorted set 其中指的是键值对中的值的类型</p><p>redis支持持久化（将数据落盘）</p><p>redis单线程，单进程    由于是单进程和单进程的，所以它是线程安全的，在java中的多线程安全在分布式中不起作用，当时只针对一个JVM有效。</p><h3 id="7-Redis数据库相关指令"><a href="#7-Redis数据库相关指令" class="headerlink" title="7.Redis数据库相关指令"></a>7.Redis数据库相关指令</h3><h4 id="7-1数据库操作指令"><a href="#7-1数据库操作指令" class="headerlink" title="7.1数据库操作指令"></a>7.1数据库操作指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1.Redis中库说明</span><br><span class="line">- 使用redis的默认配置器动redis服务后,默认会存在16个库,编号从0-15 配置问价中有个database相关的</span><br><span class="line">- 可以使用select 库的编号 来选择一个redis的库</span><br><span class="line"></span><br><span class="line"># 2.Redis中操作库的指令</span><br><span class="line">- 清空当前的库  FLUSHDB</span><br><span class="line">- 清空全部的库  FLUSHALL</span><br><span class="line"></span><br><span class="line"># 3.redis客户端显示中文</span><br><span class="line">-./redis-cli  -p 7000 --raw</span><br></pre></td></tr></table></figure><h4 id="7-2操作key相关指令"><a href="#7-2操作key相关指令" class="headerlink" title="7.2操作key相关指令"></a>7.2操作key相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># 1.DEL指令</span><br><span class="line">- 语法 :  DEL key [key ...] </span><br><span class="line">- 作用 :  删除给定的一个或多个key 。不存在的key 会被忽略。多个key之间使用空格隔开</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值： 被删除key 的数量。 </span><br><span class="line"></span><br><span class="line"># 2.EXISTS指令</span><br><span class="line">- 语法:  EXISTS key</span><br><span class="line">- 作用:  检查给定key 是否存在。多个key之间使用空格隔开，只要有一个key存在，返回值就是1</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值： 若key 存在，返回1 ，否则返回0。 </span><br><span class="line"></span><br><span class="line"># 3.EXPIRE</span><br><span class="line">- 语法:  EXPIRE key seconds</span><br><span class="line">- 作用:  为给定key 设置生存时间，当key 过期时(生存时间为0 )，它会被自动删除。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 时间复杂度： O(1)</span><br><span class="line">- 返回值：设置成功返回1 。</span><br><span class="line"></span><br><span class="line"># 4.KEYS</span><br><span class="line">- 语法 :  KEYS pattern</span><br><span class="line">- 作用 :  查找所有符合给定模式pattern 的key 。</span><br><span class="line">- 语法:</span><br><span class="line">KEYS * 匹配数据库中所有key 。</span><br><span class="line">KEYS h?llo 匹配hello ，hallo 和hxllo 等。</span><br><span class="line">KEYS h*llo 匹配hllo 和heeeeello 等。</span><br><span class="line">KEYS h[ae]llo 匹配hello 和hallo ，但不匹配hillo 。特殊符号用 &quot;\&quot; 隔开</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值： 符合给定模式的key 列表。</span><br><span class="line"></span><br><span class="line"># 5.MOVE</span><br><span class="line">- 语法 :  MOVE key db  （move name 1----将name键移动到1号库）</span><br><span class="line">- 作用 :  将当前数据库的key 移动到给定的数据库db 当中。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值： 移动成功返回1 ，失败则返回0 。</span><br><span class="line"></span><br><span class="line"># 6.PEXPIRE</span><br><span class="line">- 语法 :  PEXPIRE key milliseconds</span><br><span class="line">- 作用 :  这个命令和EXPIRE 命令的作用类似，但是它以毫秒为单位设置key 的生存时间，而不像EXPIRE 命令那样，以秒为单位。</span><br><span class="line">- 可用版本： &gt;= 2.6.0</span><br><span class="line">- 时间复杂度： O(1)</span><br><span class="line">- 返回值：设置成功，返回1  key 不存在或设置失败，返回0</span><br><span class="line"></span><br><span class="line"># 7.PEXPIREAT</span><br><span class="line">- 语法 :  PEXPIREAT key milliseconds-timestamp</span><br><span class="line">- 作用 :  这个命令和EXPIREAT 命令类似，但它以毫秒为单位设置key 的过期unix 时间戳，而不是像EXPIREAT那样，以秒为单位。</span><br><span class="line">- 可用版本： &gt;= 2.6.0</span><br><span class="line">- 返回值：如果生存时间设置成功，返回1 。当key 不存在或没办法设置生存时间时，返回0 。(查看EXPIRE 命令获取更多信息)</span><br><span class="line"></span><br><span class="line"># 8.TTL</span><br><span class="line">- 语法 :   TTL key</span><br><span class="line">- 作用 :   以秒为单位，返回给定key 的剩余生存时间(TTL, time to live)。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值：</span><br><span class="line">当key 不存在时，返回-2 。</span><br><span class="line">当key 存在但没有设置剩余生存时间时，返回-1 。</span><br><span class="line">否则，以秒为单位，返回key 的剩余生存时间。</span><br><span class="line">- Note : 在Redis 2.8 以前，当key 不存在，或者key 没有设置剩余生存时间时，命令都返回-1 。</span><br><span class="line"></span><br><span class="line"># 9.PTTL</span><br><span class="line">- 语法 :  PTTL key</span><br><span class="line">- 作用 :  这个命令类似于TTL 命令，但它以毫秒为单位返回key 的剩余生存时间，而不是像TTL 命令那样，以秒为单位。</span><br><span class="line">- 可用版本： &gt;= 2.6.0</span><br><span class="line">- 返回值： 当key 不存在时，返回-2 。当key 存在但没有设置剩余生存时间时，返回-1 。</span><br><span class="line">- 否则，以毫秒为单位，返回key 的剩余生存时间。</span><br><span class="line">- 注意 : 在Redis 2.8 以前，当key 不存在，或者key 没有设置剩余生存时间时，命令都返回-1 。</span><br><span class="line"></span><br><span class="line"># 10.RANDOMKEY</span><br><span class="line">- 语法 :  RANDOMKEY</span><br><span class="line">- 作用 :  从当前数据库中随机返回(不删除) 一个key 。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值：当数据库不为空时，返回一个key 。当数据库为空时，返回nil 。</span><br><span class="line"></span><br><span class="line"># 11.RENAME</span><br><span class="line">- 语法 :  RENAME key newkey</span><br><span class="line">- 作用 :  将key 改名为newkey 。当key 和newkey 相同，或者key 不存在时，返回一个错误。当newkey 已经存在时，RENAME 命令将覆盖旧值。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值： 改名成功时提示OK ，失败时候返回一个错误。</span><br><span class="line"></span><br><span class="line"># 12.TYPE</span><br><span class="line">- 语法 :  TYPE key</span><br><span class="line">- 作用 :  返回key 所储存的值的类型。</span><br><span class="line">- 可用版本： &gt;= 1.0.0</span><br><span class="line">- 返回值：</span><br><span class="line">none (key 不存在)</span><br><span class="line">string (字符串)</span><br><span class="line">list (列表)</span><br><span class="line">set (集合)</span><br><span class="line">zset (有序集)</span><br><span class="line">hash (哈希表)</span><br></pre></td></tr></table></figure><h4 id="7-3-String类型"><a href="#7-3-String类型" class="headerlink" title="7.3 String类型"></a>7.3 String类型</h4><p><img src="https://s2.loli.net/2022/05/18/q9nKXHYv7iJgRDT.png"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>set</td><td>设置一个key&#x2F;value</td></tr><tr><td>get</td><td>根据key获得对应的value</td></tr><tr><td>mset</td><td>一次设置多个key value</td></tr><tr><td>mget</td><td>一次获得多个key的value</td></tr><tr><td>getset</td><td>获得原始key的值，同时设置新值</td></tr><tr><td>strlen</td><td>获得对应key存储value的长度</td></tr><tr><td>append</td><td>为对应key的value追加内容</td></tr><tr><td>getrange 索引0开始</td><td>截取value的内容    到末尾-1</td></tr><tr><td>setex</td><td>设置一个key存活的有效期（秒）</td></tr><tr><td>psetex</td><td>设置一个key存活的有效期（毫秒）</td></tr><tr><td>setnx</td><td>存在不做任何操作,不存在添加</td></tr><tr><td>msetnx原子操作(只要有一个存在不做任何操作)</td><td>可以同时设置多个key,只有有一个存在都不保存</td></tr><tr><td>decr</td><td>进行数值类型的-1操作</td></tr><tr><td>decrby</td><td>根据提供的数据进行减法操作</td></tr><tr><td>Incr</td><td>进行数值类型的+1操作</td></tr><tr><td>incrby</td><td>根据提供的数据进行加法操作</td></tr><tr><td>Incrbyfloat</td><td>根据提供的数据加入浮点数（不是四舍五入）</td></tr></tbody></table><h4 id="7-4-List类型"><a href="#7-4-List类型" class="headerlink" title="7.4 List类型"></a>7.4 List类型</h4><blockquote><p>list 列表 相当于java中list 集合  特点  元素有序  且 可以重复，key还是一个字符串，值是一个list</p></blockquote><p><img src="https://s2.loli.net/2022/05/18/g3awqjvZztbsJpr.png" alt="image-20200623161114380"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>lpush</td><td>将某个值加入到一个key列表头部  lpush list xiaohu xiaohei xiaoming    当列表不存在的时候会进行创建</td></tr><tr><td>lpushx</td><td>同lpush,但是必须要保证这个key存在  必须在列表进行存在的情况下从左插入</td></tr><tr><td>rpush</td><td>将某个值加入到一个key列表末尾</td></tr><tr><td>rpushx</td><td>同rpush,但是必须要保证这个key存在</td></tr><tr><td>lpop</td><td>返回和移除列表左边的第一个元素</td></tr><tr><td>rpop</td><td>返回和移除列表右边的第一个元素</td></tr><tr><td>lrange</td><td>获取某一个下标区间内的元素   lrange list 0 -1</td></tr><tr><td>llen</td><td>获取列表元素个数</td></tr><tr><td>lset</td><td>设置某一个指定索引的值(索引必须存在)</td></tr><tr><td>lindex</td><td>获取某一个指定索引位置的元素</td></tr><tr><td>lrem</td><td>删除重复元素</td></tr><tr><td>ltrim</td><td>保留列表中特定区间内的元素</td></tr><tr><td>linsert</td><td>在某一个元素之前，之后插入新元素</td></tr></tbody></table><h4 id="7-5-Set类型"><a href="#7-5-Set类型" class="headerlink" title="7.5 Set类型"></a>7.5 Set类型</h4><blockquote><p>特点: Set类型 Set集合 元素无序  不可以重复</p></blockquote><p><img src="https://s2.loli.net/2022/05/18/bIPlvO4NeKDwndE.png" alt="image-20200623193634316"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>sadd</td><td>为集合添加元素</td></tr><tr><td>smembers</td><td>显示集合中所有元素 无序</td></tr><tr><td>scard</td><td>返回集合中元素的个数</td></tr><tr><td>spop</td><td>随机返回一个元素 并将元素在集合中删除</td></tr><tr><td>smove</td><td>从一个集合中向另一个集合移动元素  必须是同一种类型</td></tr><tr><td>srem</td><td>从集合中删除一个元素</td></tr><tr><td>sismember</td><td>判断一个集合中是否含有这个元素</td></tr><tr><td>srandmember</td><td>随机返回元素   后面可以加数字 表示每次返回的个数</td></tr><tr><td>sdiff</td><td>去掉第一个集合中其它集合含有的相同元素</td></tr><tr><td>sinter</td><td>求交集</td></tr><tr><td>sunion</td><td>求和集</td></tr></tbody></table><h4 id="7-6-ZSet类型"><a href="#7-6-ZSet类型" class="headerlink" title="7.6 ZSet类型"></a>7.6 ZSet类型</h4><p><img src="https://s2.loli.net/2022/05/18/MyIESsQJzqaoh2K.png" alt="image-20200623194903967"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>zadd</td><td>添加一个有序集合元素     zadd zset 2 xiaohu 3 xiaohu2</td></tr><tr><td>zcard</td><td>返回集合的元素个数</td></tr><tr><td>zrange 升序 zrevrange 降序</td><td>返回一个范围内的元素       如果想看看分数 withscores</td></tr><tr><td>zrangebyscore</td><td>按照分数查找一个范围内的元素  zrangebyscore zset 0 20 withscores limit 0 2</td></tr><tr><td>zrank</td><td>返回排名</td></tr><tr><td>zrevrank</td><td>倒序排名</td></tr><tr><td>zscore</td><td>显示某一个元素的分数</td></tr><tr><td>zrem</td><td>移除某一个元素</td></tr><tr><td>zincrby</td><td>给某个特定元素加分</td></tr></tbody></table><h4 id="7-7-hash类型"><a href="#7-7-hash类型" class="headerlink" title="7.7 hash类型"></a>7.7 hash类型</h4><p><img src="https://s2.loli.net/2022/05/18/7Ga5zsBAPJCfSqh.png" alt="image-20220511234124908"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>hset</td><td>设置一个key&#x2F;value对</td></tr><tr><td>hget</td><td>获得一个key对应的value</td></tr><tr><td>hgetall</td><td>获得所有的key&#x2F;value对</td></tr><tr><td>hdel</td><td>删除某一个key&#x2F;value对</td></tr><tr><td>hexists</td><td>判断一个key是否存在</td></tr><tr><td>hkeys</td><td>获得所有的key</td></tr><tr><td>hvals</td><td>获得所有的value</td></tr><tr><td>hmset</td><td>设置多个key&#x2F;value</td></tr><tr><td>hmget</td><td>获得多个key的value</td></tr><tr><td>hsetnx</td><td>设置一个不存在的key的值</td></tr><tr><td>hincrby</td><td>为value进行加法运算</td></tr><tr><td>hincrbyfloat</td><td>为value加入浮点值</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">对学习Redis的一些知识笔记</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="http://example.com/2022/05/21/Redis%E4%BD%8D%E5%9B%BE/"/>
    <id>http://example.com/2022/05/21/Redis%E4%BD%8D%E5%9B%BE/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-05-23T06:34:58.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h2><p>零存零取，整存零取，整存整存</p><h3 id="1-bitmap介绍"><a href="#1-bitmap介绍" class="headerlink" title="1.bitmap介绍"></a>1.bitmap介绍</h3><p>位图不是真正的数据类型,它是定义在字符串类型中,一个字符串类型的值最多能存储512mb字节的内容位上限: 2^(9(512)+10(1024)+10(1024)+3(8b&#x3D;1B))&#x3D;2^32b</p><h3 id="2-setbit设置某一位上的值"><a href="#2-setbit设置某一位上的值" class="headerlink" title="2.setbit设置某一位上的值"></a>2.setbit<strong>设置某一位上的值</strong></h3><p>语法：SETBIT key offset value （offset位偏移量，从0开始）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7000&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7000&gt; setbit k1 1 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:7000&gt; get k1</span><br><span class="line">@</span><br><span class="line">127.0.0.1:7000&gt; setbit k1 7 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:7000&gt; get k1</span><br><span class="line">A</span><br><span class="line">127.0.0.1:7000&gt; setbit k1 7 2</span><br><span class="line">ERR bit is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对学习Redis的一些知识笔记</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程</title>
    <link href="http://example.com/2022/05/21/Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/05/21/Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-05-23T06:40:37.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h3 id="1-1-Shell名词解释"><a href="#1-1-Shell名词解释" class="headerlink" title="1.1 Shell名词解释"></a>1.1 Shell名词解释</h3><p>• Kernel</p><p>​        Linux内核主要是为了和硬件打交道</p><p>• Shell</p><p>​        命令器(command interpreter)</p><p>​        Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言， 又是一种程序设计语言.</p><p>​        Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作集作系统内核的服务。</p><p>• shell两大主流：</p><p>​        sh:</p><p>​            ■ Bourne shell（sh） ,Solaris,hpux默认shell</p><p>​            ■ Bourne again shell（bash） ,Linux系统默认shell</p><p>​        bash:</p><p>​            ■ C shell(csh)</p><p>​            ■ tc shell(tcsh)</p><p>• #!声明</p><p>告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello world!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Shell本的执行"><a href="#1-2-Shell本的执行" class="headerlink" title="1.2 Shell本的执行"></a>1.2 Shell本的执行</h3><p>• 输入脚本的绝对路径或相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/root/helloworld.sh</span><br><span class="line"></span><br><span class="line">./helloworld.sh</span><br><span class="line"></span><br><span class="line">注意：执行的必须是一个可执行文件</span><br></pre></td></tr></table></figure><p>• bash或sh +脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh helloworld.sh</span><br><span class="line"></span><br><span class="line">注意：当脚本没有X权限时，root和文件所有者通过该方式可以正常执行</span><br></pre></td></tr></table></figure><p>•在脚本的路径前再加”或source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source helloworld.sh</span><br></pre></td></tr></table></figure><p>查看当前正在执行的进程：ps -ef</p><p>•区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一种和第二种会新开一个bash,不同bash中的变量无法共享。</span><br><span class="line"></span><br><span class="line">第三种是在同一个shell里面执行的</span><br></pre></td></tr></table></figure><p>•export :可以将当前进程的变量传递给子进程去使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将来配置profile的时候所有的变量前必须加export</span><br></pre></td></tr></table></figure><h1 id="2-Shell基础入门"><a href="#2-Shell基础入门" class="headerlink" title="2. Shell基础入门"></a>2. Shell基础入门</h1><h3 id="2-1-shell变量"><a href="#2-1-shell变量" class="headerlink" title="2.1. shell变量"></a>2.1. shell变量</h3><p>定义变量时，变量名不加美元符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</span><br><span class="line"></span><br><span class="line">​中间不能有空格，可以使用下划线（_）。</span><br><span class="line"></span><br><span class="line">​不能使用标点符号。</span><br><span class="line"></span><br><span class="line">​不能使用bash里的关键字（可用help命令查看保留关键字）</span><br></pre></td></tr></table></figure><p>变量的类型</p><p>​    局部变量</p><p>​        局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><p>​    环境变量</p><p>​        所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。</p><p>​    Shell变量</p><p>​        shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量</p><p>(时间同步 ntpdate cn.ntp.org.cn)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量的声明</span></span><br><span class="line">name=<span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> /etc` </span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(<span class="built_in">ls</span> /etc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量的调用 (推荐不省略大括号)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># x /bin/sh: NAME: This variable is read only. </span></span><br><span class="line">url=<span class="string">&quot;https://www.google.com&quot;</span> </span><br><span class="line"><span class="built_in">readonly</span> url </span><br><span class="line">url=<span class="string">&quot;https://www.runoob.com&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除变量 </span></span><br><span class="line"><span class="built_in">unset</span> name</span><br></pre></td></tr></table></figure><h3 id="2-2-Shell的字符串"><a href="#2-2-Shell的字符串" class="headerlink" title="2.2. Shell的字符串"></a>2.2. Shell的字符串</h3><p>字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号</p><p>​    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p><p>​    单引号字串中不能出现单独一个的单引号，但可成对出现，作为字符串拼接使用。</p><p>双引号</p><p>​    双引号里可以有变量</p><p>​    双引号里可以出现转义字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明字符串 </span></span><br><span class="line">str1=<span class="string">&quot;hello world 1&quot;</span> </span><br><span class="line">str2=<span class="string">&#x27;hello world 2&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接--双引号 </span></span><br><span class="line">name=<span class="string">&#x27;sunwukong&#x27;</span> </span><br><span class="line">name1=<span class="string">&quot;hello, &quot;</span><span class="variable">$name</span><span class="string">&quot; !&quot;</span> </span><br><span class="line">name2=<span class="string">&quot;hello, <span class="variable">$&#123;name&#125;</span> !&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接--单引号 </span></span><br><span class="line">passwd=<span class="string">&#x27;123456&#x27;</span> </span><br><span class="line">passwd1=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$passwd</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">passwd2=<span class="string">&#x27;hello, $&#123;passwd&#125; !&#x27;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd2</span> <span class="comment"># hello, $&#123;passwd&#125; ! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的长度 </span></span><br><span class="line">email=<span class="string">&quot;123456@qq.com&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#email&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;email:1:4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Shell数组（尾对象）伪数组"><a href="#2-3-Shell数组（尾对象）伪数组" class="headerlink" title="2.3  Shell数组（尾对象）伪数组"></a>2.3  Shell数组（尾对象）伪数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义数组 括号来表示数组，数组元素用&quot;空格&quot;符号分割开 </span></span><br><span class="line">数组名=(值1 值2 ... 值n) </span><br><span class="line">favs=(<span class="string">&quot;足球&quot;</span> <span class="string">&quot;蓝球&quot;</span> <span class="string">&quot;乒乓球&quot;</span> <span class="string">&quot;保龄球&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组 $&#123;数组名[下标]&#125; </span></span><br><span class="line">fav=<span class="variable">$&#123;favs[1]&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 @ 符号可以获取数组中的所有元素 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;favs[@]&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的长度 </span></span><br><span class="line">length1=<span class="variable">$&#123;#favs[@]&#125;</span> </span><br><span class="line">length2=<span class="variable">$&#123;#favs[*]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Shell的注释"><a href="#2-4-Shell的注释" class="headerlink" title="2.4  Shell的注释"></a>2.4  Shell的注释</h3><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------- </span></span><br><span class="line"><span class="comment"># 这是一个注释 </span></span><br><span class="line"><span class="comment"># author： </span></span><br><span class="line"><span class="comment"># site： </span></span><br><span class="line"><span class="comment">#-------------------------------------------- </span></span><br><span class="line"><span class="comment">##### 服务器配置-start #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">##### 服务器配置-end ##### </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊的多行注释 </span></span><br><span class="line"><span class="comment"># end of file</span></span><br><span class="line">:&lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">注释内容... </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;! </span><br><span class="line">注释内容... </span><br><span class="line">注释内容... </span><br><span class="line">注释内容... </span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="2-5-Shell参数传递"><a href="#2-5-Shell参数传递" class="headerlink" title="2.5  Shell参数传递"></a>2.5  Shell参数传递</h3><p>执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字</p><table><thead><tr><th><strong>参数处理</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr><tr><td>$0</td><td>执行的文件名</td></tr></tbody></table> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># ./hello.sh 11 22 33 44</span></span><br></pre></td></tr></table></figure><h1 id="3-Shell高级进阶"><a href="#3-Shell高级进阶" class="headerlink" title="3  Shell高级进阶"></a>3  Shell高级进阶</h1><h3 id="3-1-Shell运算符"><a href="#3-1-Shell运算符" class="headerlink" title="3.1 Shell运算符"></a>3.1 Shell运算符</h3><p>运算符的分类</p><p>​    算数运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>‘expr $a + $b’ 为 30。</td></tr><tr><td>-</td><td>减法</td><td>‘expr $a-$b’结果为-10。</td></tr><tr><td>*</td><td>乘法</td><td>‘expr $a * $b’ 结果为 200。</td></tr><tr><td>&#x2F;</td><td>除法</td><td>‘expr$b&#x2F;$a’结果为2。</td></tr><tr><td>%</td><td>取余</td><td>‘expr $b % $a’ 结果为0。</td></tr><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;$b将把变量b的值赋给a</td></tr><tr><td>&#x3D;&#x3D;</td><td>相等，用于比较两个数字，相同返回true</td><td>[$a &#x3D;&#x3D; $b]返回false。</td></tr><tr><td>!&#x3D;</td><td>不相等,用于比较两个数字，不相同返回true</td><td>[$a !&#x3D; $b]返回true。</td></tr></tbody></table><p>​    关系运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回true</td><td>[$a -eq $b ]返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回true</td><td>[$a -ne $b ]返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，返回true</td><td>[$a -gt $b ]返回 false.</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，返回true</td><td>[$a -It $b ]返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，返回true</td><td>[$a -ge $b ]返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，返回true</td><td>[$a -le $b ]返回 true.</td></tr></tbody></table><p>​    布尔运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>！</td><td>非运算，表达式为true则返回false,否则退回true。</td><td>[! false ]返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为true则返回true。</td><td>[$a -It 20 -o $b -gt100 ]返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为true才返回true.</td><td>[$a -It 20 -a $b -gt100 J 返回 false。</td></tr></tbody></table><p>​    字符串运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的AND</td><td>[[$a -It 100 &amp;&amp; $b-gt 100 ]]返回 false</td></tr><tr><td>||</td><td>逻辑的OR</td><td>[[$a -It 100 || $b -gt 100 ]]返回 true</td></tr></tbody></table><p>​    文件测试运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>检测两个字符串是否相等，相等返回true。</td><td>[$a &#x3D; $b ]返回 false。</td></tr><tr><td>!&#x3D;</td><td>检测两个字符串是否相等，不相等返回true。</td><td>[$a !&#x3D; $b ]返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0,为0返回true。</td><td>[-z $a ]返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为不为0返回true。</td><td>[n “$a”]返回 true.</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回trueo</td><td>[$a]返回 true.</td></tr></tbody></table><h4 id="3-1-1-算数运算符"><a href="#3-1-1-算数运算符" class="headerlink" title="3.1.1 算数运算符"></a>3.1.1 算数运算符</h4><p> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a - b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a * b : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> / <span class="variable">$a</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b / a : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> % <span class="variable">$a</span>` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b % a : <span class="variable">$val</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-关系运算符"><a href="#3-1-2-关系运算符" class="headerlink" title="3.1.2 关系运算符"></a>3.1.2 关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 大于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 不大于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 小于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 不小于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 大于或等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 小于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3布尔运算符"><a href="#3-1-3布尔运算符" class="headerlink" title="3.1.3布尔运算符"></a>3.1.3布尔运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> == <span class="variable">$b</span>: a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-4-逻辑运算符"><a href="#3-1-4-逻辑运算符" class="headerlink" title="3.1.4 逻辑运算符"></a>3.1.4 逻辑运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=10 </span><br><span class="line">b=20 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span> elseecho <span class="string">&quot;返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span> elseecho <span class="string">&quot;返回 false&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-5-字符串运算符"><a href="#3-1-5-字符串运算符" class="headerlink" title="3.1.5 字符串运算符"></a>3.1.5 字符串运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span> </span><br><span class="line">b=<span class="string">&quot;efg&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度不为 0&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$a</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度不为 0&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度为 0&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串不为空&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串为空&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-1-6-文件测试运算符"><a href="#3-1-6-文件测试运算符" class="headerlink" title="3.1.6 文件测试运算符"></a>3.1.6 文件测试运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">file=<span class="string">&quot;/var/node/test.sh&quot;</span> </span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可读&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可读&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可写&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可写&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件可执行&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不可执行&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为普通文件&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为特殊文件&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件是个目录&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不是个目录&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件不为空&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件为空&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="3-2-echo打印数据"><a href="#3-2-echo打印数据" class="headerlink" title="3.2 echo打印数据"></a>3.2 echo打印数据</h4><p> Shell的echo指令用于字符串的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 显示普通字符串 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示转义字符 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello World\&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示变量 </span></span><br><span class="line">name=<span class="string">&quot;zhangsan&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示换行 </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示不换行 </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示结果定向至文件 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; myfile </span><br><span class="line"><span class="comment">## &gt; 代表覆盖</span></span><br><span class="line"><span class="comment"># &gt;&gt; 追加写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 原样输出字符串 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示命令执行结果 </span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br></pre></td></tr></table></figure><h3 id="3-4-Shell流程控制"><a href="#3-4-Shell流程控制" class="headerlink" title="3.4 Shell流程控制"></a>3.4 Shell流程控制</h3><h4 id="3-4-1-if"><a href="#3-4-1-if" class="headerlink" title="3.4.1  if"></a>3.4.1  if</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditionl</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">commandl</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a 小于 bn&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;没有符合的条件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="Shell-case语句为多选择语句。"><a href="#Shell-case语句为多选择语句。" class="headerlink" title="Shell case语句为多选择语句。"></a>Shell case语句为多选择语句。</h4><h4 id="可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。"><a href="#可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。" class="headerlink" title="可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。"></a>可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span> </span><br><span class="line">模式1)</span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN ;; </span><br><span class="line"></span><br><span class="line">模式2）</span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入 1 到 4 之间的数字:&#x27;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你输入的数字为:&#x27;</span> </span><br><span class="line"><span class="built_in">read</span> num </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span> </span><br><span class="line">1) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 1&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">2) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 2&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">3) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 3&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">4) <span class="built_in">echo</span> <span class="string">&#x27;你选择了 4&#x27;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span> </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-for"><a href="#3-4-2-for" class="headerlink" title="3.4.2 for"></a>3.4.2 for</h4><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。</p><p>命令可为田可有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">command1 </span><br><span class="line">command2 </span><br><span class="line">... </span><br><span class="line">commandN </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5 </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The value is: <span class="variable">$loop</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">&#x27;This is a string&#x27;</span> <span class="string">&#x27;hello moto&#x27;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-while循环"><a href="#3-4-3-while循环" class="headerlink" title="3.4.3 while循环"></a>3.4.3 while循环</h4><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">command</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line">int=1 </span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$int</span> </span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;int++&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限循环 </span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">command</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-4-break"><a href="#3-4-4-break" class="headerlink" title="3.4.4 break"></a>3.4.4 break</h4><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">while</span> : </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字:&quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span> </span><br><span class="line">1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span> </span><br><span class="line"><span class="built_in">break</span> </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4-5-continue"><a href="#3-4-5-continue" class="headerlink" title="3.4.5 continue"></a>3.4.5 continue</h4><p>continue命令不会跳出所有循环，仅仅跳出当前循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">while</span> : </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span> </span><br><span class="line">1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span> </span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span></span><br><span class="line">        <span class="built_in">continue</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;游戏结束&quot;</span> </span><br><span class="line">        ;; </span><br><span class="line">    <span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="3-5-Shell函数"><a href="#3-5-Shell函数" class="headerlink" title="3.5 Shell函数"></a>3.5 Shell函数</h2><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</p><p>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第一个函数------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这是我的第一个 shell 函数!&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数开始执行-----&quot;</span> </span><br><span class="line">demoFun </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数执行完毕-----&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数返回值------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第一个数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> aNum </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第二个数字: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> anotherNum  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !&quot;</span> </span><br><span class="line"><span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>)) </span><br><span class="line">&#125;</span><br><span class="line">funWithReturn </span><br><span class="line"><span class="comment"># 函数返回值在调用该函数后通过 $? 来获得。 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入的两个数字之和为 $? !&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数参数------------------------------ </span></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对学习Shell编程的一些知识笔记</summary>
    
    
    
    <category term="Shell" scheme="http://example.com/categories/Shell/"/>
    
    
    <category term="Shell编程" scheme="http://example.com/tags/Shell%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>shell中系统任务设置</title>
    <link href="http://example.com/2022/05/21/shell%E4%BB%BB%E5%8A%A1%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2022/05/21/shell%E4%BB%BB%E5%8A%A1%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2022-05-23T06:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell中系统任务设置"><a href="#shell中系统任务设置" class="headerlink" title="shell中系统任务设置"></a>shell中系统任务设置</h1><h3 id="1、系统启动流程"><a href="#1、系统启动流程" class="headerlink" title="1、系统启动流程"></a>1、系统启动流程</h3><p>启动计算机的硬件(BIOS)</p><p>​        读取时间</p><p>​        选择对应的启动模式(USB HDD EFI）</p><p>如果是Linux系统，回去找&#x2F;boot目录.引导这个系统启动</p><p>计算机系统开始启动,读取初始化配置文件</p><p>​        vim &#x2F;etc&#x2F;inittab</p><p>​        启动时控制着计算机的运行级别 runlevel</p><table><thead><tr><th>0</th><th>halt(关机)</th></tr></thead><tbody><tr><td>1</td><td>Single user mode(单用户模式)</td></tr><tr><td>2</td><td>Multiuser, without NFS(多用户模式，但是无网络状态) FS–&gt;FileSystem</td></tr><tr><td>3</td><td>Full multiuser mode(多用户完整版模式)</td></tr><tr><td>4</td><td>unused (保留模式)</td></tr><tr><td>5</td><td>X11(用户界面模式)</td></tr><tr><td>6</td><td>reboot(重启模式)</td></tr></tbody></table><p>​        id:3:initdefault: 默认runlevel为3 </p><p>​        以runlevel&#x3D;3开始启动对应的服务和组件</p><p>开始默认引导公共的组件或者服务</p><p>​        vim &#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit</p><p>开始加载对应runlevel的服务</p><p>​        vi &#x2F;etc&#x2F;rc3.d&#x2F;</p><p>​            K:关机时需要关闭的服务</p><p>​            S:启动时需要开启的服务</p><p>​            数字代表了开启或者关闭的顺序</p><p>​            所有的文件都是软链接，链接的地址为 &#x2F;etc&#x2F;init.d</p><p>当启动完毕，所有的服务也被加载完成</p><h3 id="2、系统服务"><a href="#2、系统服务" class="headerlink" title="2、系统服务"></a>2、系统服务</h3><p>​    我们可以使用chkconfig命令查看当前虚拟机的服务</p><p>​    通过查看可以得知不同的级别对应到每一个服务确定本次开机自动启动</p><p>​    开机结束后，我们需要使用service（Centos6）Systemctl(Centos7)命令控制服务的开启或者关闭</p><h3 id="3、-开机自启动服务"><a href="#3、-开机自启动服务" class="headerlink" title="3、 开机自启动服务"></a>3、 开机自启动服务</h3><h5 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h5><p>​        首先创建脚本存放的文件夹</p><p>​                mkdir -p &#x2F;usr&#x2F;local&#x2F;scripts</p><p>​        在文件夹中创建脚本文件</p><p>​                vim hello.sh</p><p>​                给予执行权限</p><p>​        去&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件中添加脚本的绝对路径</p><p>​                给予rc.local执行权限</p><p>​        创建一个文件夹</p><p>​                mkdir &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ceshitest</p><p>​        重启虚拟机</p><p>​                reboot</p><h5 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h5><p>​        创建开机自启动脚本文件</p><p>​        vim schoolntpdate.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#chkconfig: 2345 88 99 </span></span><br><span class="line"><span class="comment">#description:auto_run </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/soft/ceshitest2</span><br></pre></td></tr></table></figure><p>​        给其设置执行权限</p><p>​                chmod u+x schoolntpdate.sh</p><p>​        将脚本拷贝到 &#x2F;etc&#x2F;init.d    下</p><p>​                cp schoolntpdate.sh &#x2F;etc&#x2F;init.d&#x2F;</p><p>​        添加到服务</p><p>​                chkconfig –add &#x2F;etc&#x2F;init.d&#x2F;schoolntpdate.sh</p><p>​        重启服务器</p><p>​                reboot</p><h3 id="4、定时任务"><a href="#4、定时任务" class="headerlink" title="4、定时任务"></a>4、定时任务</h3><blockquote><p>在linux中最小时间是到分钟的</p></blockquote><p>在系统服务中心，crond负责周期任务</p><p>​        systemctl status crond.service</p><p>添加任务，编辑当前用户的任务列表</p><p>​        crontab -e</p><p>编辑任务</p><p>​        星 星 星 星 星 command</p><p>​        分 时 日 月 周 命令</p><p>​        第1列表示分钟1～59 每分钟用*或者 *&#x2F;2表示</p><p>​        第2列表示小时1～23（0表示0点）</p><p>​        第3列表示日期1～31</p><p>​        第4列表示月份1～12</p><p>​        第5列标识号星期0～6（0表示星期天）</p><p>​        第6列要运行的命令</p><p>​        *：表示任意时间都，实际上就是“每”的意思。可以代表00-23小时或者00-12每月或者00-59分</p><p>​        -：表示区间，是一个范围，00 17-19 * * * cmd，就是每天17,18,19点的整点执行命令</p><p>​        ,：是分割时段，30 3,19,21 * * * cmd，就是每天凌晨3和晚上19,21点的半点时刻执行命令</p><p>​        &#x2F;n：表示分割，可以看成除法，*&#x2F;5 * * * * cmd，每隔五分钟执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每晚的21:30重启apache。 </span><br><span class="line"></span><br><span class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache。 </span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache。 </span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 </span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache。 </span><br><span class="line"></span><br><span class="line">* */2 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">每两小时重启apache </span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache </span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">每月的4号与每周一到周三的11点重启apache </span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart </span><br><span class="line">一月一号的4点重启apache</span><br><span class="line"></span><br><span class="line">需求：每分钟要干一些事情</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--（功能描述：显示年月日时分秒） </span><br><span class="line"><span class="built_in">date</span> <span class="string">&quot;+%Y%m%d%H%M%S&quot;</span></span><br></pre></td></tr></table></figure><p>重启crontab，使配置生效</p><p>​        systemctl restart crond.service</p><p>通过crontab -l</p><p>​        查看当前的定时任务</p><p>查看任务的历史</p><p>​        vim &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</p><p>清除任务</p><p>​        crontab -r</p>]]></content>
    
    
    <summary type="html">对学习shell中系统任务设置的一些知识笔记</summary>
    
    
    
    <category term="Shell" scheme="http://example.com/categories/Shell/"/>
    
    
    <category term="shell中系统任务设置" scheme="http://example.com/tags/shell%E4%B8%AD%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="http://example.com/2022/05/20/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://example.com/2022/05/20/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2022-05-19T16:00:00.000Z</published>
    <updated>2022-05-23T06:34:45.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-持久化机制"><a href="#1-持久化机制" class="headerlink" title="1.持久化机制"></a>1.持久化机制</h3><p>Redis官方提供了两种不同的持久化方法来将内存的数据存储到硬盘里</p><p><strong>快照（Snapshot）</strong></p><p><strong>AOF（Append Only File）</strong>只追加日志文件</p><h4 id="1-1-快照（Snapshot）"><a href="#1-1-快照（Snapshot）" class="headerlink" title="1.1 快照（Snapshot）"></a>1.1 快照（Snapshot）</h4><h5 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h5><blockquote><p>这种方式可以将某一时刻的所有数据都写入硬盘中，这是Redis的默认开启持久化的方式，保存的文件时以**.rdb**后缀的文件，所以这种方式也成为RDB方式。</p></blockquote><blockquote><p>官方说法叫快照持久化</p></blockquote><p><img src="https://s2.loli.net/2022/05/18/F62H8pT9SQ5XAcy.png" alt="image-20220512214029142"></p><h5 id="2-快照生成方式"><a href="#2-快照生成方式" class="headerlink" title="2.快照生成方式"></a>2.快照生成方式</h5><blockquote><p>客户端方式：BGSAVE和SAVE指令</p></blockquote><blockquote><p>服务器配置自动触发</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、客户端方式-BGSAVE</span><br><span class="line">-客户端可以使用BGSAVE命令来创建一个快照，当接收到客户端的BGSAVE命令时，redis会调用fork来创建一个子进程，然后子进程负责将快照写入磁盘中，而父进程则继续处理命令请求</span><br><span class="line"></span><br><span class="line">名词解释：*fork*。当一个进程创建子进程的时候，底层的操作系统会创建该进程的一个副本，在类似于unix系统中创建子进程的操作会进行优化：在刚开始的时候，父子进程共享相同内存，知道父进程或子进程对内存进行了写之后，对被写入的内存才会结束服务。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/18/QLUB12mTMPFrE45.png" alt="image-20220512214729500"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、客户端方式-SAVE</span><br><span class="line">-客户端还可以使用SAVE命令来创建一个快照，接收到SAVE命令的redis服务器在快照创建完毕之前将不再响应任何其他的命令</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/18/671QPakdDzq8Hfg.png" alt="image-20220512214914633"></p><p>注意：SAVE命令并不常用，使用SAVE命令在快照创建完毕之前，redis处于阻塞状态，无法对外服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3、服务器配置-满足自动触发</span><br><span class="line">-如果用户在redis.conf中设置了save配置选项，redis会在save选项条件满足之后自动触发一次BGSAVE命令，如果设置多个save配置选项，当任意一个save配置选项条件满足，redis也会触发一次BGSAVE命令</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4、服务器接收客户端shutdown指令</span><br><span class="line">-当redis通过shutdown指令接收到关闭服务器的请求时，会执行一个save命令，阻塞所有的客户端，不再执行客户端执行发送的任何命令，并且在save命令执行完毕之后关闭服务器</span><br></pre></td></tr></table></figure><h5 id="3-配置生成快照名称和位置"><a href="#3-配置生成快照名称和位置" class="headerlink" title="3.配置生成快照名称和位置"></a>3.配置生成快照名称和位置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、修改生成快照名称</span><br><span class="line">-dbfilename dump.rbd</span><br><span class="line">2、修改生成位置</span><br><span class="line">-dir ./</span><br><span class="line"></span><br><span class="line">经过断电操作测试后，发现这个持久化并不是太好，可能会造成数据丢失问题（刚刚做完一次快照，又来一次写数据请求断电）</span><br></pre></td></tr></table></figure><h4 id="1-2-AOF只追加日志文件"><a href="#1-2-AOF只追加日志文件" class="headerlink" title="1.2 AOF只追加日志文件"></a>1.2 AOF只追加日志文件</h4><h5 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h5><p>这种方式可以将所有客户端执行的<strong>写命令</strong>记录到日志文件中，AOF持久化会被执行的写命令写到AOF的文件末尾，以此来记录数据发生的变化，因此只要redis从头到尾执行一次AOF文件所包含的所有写命令，就可以恢复AOF文件的记录的数据集</p><p><img src="https://s2.loli.net/2022/05/18/yJIqWEfzsv3Kajp.png"></p><h5 id="2-开启AOF持久化"><a href="#2-开启AOF持久化" class="headerlink" title="2.开启AOF持久化"></a>2.开启AOF持久化</h5><p>在开启redis的默认配置中AOF持久化机制是没有开启的，需要在配置中开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、开启AOF持久化</span><br><span class="line">-修改 appendonly yes 开启持久化</span><br><span class="line">-修改 appendfilename &quot;appendonly.aof&quot; 指定生成文件名称</span><br></pre></td></tr></table></figure><h5 id="3-日志追加频率"><a href="#3-日志追加频率" class="headerlink" title="3.日志追加频率"></a>3.日志追加频率</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1.always 【谨慎使用】</span><br><span class="line">- 说明: 每个redis写命令都要同步写入硬盘,严重降低redis速度</span><br><span class="line">- 解释: 如果用户使用了always选项,那么每个redis写命令都会被写入硬盘,从而将发生系统崩溃时出现的数据丢失减到最少;遗憾的是,因为这种同步策略需要对硬盘进行大量的写入操作,所以redis处理命令的速度会受到硬盘性能的限制;</span><br><span class="line">- 注意: 转盘式硬盘在这种频率下200左右个命令/s ; 固态硬盘(SSD) 几百万个命令/s;</span><br><span class="line">- 警告: 使用SSD用户请谨慎使用always选项,这种模式不断写入少量数据的做法有可能会引发严重的`写入放大`问题,导致将固态硬盘的寿命从原来的几年降低为几个月。</span><br><span class="line"></span><br><span class="line"># 2.everysec 【推荐默认】</span><br><span class="line">- 说明: 每秒执行一次同步显式的将多个写命令同步到磁盘</span><br><span class="line">- 解释： 为了兼顾数据安全和写入性能,用户可以考虑使用everysec选项,让redis每秒一次的频率对AOF文件进行同步;redis每秒同步一次AOF文件时性能和不使用任何持久化特性时的性能相差无几,而通过每秒同步一次AOF文件,redis可以保证,即使系统崩溃,用户最多丢失一秒之内产生的数据。 </span><br><span class="line"></span><br><span class="line"># 3.no【不推荐】</span><br><span class="line">- 说明: 由操作系统决定何时同步 </span><br><span class="line">- 解释：最后使用no选项,将完全有操作系统决定什么时候同步AOF日志文件,这个选项不会对redis性能带来影响但是系统崩溃时,会丢失不定数量的数据,甚至丢失全部数据，另外如果用户硬盘处理写入操作不够快的话,当缓冲区被等待写入硬盘数据填满时,redis会处于阻塞状态,并导致redis的处理命令请求的速度变慢。</span><br></pre></td></tr></table></figure><h4 id="1-3-AOF文件的重写"><a href="#1-3-AOF文件的重写" class="headerlink" title="1.3 AOF文件的重写"></a>1.3 AOF文件的重写</h4><h5 id="1-AOF带来的问题"><a href="#1-AOF带来的问题" class="headerlink" title="1. AOF带来的问题"></a>1. AOF带来的问题</h5><p>AOF的方式也同时带来了另一个问题。持久化文件会变得越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100就够了。为了压缩AOF的持久化文件，Redis提供了AOF重写（ReWrite）机制。</p><h5 id="2-AOF重写"><a href="#2-AOF重写" class="headerlink" title="2. AOF重写"></a>2. AOF重写</h5><p>用来在一定程度上减小AOF文件的体积,并且还能保证数据不丢失</p><h5 id="3-触发重写方式"><a href="#3-触发重写方式" class="headerlink" title="3. 触发重写方式"></a>3. 触发重写方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.客户端方式触发重写</span><br><span class="line">-执行BGREWRIEAOF命令  不会阻塞redis的服务</span><br><span class="line">2.服务器配置方式自动触发</span><br><span class="line">-配置redis.conf中的auto-aof-rewrite-percentage选项</span><br><span class="line">-如果设置auto-aof-rewrite-percentage值为100和auto-aof-rewrite-min-size 64mb,并且启用的AOF持久化时,那么当AOF文件体积大于64MB,并且AOF文件的体积比上一次重写之后体积大了至少一倍(100%)时,会自动触发,如果重写过于频繁,用户可以考虑将auto-aof-rewrite-percentage设置为更大</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/18/YiLCvp4arWw6eBE.png" alt="image-20220512225431013"></p><h5 id="4-重写原理"><a href="#4-重写原理" class="headerlink" title="4. 重写原理"></a>4. 重写原理</h5><p>从Redis 7.0.0开始,Redis使用了多部分AOF机制.也就是将原来的单个AOF文件拆分为基础文件(最多一个)和增量文件(可能不止一个).</p><p>基本文件表示重写AOF时存在的数据的初始(RDB或AOF格式)快照.</p><p>增量文件包含自创建最后一个基本AOF文件以来的增量更改.所有这些文件都放在一个单独的目录中,并由清单文件跟踪</p><p>从 Redis 7.0.0 开始，在调度 AOF 重写时，Redis 父进程会打开一个新的增量 AOF 文件继续写入。子进程执行重写逻辑并生成新的基础 AOF。Redis 将使用一个临时清单文件来跟踪新生成的基础文件和增量文件。当它们准备好后，Redis 会执行原子替换操作，使这个临时清单文件生效。为了避免在 AOF 重写重复失败和重试的情况下创建大量增量文件的问题，Redis 引入了 AOF 重写限制机制，以确保失败的 AOF 重写以越来越慢的速度重试。</p><h4 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h4><p>注意AOF文件的操作,并没有读取旧的AO文件,而是将整个内存中的数据库内容用命令的方式写了一个新的aof文件替换原有的文件这点和快照有点类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重写流程</span><br><span class="line">-1 redis调用fork,现在又父子两个进程,子进程根据内存中的数据库快照,往临时文件中写入重建数据库状态的命令</span><br><span class="line">-2 父进程继续处理client请求,除了把写命令写入到原来的aof文件中.同时把接收到的写命令缓存起来.这样就能保证如果子进程重写失败的话,不会丢失数据</span><br><span class="line">-3 当子进程把快照内容写入己命令写到临时文件中后,子进程发信号通知父进程,然后父进程把缓存的命令也写到临时文件中</span><br><span class="line">-4 现在父进程可以使用临时文件替换旧的aof文件,并重命名,后面收到的写命令也开始往新的aof文件中追加.</span><br></pre></td></tr></table></figure><p><strong>Redis7.0.0之前：</strong></p><p><img src="https://s2.loli.net/2022/05/18/5dzkXMxvcObFf6A.png" alt="image-20220512225149515"></p><p><strong>Redis7.0.0之后：</strong></p><p><img src="https://s2.loli.net/2022/05/18/bovIWStHZL1hFaO.png" alt="image-20220513120013948"></p><h4 id="1-4-持久化总结"><a href="#1-4-持久化总结" class="headerlink" title="1.4 持久化总结"></a>1.4 持久化总结</h4><p>两种持久化方案既可以同时使用(aof),又可以单独使用,在某种情况下也可以都不使用,具体使用哪种持久化方案取决于用户的数据和用用决定.</p><p>无论使用AOF还是快照机制持久化,将数据持久化到硬盘都是有必要的,除了持久化之外,用户还应该对持久化的文件进行备份(异地备份)以最大安全保障数据的完整性.</p>]]></content>
    
    
    <summary type="html">对学习Redis的一些知识笔记</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL5.7概述以及下载安装（centOS7）</title>
    <link href="http://example.com/2022/04/27/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/04/27/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</id>
    <published>2022-04-26T16:00:00.000Z</published>
    <updated>2022-05-23T06:39:08.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL5-7概述以及下载安装（centOS7）"><a href="#MySQL5-7概述以及下载安装（centOS7）" class="headerlink" title="MySQL5.7概述以及下载安装（centOS7）"></a>MySQL5.7概述以及下载安装（centOS7）</h1><h2 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h2><blockquote><p>MySQL是一个典型的关系数据库，目前是Oracle公司产品之一，也是目前主流使用的关系型数据库之一。使用MySQL可以进行最基本的数据存储、管理、查询等操作，也可以方便的组建数据库集群，配置读写分离。</p><p>MySQL数据库同样使用SQL（结构化查询语言）来进行操作，同时MySQL数据库自身也有很多可以直接使用的内置函数，在部分操作的语法上和其他数据库会存在区别。</p></blockquote><h2 id="二、版本选择"><a href="#二、版本选择" class="headerlink" title="二、版本选择"></a>二、版本选择</h2><h3 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.    应用场景"></a>1.    应用场景</h3><h5 id="社区版"><a href="#社区版" class="headerlink" title="社区版"></a>社区版</h5><blockquote><p>在学习阶段，可以使用免费的社区版，这也是中小型企业会选用的一个版本，可以在官方网站直接进行下载。在社区版中，除了提供数据库服务端以外，同样提供了社区版相关组件，如官方的可视化工具、MySQL集群、各开发语言数据库驱动等，可以根据需要直接下载。</p></blockquote><p><img src="D:/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%96%87%E4%BB%B6/MySQL%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85.assets/1.png" alt="1"></p><h5 id="企业版"><a href="#企业版" class="headerlink" title="企业版"></a>企业版</h5><blockquote><p>MySQL企业版是提供了商用的解决方案，相关的产品除了数据库服务外，还包括：MySQL云服务、企业级数据备份、企业级防火墙、企业级数据加密等。</p></blockquote><h3 id="2-MySQL版本"><a href="#2-MySQL版本" class="headerlink" title="2.    MySQL版本"></a>2.    MySQL版本</h3><blockquote><p>目前MySQL官网提供了三个大版本的支持，5.6.x、5.7.x、8.0.x。8.x版本相较于5.7版本，在性能方面做出了较大的改进和优化：2x Faster than MySQL5.7!</p><p>在8.0的MySQL数据库中，对某些常用语法的细节部分也做了调整，<strong>如果准备进行升级，一定要注意兼容性的问题</strong>。<br>而5.7版本相较于5.6版本而言，主要是进行了性能上的优化，并提供了更丰富的设置。如：新增了优化器、原生JSON支持、GIS扩展等。</p></blockquote><h2 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h2><h3 id="1-官网地址"><a href="#1-官网地址" class="headerlink" title="1.    官网地址"></a>1.    官网地址</h3><blockquote><p>首先来到MySQL数据库官网，直接在百度搜索MySQL就可以找到：<a href="https://www.mysql.com/%EF%BC%8C%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%E7%9B%B4%E6%8E%A5%E7%82%B9%E5%87%BB**DOWNLOADS**%E6%8C%89%E9%92%AE%E3%80%82">https://www.mysql.com/，打开之后直接点击**DOWNLOADS**按钮。</a></p></blockquote><h3 id="2-社区版下载"><a href="#2-社区版下载" class="headerlink" title="2.    社区版下载"></a>2.    社区版下载</h3><blockquote><p>进入下载界面后，点击<strong>MySQL Community（GPL）Downloads</strong>按钮进入下载界面：</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/YdSUjexPNmyIiWa.png" alt="image-20220429195827454"></p><blockquote><p>选择<strong>MySQL Community Server</strong>：</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/7Jgtn3lzX6OeTcF.png" alt="image-20220429195858199"></p><blockquote><p>直击链接：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></blockquote><h3 id="3-选择版本"><a href="#3-选择版本" class="headerlink" title="3.    选择版本"></a>3.    选择版本</h3><blockquote><p>对于Linux平台而言而言，如果是解压安装基本没有任何差别。如果是软件包安装，在下载时一定要选择相应的版本。目前官网提供两个大的稳定版，一个是<strong>5.7</strong>，一个是<strong>8.0</strong>，将演示如何在CentOS 7系统下安装MySQL 5.7。</p></blockquote><p>进入界面后点击<strong>Looking for previous GA versions</strong>链接：</p><p><img src="https://s2.loli.net/2022/04/29/Xe6UCnRI4Z1NdSf.png" alt="image-20220429195935377"></p><blockquote><p>依次选择<strong>操作系统</strong> -&gt; <strong>系统版本</strong> -&gt; <strong>需要下载的软件包</strong>：</p><p>下载的软件包需要：common、client、libs、server。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/HRfwc8uvV17gsKT.png" alt="image-20220429195958113"></p><h3 id="4-下载安装包"><a href="#4-下载安装包" class="headerlink" title="4.    下载安装包"></a>4.    下载安装包</h3><blockquote><p>进入下载界面后，直接点击 No thanks,just start my download. 链接即可直接下载。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/V1yAObzluIWtN72.png" alt="image-20220429200026929"></p><blockquote><p>windows下载后的截图</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PpeOLoHWMQJN1gS.png" alt="image-20220429200037001"></p><h2 id="四、安装步骤"><a href="#四、安装步骤" class="headerlink" title="四、安装步骤"></a>四、安装步骤</h2><blockquote><p>RPM软件包格式适用于所有基于RedHat内核的Linux发行版，包括CentOS等，在安装之前都要解决好依赖和冲突的问题。由于在安装系统时所选的组件不同，可能预安装的系统环境有所不同。</p></blockquote><h3 id="1-解决依赖冲突"><a href="#1-解决依赖冲突" class="headerlink" title="1.    解决依赖冲突"></a>1.    解决依赖冲突</h3><blockquote><p>在安装之前先检查一下是否有历史版本，包括可能产生冲突的mariadb软件包。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br><span class="line">rpm -qa|grep MySQL</span><br><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/sXkPU9On2zQoLZi.png" alt="image-20220429200048782"></p><blockquote><p>查询出软件信息后进行卸载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.65-1.el7.x86_64</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/sXkPU9On2zQoLZi.png"></p><h3 id="2-解决依赖缺失"><a href="#2-解决依赖缺失" class="headerlink" title="2.    解决依赖缺失"></a>2.    解决依赖缺失</h3><blockquote><p>在CentOS系统中安装MySQL时通常会缺少Data::Dumper，需要先进行安装。</p><p><strong>注意：(后续需要什么我们按照同样方式安装即可)</strong></p><p>在有网的环境下，可以直接使用yum安装。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install autoconf</span><br></pre></td></tr></table></figure><h3 id="3-MySQL服务端安装"><a href="#3-MySQL服务端安装" class="headerlink" title="3.    MySQL服务端安装"></a>3.    MySQL服务端安装</h3><blockquote><p>将下载的rpm包上传至Linux服务器中</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/Sd7ulYDOUPVcgwm.png" alt="image-20220429200113190"></p><blockquote><p>MySQL服务端的安装包为server，安装的顺序为：<strong>common -&gt; libs -&gt; client -&gt; server</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/Qw5DSM23lu1zky8.png" alt="image-20220429200122777"></p><blockquote><p>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/lCEse3qhYFNz2JQ.png" alt="image-20220429200141913"></p><blockquote><p>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/lCEse3qhYFNz2JQ.png"></p><blockquote><p>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm(<strong>到这里可能会报错，如下图所示</strong>：)</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/97E13YhFpGVJOSP.png"></p><blockquote><p>只需要把对应的包安装一下即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><blockquote><p>再执行就可以了</p><p>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PAThaFMHZKR23V6.png" alt="image-20220429200225159"></p><blockquote><p>安装完成后创建的配置文件存放在**&#x2F;etc&#x2F;my.cnf**，如果需要进行一些自定义配置，可以修改该文件。</p></blockquote><h2 id="五、使用测试"><a href="#五、使用测试" class="headerlink" title="五、使用测试"></a>五、使用测试</h2><h3 id="1-启动数据库服务"><a href="#1-启动数据库服务" class="headerlink" title="1.    启动数据库服务"></a>1.    启动数据库服务</h3><blockquote><p>使用root用户来启动服务：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><blockquote><p>检查服务状态：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><blockquote><p>查看到下图状态证明启动成功。</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/PAThaFMHZKR23V6.png"></p><h3 id="2-首次连接修改密码"><a href="#2-首次连接修改密码" class="headerlink" title="2.    首次连接修改密码"></a>2.    首次连接修改密码</h3><blockquote><p>MySQL在启动后会产生一个日志文件，存放在 <strong>&#x2F;var&#x2F;log&#x2F;mysqld.log</strong> ，其中包含了初始密码的信息，可以通过以下命令快速找到：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/vxqckftduipNZSR.png" alt="image-20220429200247691"></p><blockquote><p><strong>复制时注意前后都不要有空格。</strong></p></blockquote><p>使用客户端命令连接</p><blockquote><p>mysql -uroot -pfqomD#lTo5lH</p></blockquote><p><img src="https://s2.loli.net/2022/04/29/2jYR1fn6AP5ogXm.png" alt="image-20220429200256023"></p><blockquote><p>修改安全策略</p><p>MySQL 5.7版本会安装一个密码校验插件，要求设置的密码必须在一定的位数并且要符合密码安全策略（有一定的复杂性），在学习阶段可以先调低策略，设置为一个比较简单的密码。<br>验证策略修改为low（只校验密码长度）：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>修改最小密码长度为4：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><blockquote><p>设置新密码：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/8BuKyF7wbpzClne.png" alt="image-20220429200422898"></p><blockquote><p>使用新密码连接<br>修改密码后使用 exit; 退出，重新使用新密码登录测试。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xiaohu\AppData\Roaming\Typora\typora-user-images\image-20220428201943496.png" alt="image-20220428201943496"></p><blockquote><p>添加主机名连接规则<br>对于MySQL数据库，会将用户的登录密码及权限等信息存放在mysql.user表中，可以先通过以下命令查看一下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,authentication_string <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/SkI1CVrlNm7qiFX.png" alt="image-20220429200440293"></p><blockquote><p>为方便以后使用,添加任意主机的连接规则，命令如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="3-数据库远程连接-课程使用Navicat"><a href="#3-数据库远程连接-课程使用Navicat" class="headerlink" title="3.    数据库远程连接(课程使用Navicat)"></a>3.    数据库远程连接(课程使用Navicat)</h3><p>在Linux系统中安装好数据库以后，通常我们都会使用界面工具来进行远程连接。这个时候可以通过两种方式实现，如果只是需要通过界面工具远程查看数据库情况，可以通过SSH通道的方式连接，这样更安全。<br>如果需要在代码中直接连接远程数据进行调试，此时就需要在MySQL数据库中开启远程连接，也就是需要添加一个连接规则。</p><p><img src="https://s2.loli.net/2022/04/29/Uwtluy85QH4nmxo.png" alt="image-20220429200457727"></p>]]></content>
    
    
    <summary type="html">对学习Mysql的一些知识笔记</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql5.7" scheme="http://example.com/tags/Mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://example.com/2022/04/25/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/04/25/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-04-24T16:00:00.000Z</published>
    <updated>2022-05-23T06:53:00.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>一般是指  <strong>OSI</strong>（Open System Interconnection开放系统互连）参考模型</p><p> TCP&#x2F;IP参考模型</p><p><img src="https://s2.loli.net/2022/04/12/im2Ahos6F5baYTI.png" alt="屏幕截图 2022-04-12 223205"></p><h4 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h4><p>1、IP地址:InetAddress</p><p>2、端口号</p><p>3、传输协议：UDP、TCP</p><h5 id="InetAddress类的使用"><a href="#InetAddress类的使用" class="headerlink" title="InetAddress类的使用"></a>InetAddress类的使用</h5><blockquote><p>获取任意主机：getByName</p><p>主机名：getHostName</p><p>主机Ip地址：getHostAddress</p></blockquote><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><blockquote><p>1、物理端口     网卡口</p></blockquote><blockquote><p>2、逻辑端口     一般端口号指的就是逻辑端口</p><p>有效端口：0<del>65535，其中0</del>1024系统使用或保留端口        通过netstat -ano可以查看端口号</p></blockquote><h5 id="传输协议：UDP、TCP"><a href="#传输协议：UDP、TCP" class="headerlink" title="传输协议：UDP、TCP"></a>传输协议：UDP、TCP</h5><blockquote><p>UDP：将数据源和目的封装成数据包中，不需要建立连接；每个数据报包的大小在限制在64k；因无连接，是不可靠协议；不需要建立连接，速度快</p></blockquote><blockquote><p>TCP：建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连接，是可靠协议；必须建立连接，效率会稍低</p></blockquote><h5 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h5><p>Socket套接字：</p><blockquote><p>•网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</p><p>Socket原理机制：</p><p>•通信的两端都有Socket。</p><p>•网络通信其实就是Socket间的通信。</p><p>•数据在两个Socket间通过IO传输。</p></blockquote><p><img src="https://s2.loli.net/2022/04/12/ztSLHWufJV4QpXm.png" alt="image-20220412213817650"></p><h5 id="UDP传输"><a href="#UDP传输" class="headerlink" title="UDP传输"></a>UDP传输</h5><blockquote><p>1、DatagramSocket与DatagramPacket</p><p>2、建立发送端，接收端。</p><p>3、建立数据包。</p><p>4、调用Socket的发送接收方法。</p><p>5、关闭Socket。</p><p>6、发送端与接收端是两个独立的运行程序。</p></blockquote><h5 id="UDP传输-发送端思路"><a href="#UDP传输-发送端思路" class="headerlink" title="UDP传输-发送端思路"></a>UDP传输-发送端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:将要发送的数据封装成数据包</p><p>3:通过udp的socket服务,将数据包发送出</p><p>4:关闭资源</p></blockquote><h5 id="UDP传输-接收端思路"><a href="#UDP传输-接收端思路" class="headerlink" title="UDP传输-接收端思路"></a>UDP传输-接收端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:通过receive方法接收数据</p><p>3:将收到的数据存储到数据包对象中</p><p>4:通过数据包对象的功能来完成对接收到数据进行解析</p><p>5:可以对资源进行关闭</p></blockquote><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h5><blockquote><p>1、Socket和ServerSocket</p><p>2、建立客户端和服务器端</p><p>3、建立连接后，通过Socket中的IO流进行数据的传输</p><p>4、关闭socket</p><p>5、同样，客户端与服务器端是两个独立的应用程序。</p></blockquote><h5 id="TCP传输-客户端思路"><a href="#TCP传输-客户端思路" class="headerlink" title="TCP传输-客户端思路"></a>TCP传输-客户端思路</h5><blockquote><p>1:建立客户端的Socket服务,并明确要连接的服务器。</p><p>2:如果连接建立成功,就表明,已经建立了数据传输的通道.就可以在该通道通过IO进行数据的读取和写入.该通道称为Socket流,Socket流中既有读取流,也有写入流.</p><p>3:通过Socket对象的方法,可以获取这两个流</p><p>4:通过流的对象可以对数据进行传输</p><p>5:如果传输数据完毕,关闭资源</p></blockquote><h5 id="TCP传输-服务器端思路"><a href="#TCP传输-服务器端思路" class="headerlink" title="TCP传输-服务器端思路"></a>TCP传输-服务器端思路</h5><blockquote><p>1:建立服务器端的socket服务，需要一个端口</p><p>2:服务端没有直接流的操作,而是通过accept方法获取客户端对象，在通过获取到的客户端对象的流和客户端进行通信</p><p>3:通过客户端的获取流对象的方法,读取数据或者写入数据</p><p>4:如果服务完成,需要关闭客户端,然后关闭服务器，但是,一般会关闭客户端,不会关闭服务器,因为服务端是一直提供服务的</p></blockquote><h5 id="TCP传输容易出现的问题"><a href="#TCP传输容易出现的问题" class="headerlink" title="TCP传输容易出现的问题"></a>TCP传输容易出现的问题</h5><blockquote><p>客户端连接上服务端，两端都在等待，没有任何数据传输。</p><p>通过例程分析：</p><p>因为read方法或者readLine方法是阻塞式。</p><p>解决办法：</p><p>自定义结束标记</p><p>使用shutdownInput，shutdownOutput方法。</p></blockquote>]]></content>
    
    
    <summary type="html">对学习网络编程的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="网络编程" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>linux用户管理</title>
    <link href="http://example.com/2022/04/24/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/04/24/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-05-23T06:38:08.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、用户组管理"><a href="#1、用户组管理" class="headerlink" title="1、用户组管理"></a>1、用户组管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户组的管理包括用户组的添加、删除和修改。</span><br><span class="line"></span><br><span class="line">为什么要建立用户组</span><br><span class="line"></span><br><span class="line">人事部有20名员工，我们要建立一个组，叫 hr，这样就不用分别给20个员工设置权限了。</span><br></pre></td></tr></table></figure><h3 id="①-用户组添加"><a href="#①-用户组添加" class="headerlink" title="① 用户组添加"></a>① 用户组添加</h3><p>命令：groupadd</p><p>作用：添加组</p><p>语法：# groupadd  [参数选项  选项值]  用户组名</p><p>选项：-g：设置用户组ID 数字，如果不指定，则默认从1000 之后递增（1-999系统组）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupadd 组名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#groupadd bigdata</span></span><br><span class="line">含义：新建一个组叫做bigdata</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/npRaHjm9SbX6M1k.png" alt="image-20220425210757721"></p><p>提示：linux下我们执行完命令，有时候会没有任何提示，直接回到#提示符，这种状态表明，命令执行成功，没有报错。&#x3D;&#x3D;“没有消息就是最好的消息”&#x3D;&#x3D;</p><p>存储用户组信息的文件：&#x2F;etc&#x2F;group<br> 使用cat命令，查看&#x2F;etc&#x2F;group文件</p><p>&#x2F;etc&#x2F;group文件结构：</p><p>特别说明：</p><p>1） 密码位<code>x</code>代表<code>占位符</code>，用户组可以设置密码，但是大部分情况下不需要设置</p><p>2）组内用户名：表示附加组是该组的用户名称。</p><p><img src="https://s2.loli.net/2022/04/25/YDOHwAhScxNpVGe.png" alt="image-20220425211850494"></p><h3 id="②-用户组修改"><a href="#②-用户组修改" class="headerlink" title="② 用户组修改"></a>② 用户组修改</h3><p>命令：groupmod</p><p>语法：# groupmod   [选项   选项值]   用户组名</p><p>选项：-g  ：gid缩写，设置一个自定义的用户组ID 数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n  ：name缩写，设置新的用户组的名称</span><br></pre></td></tr></table></figure><p>示例代码：修改bigdata用户组，将组ID改成1100，将名称改为bigdata1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupmod -g 新的组ID -n 新的组ID 原有组ID</span><br><span class="line">示例代码：</span><br><span class="line">#groupmod -g 1100 -n bigdata1 bigdata</span><br><span class="line">含义：将bigdata组的组ID改成1100，组名改成bigdata1</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/59HpA2iK1Cvdxb6.png" alt="image-20220425220023602"></p><h3 id="③-用户组删除"><a href="#③-用户组删除" class="headerlink" title="③ 用户组删除"></a>③ 用户组删除</h3><p>命令：groupdel</p><p>语法：# groupdel  用户组名</p><p>案例：删除bigdata1组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：groupdel 组名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#groupdel bigdata1</span></span><br><span class="line">含义：将bigdata1组删除</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/EtZWhnz6brfRJxg.png" alt="image-20220425221937616"></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><p>用户的管理涉及用户的添加、删除和修改。</p><p>与用户相关的文件：&#x2F;etc&#x2F;passwd</p><h3 id="①useradd添加用户"><a href="#①useradd添加用户" class="headerlink" title="①useradd添加用户"></a>①useradd添加用户</h3><p>命令：useradd</p><p>作用：添加用户</p><p>语法：# useradd   [选项  选项的值]   …   用户名</p><p>选项：-g：表示指定用户的用户主（主要）组，选项值可以是用户组ID，也可以是组名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-G：表示指定用户的用户附加（额外）组，选项值可以是用户组ID，也可以是组名</span><br><span class="line"></span><br><span class="line">-u ：uid，用户的id（用户的标识符），系统默认会从500 /或1000之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ 的自选靓号情况】</span><br><span class="line"></span><br><span class="line">-c：comment，添加注释（选择是否添加）</span><br><span class="line"></span><br><span class="line">-s：指定用户登入后所使用的shell 解释器，默认/bin/bash【专门的接待员】，如果不想让其登录，则可以设置为/sbin/nologin   （重要）</span><br><span class="line"></span><br><span class="line">-d：指定用户登入时的启始目录（家目录位置）</span><br><span class="line"></span><br><span class="line">    -n：取消建立以用户名称为名的群组（了解）</span><br><span class="line"></span><br><span class="line"> 当我新建一个账户叫user01, 同时，系统会自动建立一个组也叫user01</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：useradd 用户名</span><br><span class="line">示例代码：</span><br><span class="line">#useradd hzh</span><br><span class="line">含义：创建用户hzh，不带任何选项。</span><br></pre></td></tr></table></figure><p>注意：不用任何参数，创建用户，系统会默认执行以下操作：</p><p>1）在 &#x2F;etc&#x2F;passwd 文件中创建一行关于hzh用户的数据</p><p><img src="https://s2.loli.net/2022/04/25/l149argXGmFtVoK.png" alt="image-20220425222337183"></p><p> 2）在 &#x2F;etc&#x2F;shadow 文件中新增了一行关于wyh密码的数据</p><p><img src="https://s2.loli.net/2022/04/25/oqDQihSmxaUlYCJ.png" alt="image-20220425224109139"></p><p> 3）在 &#x2F;etc&#x2F;group 文件中创建一行与用户名相同的组，例如wyh</p><p><img src="https://s2.loli.net/2022/04/25/V1fFiYKbUw5eumD.png" alt="image-20220425224156762"></p><p> 4）在 &#x2F;etc&#x2F;gshadow 文件中新增一行与新增群组相关的密码信息，例如wyh</p><p><img src="https://s2.loli.net/2022/04/25/mgCprBDyfAshOKx.png" alt="image-20220425224224338"></p><p> 5）自动创建用户的家目录，默认在&#x2F;home下，与用户名同名</p><p><img src="https://s2.loli.net/2022/04/25/k4gRO2fNYBuovF9.png" alt="image-20220425224328709"></p><p>验证是否成功：</p><p>1）使用tail文件查看&#x2F;etc&#x2F;passwd文件</p><p>2）使用tail文件查看&#x2F;etc&#x2F;group文件</p><p>3）验证是否存在家目录（在Centos 下创建好用户之后随之产生一个同名家目录）</p><h3 id="②etc-x2F-passwd存储用户信息的文件"><a href="#②etc-x2F-passwd存储用户信息的文件" class="headerlink" title="②etc&#x2F;passwd存储用户信息的文件"></a>②etc&#x2F;passwd存储用户信息的文件</h3><p>使用vim命令打开&#x2F;etc&#x2F;passwd文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root : x : <span class="number">0</span> : <span class="number">0</span> : root : <span class="regexp">/root : /</span>bin/bash</span><br><span class="line">用户名 : 密码 : 用户<span class="variable constant_">ID</span> : 用户组<span class="variable constant_">ID</span> : 注释 : 家目录 : 解释器shell</span><br></pre></td></tr></table></figure><p><strong>用户名</strong>：登录linux时使用的用户名<br> <strong>密码</strong>：此密码位置一般情况都是”x”，表示密码的占位，真实密码存储在&#x2F;etc&#x2F;shadow<br> <strong>用户ID</strong>：用户的识别符，每个用户都有唯一的UID【-u】<br> <strong>用户组ID</strong>：该用户所属的主组ID；【-g】</p><p><strong>注释</strong>：解释该用户是做什么用的；【-c】<br> <strong>家目录</strong>：用户登录进入系统之后默认的位置；【-d】<br> <strong>解释器shell</strong>：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，转换成机器语言，传递给内核处理；如果解释器是&#x3D;&#x3D;&#x2F;bin&#x2F;bash 表示用户可以登录到系统&#x3D;&#x3D;，&#x3D;&#x3D;&#x2F;sbin&#x2F;nologin表示该用户不能登录到系统&#x3D;&#x3D;【-s】</p><p>下面我们来看一下对于useradd参数的使用</p><p><strong>企业场景1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     公司新员工lisi，属于bigdata部门，用户ID1200，不允许登录系统</span><br><span class="line">思路：</span><br><span class="line">    创建用户lisi，默认lisi属于自己同名的主组，让lisi 属于附加组bigdata1，用户ID 1200，注释为<span class="string">&quot;数据工程师lisi&quot;</span>，解释器为/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法二：useradd <span class="literal">-G</span> 附加组名 <span class="literal">-u</span> 用户ID <span class="literal">-s</span> /sbin/nologin <span class="literal">-c</span> <span class="string">&quot;shuser lisi&quot;</span> 用户名</span><br><span class="line">示例代码：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># useradd -G bigdata -u 1200 -s /sbin/nologin -c &quot;数据工程师lisi&quot; lisi</span></span><br><span class="line">useradd：“bigdata”组不存在</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># groupadd bigdata</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">hzh</span>]<span class="comment"># useradd -G bigdata -u 1200 -s /sbin/nologin -c &quot;数据工程师lisi&quot; lisi</span></span><br><span class="line"></span><br><span class="line">含义：创建用户lisi，不带任何选项。</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bigdata行的含义：在bigdata的组里（组<span class="type">id</span> 是<span class="number">1002</span>）有一个组内用户lisi（lisi 的附加组就是<span class="number">1002</span>，附加组的名字是bigdata1）。</span><br><span class="line">如果需要为一个用户指定多个附加组，只需要将多个附加组的<span class="type">id</span> 通过英文逗号“,”分割即可。</span><br><span class="line">例如-G <span class="number">500</span>,<span class="number">501</span>,<span class="number">502</span></span><br><span class="line"></span><br><span class="line">① 主组只能有<span class="number">1</span> 个（类似于亲生父母只有一对），附加组可以多个，也可以没有附加组（类似于认干爹干妈，可以有也可以没有，也可以有多个）</span><br><span class="line">② 主组必须有</span><br><span class="line">③ 后期将权限管理的时候，关于文档的属组指的是主组（了解）</span><br></pre></td></tr></table></figure><h3 id="③id查看用户信息"><a href="#③id查看用户信息" class="headerlink" title="③id查看用户信息"></a>③id查看用户信息</h3><p>命令：id</p><p>作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。</p><p>语法1：# id  <code>默认显示当前执行该命令的用户的基本信息</code></p><p><img src="https://s2.loli.net/2022/04/25/vXxAD93nSeRUKhf.png" alt="image-20220425224939961"></p><p> 语法2：# id <code>用户名</code>， 显示指定用户的基本信息</p><p> 如何验证以上信息是否正确？</p><p>&#x3D;&#x3D;答：验证用户信息：通过文件&#x2F;etc&#x2F;passwd，验证用户组信息：通过文件&#x2F;etc&#x2F;group&#x3D;&#x3D;</p><h3 id="④usermod修改用户"><a href="#④usermod修改用户" class="headerlink" title="④usermod修改用户"></a>④usermod修改用户</h3><p>命令：usermod(user modify)</p><p>语法：# usermod   [选项  选项的值]   …  用户名</p><p>作用：修改用户的各种属性</p><p>选项：-g：表示指定用户的用户主组，选项的值可以是用户组的ID，也可以是组名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-G：表示指定用户的用户附加组，选项的值可以是用户组的ID，也可以是组名</span><br><span class="line"></span><br><span class="line">-u：uid，用户的id（用户的标识符），系统默认会从500 之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ 的自选靓号情况】</span><br><span class="line"></span><br><span class="line"> -L：锁定用户，锁定后用户无法登陆系统lock</span><br><span class="line"></span><br><span class="line">     -U：解锁用户unlock</span><br><span class="line"></span><br><span class="line"> -c&lt;备注&gt;：修改用户帐号的备注文字</span><br><span class="line"></span><br><span class="line"> -d&lt;登入目录&gt;：修改用户登入时的目录</span><br><span class="line"></span><br><span class="line"> -s<span class="tag">&lt;<span class="name">shell</span>&gt;</span>：修改用户登入后所使用的shell</span><br></pre></td></tr></table></figure><p><strong>企业场景2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公司员工wangwu，属于bigdata部门，现在要休产假，产假期间，暂时停止她登陆电脑的权限，同时原来属于wyhshujia部门的员工lisi，负责wangwu的工作，所以，需要把lisi加入到bigdata的组，同时，修改lisi的账户注释为“wyhshujia bigdata user”</span><br><span class="line"></span><br><span class="line">对于wangwu用户，我们要执行锁定和解锁操作</span><br><span class="line"></span><br><span class="line">对于lisi用户，我们要将lisi加入到bigdata的附加组，同时修改lisi账户的注释</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master hzh]<span class="comment"># usermod -L wangwu</span></span><br><span class="line">usermod：用户“wangwu”不存在</span><br><span class="line">[root@master hzh]<span class="comment"># useradd -G bigdata -u 1300 -c &quot;大数据开发&quot; wangwuuseradd：“bigdata”组不存在</span></span><br><span class="line">[root@master hzh]<span class="comment"># groupadd bigdata</span></span><br><span class="line">[root@master hzh]<span class="comment"># useradd -G bigdata -u 1300 -c &quot;大数据开发&quot; wangwu</span></span><br><span class="line">[root@master hzh]<span class="comment"># usermod -L wangwu</span></span><br><span class="line"></span><br><span class="line">用法一：usermod -L 王五账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#usermod -L wangwu</span></span><br><span class="line">含义：将王五账户暂时锁定</span><br><span class="line"></span><br><span class="line">用法二：usermod -U 王五账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#usermod -U wangwu</span></span><br><span class="line">含义：将王五账户解锁</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法三：usermod <span class="operator">-</span><span class="type">G</span> 组名 <span class="operator">-</span>c “注释内容” 李四用户账号</span><br><span class="line">示例代码：</span><br><span class="line">#usermod <span class="operator">-</span><span class="type">G</span> bigdata <span class="operator">-</span>c <span class="string">&quot;bigdata user&quot;</span> lisi</span><br><span class="line">含义：将李四的账户加入bigdata组，并修改注释内容为shhr user</span><br></pre></td></tr></table></figure><h3 id="⑤passwd修改用户密码"><a href="#⑤passwd修改用户密码" class="headerlink" title="⑤passwd修改用户密码"></a>⑤passwd修改用户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux ==不允许没有密码的用户登录到系统==，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。</span><br></pre></td></tr></table></figure><p>命令：passwd</p><p>语法：# passwd  用户名 【如果不指定用户名则修改自己的密码】</p><p>作用：修改用户密码<br> <strong>企业场景3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">王五产假休完回到公司上班，需要将王五的账户解锁，在使用usermod -U解锁时，我们看到一个错误信息如下：</span><br></pre></td></tr></table></figure><p>usermod: unlocking the user’s password would result in a passwordless account.</p><p>解锁这个账户，将导致一个没有密码的账户，因为之前王五的账户没有密码。这时候，我们就需要使用passwd命令，给王五的账户设置一个密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法一：passwd 账户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#passwd wangwu</span></span><br><span class="line">含义：为wangwu账户设置密码</span><br><span class="line">注意：</span><br><span class="line">    当密码过于简单时，系统会提示这是一个不好的密码，因为它太简单了，但是我们仍然可以坚持使用这个密码。</span><br><span class="line">    在我们输入密码时，屏幕不会有任何显示。</span><br><span class="line">    密码需要输入两次，请确保两次输入的密码是一样的。</span><br></pre></td></tr></table></figure><h3 id="⑥认识-x2F-etc-x2F-shadow文件"><a href="#⑥认识-x2F-etc-x2F-shadow文件" class="headerlink" title="⑥认识&#x2F;etc&#x2F;shadow文件"></a>⑥认识&#x2F;etc&#x2F;shadow文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于 /etc/passwd文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分离出来，并单独放到了shadow文件中。</span><br><span class="line"></span><br><span class="line">/etc/shadow 文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就保证了用户密码的安全性。  </span><br></pre></td></tr></table></figure><p>与用户密码相关的文件：&#x2F;etc&#x2F;shadow</p><p>为用户设置密码之后，会自动在&#x2F;etc&#x2F;shadow文件中进行体现，使用vim编辑器打开</p><p>第一列为用户名，例如zhangsan</p><p>后面是加密后的密码，就是$开头的字符串</p><p>如果显示为!!,则表示这个用户&#x3D;&#x3D;没有&#x3D;&#x3D;设置密码。</p><p>由以上截图所知，wyh,lisi是没有设置密码的。wangwu我们刚刚设置了密码，所以显示为一个加密的字符创</p><p>任务：新建一个账户叫shujiaxiaoli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建第二个账户叫shujiaxiaoli</span><br><span class="line"></span><br><span class="line">给shujiaxiaoli账户设置一个密码</span><br><span class="line"></span><br><span class="line">进入shadow文件，观察两个账户的区别</span><br></pre></td></tr></table></figure><h3 id="⑦su切换用户"><a href="#⑦su切换用户" class="headerlink" title="⑦su切换用户"></a>⑦su切换用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在设置用户密码之后就可以使用此账号进行登录系统了，如果系统处于已登录状态，则可以使用su命令进行切换用户。</span><br><span class="line"></span><br><span class="line">为了系统安全，企业中通常不会允许root用户直接登录计算机，但是工作需要，我们又需要使用root权限，这时候，我们就可以先使用一个普通用户登录计算机，再通过su命令切换到root权限。</span><br></pre></td></tr></table></figure><p>命令：su</p><p>语法：# su  [-]   账号</p><p>作用：切换用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法一：su 用户名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="selector-id">#su</span> root</span><br><span class="line">含义：切换到root权限</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="selector-tag">a</span>. 从root 往普通用户切换不需要密码，但是反之则需要root 密码；</span><br><span class="line"><span class="selector-tag">b</span>. 切换用户之后前后的工作路径是不变的，添加了选项<span class="selector-attr">[-]</span>会自动切换到用户的家；</span><br><span class="line">c. 普通用户没有办法访问root 用户家目录，但是反之则可以；</span><br></pre></td></tr></table></figure><p>启用wheel组设置（了解）</p><p>步骤1：使用vim编辑器 打开&#x2F;etc&#x2F;pam.d&#x2F;su文件</p><p>步骤2：编辑文件，去掉auth required pam_wheel.so use_uid这一行前面的#，使这一行配置生效</p><p>步骤3：下面是去掉#后的状态</p><p>步骤4：保存退出 ：wq<br>这时，只有在wheel组内的用户才可以su到root</p><p><img src="https://s2.loli.net/2022/04/25/9CUH3kfQtROpW5K.png" alt="image-20220425225804162"></p><p> ⑧userdel删除用户<br> 命令：userdel</p><p>语法：# userdel   选项   用户名</p><p>作用：删除账户及其对应家目录</p><p>选项：-r：表示删除用户的同时，删除其家目录&#x2F;home下的对应文件夹</p><p>权限:<br>    通过ll查看详细信息时:-rw-r–r–. 1 root root     11 4月  24 21:22 xiao.txt<br>    -:表示类型<br>    rw-:当前用户权限<br>    r–:当前用户组权限<br>    r–:其他用户权限</p><pre><code>r:读     4w:写     2x:执行   1u:当前用户g:当前组o:其他a:所有</code></pre><p>权限分配<br>    chmod:修改权限<br>        格式1:(使用相加减表达权限)<br>            chmod [选项] [权限修改] [文件]<br>        格式2:(使用数字表达权限)<br>            chmod [选项] [权限修改] [文件]<br>            4:读<br>            2:写<br>            1:执行<br>            7:全部<br>        注意:如果只给一个数字表示修改o,两个表示修改go<br>        选项:<br>            -R:迭代修改</p><pre><code>chgrp:修改用户组    格式:        chgrp [选项] [组名] [文件或目录]    选项:        -R:表达迭代修改    注意:文件或目录的所有用户或所有组,都是以编号来查询所有用户或所有组        如果不存在就显示编号,存在显示名称chown:修改所属用户    格式:        chown [选项] [组名] [文件或目录]    选项:        -R:表达迭代修改sudo:越权执行    格式:        sudo 命令    注意:sudo实际上去借root权限执行命令(root对普通用户分配了权限)sudo -l:查看当前权限visudo:修改配置文件进行权限分配(文件所在位置/etc/sudoers)    例如:普通用户拥有root所有权限        用户名 ALL=(ALL) ALL        用户名 ALL=(root) ALL    例如:普通用户只能执行一个命令        用户名 ALL=(root)/bin/rm可以同过vim /etc/sudoers修改权限分配</code></pre><p>查找<br>    find<br>        格式:<br>            find 开始查找路径 [选项] [条件]<br>        选项:<br>            -name<br>                <em>表示匹配所有<br>                ?表示匹配一个<br>                例如:从&#x2F;开始查找后缀为.txt<br>                    find &#x2F; -name “</em>.txt”<br>            -type<br>                d:表示目录<br>                f:表示文件<br>                例如:从&#x2F;开始查找文件<br>                    find &#x2F; -type f<br>            -size<br>                ll –block-size&#x3D;单位<br>                    例如:大小以k为单位进行显示<br>                        ll –block-size&#x3D;k<br>                注意:条件需要给上单位<br>                    +表示大于<br>                    -表示小于<br>                    不给就是等于<br>                例如:从&#x2F;开始查找文件大小大于2k<br>                    find &#x2F; -size +2k<br>            -user<br>            -group<br>Linux常见符号<br>    |:管道,把前面一部分的内容交给后面去处理<br>    例如:<br>        cat &#x2F;etc&#x2F;profile | more</p><pre><code>grep:筛选    格式:        grep 筛选条件&gt;&gt;:追加,把命令1的结果写入到命令2    格式:        命令1 &gt;&gt; 命令2     例如:cat profile &gt;&gt; test.txt&gt;:覆盖    格式:        命令1 &gt; 命令2     例如:cat profile &gt; test.txt</code></pre>]]></content>
    
    
    <summary type="html">对学习Linux的一些知识笔记</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://example.com/2022/04/23/linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/04/23/linux%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-22T16:00:00.000Z</published>
    <updated>2022-05-23T06:37:45.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h5 id="linux基础命令："><a href="#linux基础命令：" class="headerlink" title="linux基础命令："></a>linux基础命令：</h5><blockquote><p>1、ll 和 ls    查看当前目录下所有的文件和文件夹<br>2、cd    切换目录<br>3、pwd    查看当前目录的一个完整路径<br>4、ls -a    列出当前目录下的所有文件（包括隐藏文件）<br>5、stat 文件名    查看文件信息<br>6、ls –help    查看ls用法（–help查看命令使用手册）<br>7、mkdir    文件夹的名称<br>8、mkdir-p ….    创建多级文件夹<br>9、touch 文件名    创建文件<br>10、mv    移动一个文件，可以在移动的同时修改文件名<br>11、cp    复制文件<br>12、.    当前目录    ..    上一级目录<br>13、rm 文件的名称    删除一个文件，会进行提示，输入y则表示删除，输入n表示不删除<br>14、rm -f 文件的名称    不进行提示强制删除一个文件<br>15、rm -r    删除一个文件或文件夹，会进行提示，输入y则表示删除，输入n表示不删除<br>16、rm -rf    强制删除文件或文件夹，不进行提示   使用时一定要注意路径！！！<br>17、cat 文件名    不打开文件查看文件内容<br>18、tac 文件名    不打开文件倒序查看内容<br>19、cat file1 file2 &gt; file3    文件合并   ，注意的是file3目标文件可以不存在，会自动创建，如果存在则会覆盖原本内容<br>20、cat -b    显示行号输出<br>21、分屏显示 more    用一次显示一屏，没有显示完时最后一行显示进度。回车显示下一行，按b显示上一页，空格显示下一页，q退出。</p></blockquote><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><blockquote><p>touch 文件名    创建一个文件<br>vi 文件名    创建打开并编辑</p></blockquote><h5 id="vi-打开文件"><a href="#vi-打开文件" class="headerlink" title="vi 打开文件"></a>vi 打开文件</h5><blockquote><p>按下i进入编辑模式</p><p>按下esc 退出编辑模式</p><p>英文输入状态下 输入：</p><p>输入wq    表示保存并退出</p><p>输入q!    表示不保存退出</p><p>进入编辑模式后退格一个一个字符删除</p><p>不进入编辑模式 连续两次 d表示删除一行</p><p>另外一种编辑模式 vim</p><p>centOS7并不自带这种编辑命令，需要额外下载安装</p><p>通过yum进行下载并安装 （类比python中的pip）</p><p>yum install vim</p><p>yum -y install vim   使用这个命令在安装过程中不需要手动输入y进行继续，默认都是y</p></blockquote><h5 id="linux安装jdk1-8"><a href="#linux安装jdk1-8" class="headerlink" title="linux安装jdk1.8"></a>linux安装jdk1.8</h5><blockquote><p>1、上传jdk压缩包到&#x2F;usr&#x2F;local&#x2F;soft&#x2F;目录下<br>2、使用解压命令进行解压  tar -zxvf jdk-8u171-linux-x64.tar.gz<br>3、配置环境变量<br>        在linux中环境的变量的文件是&#x2F;etc&#x2F;profile<br>4、打开并编辑环境变量文件<br>        vim &#x2F;etc&#x2F;profile<br>5、按下i进入编辑模式（注意：不要修改文件原本的内容，我们增加环境变量只需要额外增加即可，不要动原本的内容！！！！！！）<br>        export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;jdk1.8.0_171<br>        export PATH&#x3D;.:$PATH:$JAVA_HOME&#x2F;bin<br>6、保存退出<br>7、在linux中环境变量修改完后需要使用命令让其生效<br>        source &#x2F;etc&#x2F;profile<br><strong>可能会出现的错误：</strong><br>1、发现交换文件 “&#x2F;etc&#x2F;.profile.swp”<br>            所有者: root    日期: Sat Apr 23 15:35:57 2022<br>            文件名: &#x2F;etc&#x2F;profile<br>            修改过: 是<br>            用户名: root      主机名: master<br>           进程 ID: 61454<br>正在打开文件 “&#x2F;etc&#x2F;profile”<br>              日期: Sat Apr 23 15:2<br>这是由于上一次打开的文件没有正确关闭导致的，需要删除交换文件： rm -rf &#x2F;etc&#x2F;.profile.swp</p></blockquote><h5 id="修改主机名（centOS7）"><a href="#修改主机名（centOS7）" class="headerlink" title="修改主机名（centOS7）"></a>修改主机名（centOS7）</h5><blockquote><p>vim &#x2F;etc&#x2F;hostname<br>修改后需要重启虚拟机<br>使用命令重启：reboot</p></blockquote><h5 id="centOS7关闭防火墙"><a href="#centOS7关闭防火墙" class="headerlink" title="centOS7关闭防火墙"></a>centOS7关闭防火墙</h5><blockquote><p>systemctl stop firewalld.service #停止firewall<br>systemctl disable firewalld.service #禁止firewall开机启动</p></blockquote><h5 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h5><blockquote><p>firewall-cmd –state<br>systemctl status firewalld.service</p></blockquote><h5 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h5><blockquote><p>systemctl start firewalld.service</p></blockquote><h5 id="关闭networkmanage服务（centOS7内置一个网络服务）"><a href="#关闭networkmanage服务（centOS7内置一个网络服务）" class="headerlink" title="关闭networkmanage服务（centOS7内置一个网络服务）"></a>关闭networkmanage服务（centOS7内置一个网络服务）</h5><blockquote><p>systemctl status NetworkManager    #查看NetworkManager状态<br>systemctl stop NetworkManager    #停止NetworkManager<br>systemctl disable NetworkManager    #禁止NetworkManager开机启动</p></blockquote><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><blockquote><p>1、克隆之前不要开启被克隆的虚拟机<br>2、注意：克隆过程中需要选择完整克隆！！！<br>3、克隆完后不要立即启动，因为mac地址和被克隆的虚拟机一模一样，需要修改克隆后虚拟机的mac地址<br>4、需要修改克隆后虚拟机的主机名和ip地址，先不要启动被克隆的虚拟机<br>5、修改主机名：<br>        cd &#x2F;etc<br>        vim hostname<br>        修改后重启生效<br>6、修改ip地址<br>        cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts<br>        vim ifcfg-ens33<br>7、重启 reboot</p></blockquote><h5 id="基础命令进阶："><a href="#基础命令进阶：" class="headerlink" title="基础命令进阶："></a>基础命令进阶：</h5><h6 id="1、远程复制命令："><a href="#1、远程复制命令：" class="headerlink" title="1、远程复制命令："></a>1、远程复制命令：</h6><p>​        远程复制文件：scp test.txt 192.168.40.130:&#x2F;usr&#x2F;local&#x2F;soft&#x2F;<br>​        远程复制文件夹：scp -r aaaa 192.168.40.120:&#x2F;usr&#x2F;local&#x2F;soft&#x2F;</p><h6 id="2、配置ip映射"><a href="#2、配置ip映射" class="headerlink" title="2、配置ip映射"></a>2、配置ip映射</h6><p>​    2.1、vim &#x2F;etc&#x2F;hosts</p><p>​        添加如下内容：</p><p>​            192.168.40.110  master<br>​            192.168.40.120  node1<br>​            192.168.40.130  node2</p><p>​    2.2、远程复制到其他节点上，覆盖原来的hosts文件，每台虚拟机都要进行覆盖<br>​        scp &#x2F;etc&#x2F;hosts node1:&#x2F;etc&#x2F;hosts<br>​        scp &#x2F;etc&#x2F;hosts node2:&#x2F;etc&#x2F;hosts</p><p>​    2.3、覆盖完后，尝试ping其他虚拟机</p><h6 id="3、配置免密操作（每个虚拟机都要进行操作）"><a href="#3、配置免密操作（每个虚拟机都要进行操作）" class="headerlink" title="3、配置免密操作（每个虚拟机都要进行操作）"></a>3、配置免密操作（每个虚拟机都要进行操作）</h6><p>​     <strong>在任意目录都可以执行</strong><br>​        3.1 ssh-keygen -t rsa 然后三次回车<br>​        3.2  ssh-copy-id -i 主机名<br>​            注意：生成密钥的虚拟机复制密钥的时候，自己也要复制一份<br>​            举例：ssh-copy-id -i master<br>​                        ssh-copy-id -i node1<br>​                        ssh-copy-id -i node2</p>]]></content>
    
    
    <summary type="html">对学习Linux的一些知识笔记</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2022/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-04-18T16:00:00.000Z</published>
    <updated>2022-05-23T06:32:09.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><p><img src="https://s2.loli.net/2022/04/06/asuo1fbJLt4mIRZ.png" alt="image-20220406205727748"></p><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><p><img src="https://s2.loli.net/2022/04/06/oWvhCb9R1UucIVO.png" alt="image-20220406205910981"></p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><img src="https://s2.loli.net/2022/04/06/lQZNqR4ijroWKFc.png" alt="image-20220406210017338"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://s2.loli.net/2022/04/06/1FmKhpXzNIdqu8x.png" alt="image-20220406210122779"></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="https://s2.loli.net/2022/04/06/j1lcME2yN3axgSG.png" alt="image-20220406210221158"></p><blockquote><p>给定N个权值作为N个<a href="https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)</p></blockquote><blockquote><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树</p></blockquote>]]></content>
    
    
    <summary type="html">对学习数据结构的一些知识笔记</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://example.com/2022/04/17/%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/04/17/%E5%8F%8D%E5%B0%84/</id>
    <published>2022-04-16T16:00:00.000Z</published>
    <updated>2022-05-23T06:31:16.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><blockquote><p>•当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</p><h4 id="•加载"><a href="#•加载" class="headerlink" title="•加载"></a>•加载</h4><p>•就是指将class文件读入内存，并为之创建一个Class对象。</p><p>•任何类被使用时系统都会建立一个Class对象。</p><h4 id="•连接"><a href="#•连接" class="headerlink" title="•连接"></a>•连接</h4><p>•验证 是否有正确的内部结构，并和其他类协调一致</p><p>•准备 负责为类的静态成员分配内存，并设置默认初始化值</p><p>•解析 将类的二进制数据中的符号引用替换为直接引用</p><h4 id="•初始化"><a href="#•初始化" class="headerlink" title="•初始化"></a>•初始化</h4><p>就是我们以前讲过的初始化步骤</p></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载器的组成"><a href="#类加载器的组成" class="headerlink" title="类加载器的组成"></a>类加载器的组成</h4><h5 id="•Bootstrap-ClassLoader-根类加载器"><a href="#•Bootstrap-ClassLoader-根类加载器" class="headerlink" title="•Bootstrap ClassLoader 根类加载器"></a>•Bootstrap ClassLoader 根类加载器</h5><blockquote><p>也被称为引导类加载器，负责Java核心类的加载</p><p>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</p></blockquote><h5 id="•Extension-ClassLoader-扩展类加载器"><a href="#•Extension-ClassLoader-扩展类加载器" class="headerlink" title="•Extension ClassLoader 扩展类加载器"></a>•Extension ClassLoader 扩展类加载器</h5><blockquote><p>负责JRE的扩展目录中jar包的加载。</p><p>在JDK中JRE的lib目录下ext目录</p></blockquote><h5 id="•Sysetm-ClassLoader-系统类加载器"><a href="#•Sysetm-ClassLoader-系统类加载器" class="headerlink" title="•Sysetm ClassLoader 系统类加载器"></a>•Sysetm ClassLoader 系统类加载器</h5><blockquote><p>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</p></blockquote><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><h4 id="通过反射获取构造方法并使用"><a href="#通过反射获取构造方法并使用" class="headerlink" title="通过反射获取构造方法并使用"></a>通过反射获取构造方法并使用</h4><blockquote><h5 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h5><p>getConstructors</p><p>getDeclaredConstructors</p><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p>newInstance()</p><p>con.newInstance(“zhangsan”, 20);</p></blockquote><h4 id="通过反射获取成员变量并使用"><a href="#通过反射获取成员变量并使用" class="headerlink" title="通过反射获取成员变量并使用"></a>通过反射获取成员变量并使用</h4><blockquote><h5 id="获取所有成员"><a href="#获取所有成员" class="headerlink" title="获取所有成员"></a>获取所有成员</h5><p>getFields,getDeclaredFields</p><h5 id="获取单个成员"><a href="#获取单个成员" class="headerlink" title="获取单个成员"></a>获取单个成员</h5><p>getField,getDeclaredField</p><h5 id="修改成员的值"><a href="#修改成员的值" class="headerlink" title="修改成员的值"></a>修改成员的值</h5><p>set(Object obj,Object value)<br>将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</p></blockquote><h4 id="通过反射获取成员方法并使用"><a href="#通过反射获取成员方法并使用" class="headerlink" title="通过反射获取成员方法并使用"></a>通过反射获取成员方法并使用</h4><blockquote><h5 id="获取所有方法"><a href="#获取所有方法" class="headerlink" title="获取所有方法"></a>获取所有方法</h5><p>getMethods</p><p>getDeclaredMethods</p><h5 id="获取单个方法"><a href="#获取单个方法" class="headerlink" title="获取单个方法"></a>获取单个方法</h5><p>getMethod</p><p>getDeclaredMethod</p><h5 id="暴力访问"><a href="#暴力访问" class="headerlink" title="暴力访问"></a>暴力访问</h5><p>method.setAccessible(true);</p></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote><p>在程序运行过程中产生的这个对象,而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理</p></blockquote><p>在Java中<strong>java.lang.reflect</strong>包下提供了一个Proxy类和一个<strong>InvocationHandler</strong>接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib</p><p>Proxy类中的方法创建动态代理类对象</p><p>•public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</p><p>•最终会调用InvocationHandler的方法</p><p>InvocationHandler</p><p>Object invoke(Object proxy,Method method,Object[] args)</p>]]></content>
    
    
    <summary type="html">对学习Java中反射的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://example.com/2022/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-04-15T16:00:00.000Z</published>
    <updated>2022-05-23T06:30:49.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h4><blockquote><p>是指正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都有它自己的内存空间和资源，在windows下通过任务管理器查看</p></blockquote><h4 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h4><blockquote><p>是进程的单个顺序控制流，或者就是说是一个单独执行的路径<br>如果一个进程只有一条执行路径，称之为单线程<br>如果一个进程有多条执行路径，称之为多线程<br><strong>线程</strong>包含在<strong>进程</strong>中</p></blockquote><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><blockquote><p>指一个程序中所有的任务都是按照先后顺序执行的，在前一个任务还没有处理完的情况下，是不会进行处理下一个任务的。<br>举例：理发店只有一个理发师，很多人去理发，就需要排队，就有先后顺序，先等前面的人理完发，再轮到后面的人。</p></blockquote><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><blockquote><p>指将任务分给不同的处理器去处理，每一个处理器中的任务再进行串行处理<br>举例：火车站上有很多卖票窗口，多个窗口同时卖票，但是呢，针对于某一个窗口来说，是一个接着一个去处理的。</p></blockquote><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>指一个现象，并发需要处理器的支持，比如在处理一个任务的时候，操作系统可以调用资源去处理其他的任务，这个任务并行还是串行都可以。<br>无论是串行还是并行，都需要处理支持并发。<br>举例：假设喝水是一个任务，每个火车站售票员，他再售票的同时也能喝水，这就表示支持并发。</p></blockquote><h5 id="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"><a href="#在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。" class="headerlink" title="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"></a><strong>在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。</strong></h5><h4 id="java中实现线程的方式"><a href="#java中实现线程的方式" class="headerlink" title="java中实现线程的方式"></a>java中实现线程的方式</h4><blockquote><p>有三种</p></blockquote><blockquote><p>第一种，继承Thread类，重写run方法，使用start启动线程；（thread默认是从0开始）<br>第一种，实现Runnable接口，实现run方法，借助Thread类创建线程对象，使用start方法启动；<br>第三种，实现Callable接口，实现call方法，需要结合线程池的方式创建线程对象，提交到线程池执行。（thread默认是从1开始）</p></blockquote><h5 id="start-启动线程"><a href="#start-启动线程" class="headerlink" title="start() 启动线程"></a>start() 启动线程</h5><h5 id="setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"><a href="#setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）" class="headerlink" title="setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"></a>setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）</h5><h5 id="getName-获取线程名字"><a href="#getName-获取线程名字" class="headerlink" title="getName() 获取线程名字"></a>getName() 获取线程名字</h5><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><h5 id="线程有两种调度模型："><a href="#线程有两种调度模型：" class="headerlink" title="线程有两种调度模型："></a>线程有两种调度模型：</h5><blockquote><p>1、分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片<br>2、抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。</p></blockquote><h5 id="Java使用的是抢占式调度模型"><a href="#Java使用的是抢占式调度模型" class="headerlink" title="Java使用的是抢占式调度模型"></a>Java使用的是抢占式调度模型</h5><blockquote><p>1、线程的默认优先级是5<br>2、设置优先级的时候，范围是1-10<br>3、线程的优先级越高仅仅表示的是获取CPU时间片的机率会高一些，并不能保证一定会先执行。</p></blockquote><h5 id="获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。"><a href="#获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。" class="headerlink" title="获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。"></a>获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。</h5><p>设置线程优先级的方法：public final void setPriority(int newPriority) 更改此线程的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>; 线程可以拥有的最小的优先级</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>; 线程可以拥有的最大的优先级</span><br></pre></td></tr></table></figure><h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><h5 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h5 id="线程加入"><a href="#线程加入" class="headerlink" title="线程加入"></a>线程加入</h5><blockquote><p>public final void join()    加入线程<br>线程对象调用该方法的时候，目的是让调用该方法的当前线程先执行完，执行完毕后，再让其他线程执行，其他没有调用join方法的线程，他们之间还是会抢CPU执行权的。</p></blockquote><p><strong>注意：join方法的调用，必须是紧跟着当前线程start()方法后调用，否则不起作用。</strong></p><h5 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h5><blockquote><p>public final void yield()    礼让线程</p></blockquote><blockquote><p>礼让线程的目的是暂停当前正在执行的线程，并让其他线程执行，它的作用实际上是为了让线程之间看起来更加和谐，它并不能保证多个线程之间一人一次。</p></blockquote><h5 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h5><blockquote><p>public final void setDaemon(boolean on)    后台线程(守护线程)</p><p><strong>Java中有两类：用户线程，守护线程</strong><br><strong>用户线程</strong>：在学习线程之前，运行起来的一个一个程序中的线程都是用户线程<br><strong>守护线程</strong>：所谓的守护线程，指的是程序运行的时候，在后台提供了一个通用的服务线程，比如说垃圾回收线程，就是一个守护线程。这种线程不一定是要存在的，但是可能程序会出问题。只要程序存在用户线程，程序就不会停止.</p><p><strong>守护线程进行设置</strong><br>   public final void setDaemon(boolean on)</p><p>注意事项：</p><p>​    <strong>守护线程必须在启动之前进行设置</strong></p></blockquote><h5 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h5><blockquote><p>public final void stop()    已弃用<br>public void interrupt()    打断线程</p></blockquote><h5 id="休眠线程"><a href="#休眠线程" class="headerlink" title="休眠线程"></a>休眠线程</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h4 id="线程的生命周期图"><a href="#线程的生命周期图" class="headerlink" title="线程的生命周期图"></a>线程的生命周期图</h4><p><img src="https://s2.loli.net/2022/04/11/SYz8thrRo27uw6N.png" alt="image-20220411225244933"></p><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>•格式：</p><p><strong>synchronized</strong>(对象){</p><p>​        需要同步的代码;</p><p>}</p><blockquote><p>同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。</p></blockquote><h5 id="同步的前提"><a href="#同步的前提" class="headerlink" title="同步的前提"></a>同步的前提</h5><blockquote><p>•多个线程</p></blockquote><blockquote><p>•多个线程使用的是同一个锁对象</p></blockquote><h5 id="同步的好处"><a href="#同步的好处" class="headerlink" title="同步的好处"></a>同步的好处</h5><blockquote><p>•同步的出现解决了多线程的安全问题。</p></blockquote><h5 id="同步的弊端"><a href="#同步的弊端" class="headerlink" title="同步的弊端"></a>同步的弊端</h5><blockquote><p>•当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。</p></blockquote><h5 id="同步弊端"><a href="#同步弊端" class="headerlink" title="同步弊端"></a>同步弊端</h5><blockquote><p>•效率低</p></blockquote><blockquote><p>•如果出现了同步嵌套，就容易产生死锁问题</p></blockquote><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><blockquote><p>•是指两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象</p></blockquote><h4 id="线程的状态转换图"><a href="#线程的状态转换图" class="headerlink" title="线程的状态转换图"></a>线程的状态转换图</h4><p><img src="https://s2.loli.net/2022/04/18/CX7pwtn3ZgamueV.png" alt="屏幕截图 2022-04-18 194219"></p><h4 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a><strong>线程组</strong></h4><blockquote><p>Java中使用<strong>ThreadGroup</strong>来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</p><p>•默认情况下，所有的线程都属于主线程组。</p><p>•<strong>public final ThreadGroup getThreadGroup()</strong></p><p>•我们也可以给线程设置分组</p><p>•<strong>Thread(ThreadGroup group, Runnable target, String name)</strong> </p></blockquote><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><p>•线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。</p></blockquote><p>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法</p><p>•public static ExecutorService newCachedThreadPool()</p><p>•public static ExecutorService newFixedThreadPool(int nThreads)</p><p>•public static ExecutorService newSingleThreadExecutor()</p><p>•这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</p><p>•Future&lt;?&gt; submit(Runnable task)</p><p>•<T> Future<T> submit(Callable<T> task)</p><p>•案例演示</p><p>•创建线程池对象</p><p>•创建Runnable实例</p><p>•提交Runnable实例</p><p>•关闭线程池</p><h4 id="匿名内部类方式使用多线程"><a href="#匿名内部类方式使用多线程" class="headerlink" title="匿名内部类方式使用多线程"></a><strong>匿名内部类方式使用多线程</strong></h4><blockquote><p>匿名内部类方式使用多线程</p><p>new Thread(){代码…}.start();</p><p>New Thread(new Runnable(){代码…}).start();</p></blockquote><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><blockquote><p>在java中可以通过Timer和TimerTask类来实现定义调度的功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建定时对象</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">MyTask</span>(timer),<span class="number">2000</span>,<span class="number">3000</span>);<span class="comment">//2秒后开始打印，并且每隔3秒执行一次打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Timer timer;</span><br><span class="line">        MyTask(Timer timer)&#123;</span><br><span class="line">            <span class="built_in">this</span>.timer=timer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"><span class="comment">//            timer.cancel();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AzKaBan是一个完全由java编写的开源调度框架</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><blockquote><p>1、创建型    创建对象</p><p>2、结构型    对象的组成</p><p>3、行为型    对象的功能</p></blockquote><h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p><strong>1、单例模式</strong>    指的是在程序运行过程中，内存只允许有一个对象存在</p><blockquote><p>保障类在内存中只有一个对象</p><p>1、构造方法私有化</p><p>2、在类的内部成员变量位置上创建一个对象</p><p>3、提供公共的方法将唯一的对象返回出来获取</p></blockquote><p>​    饿汉式：类一加载，对象就创建好了（线程安全）</p><p>​    懒汉式：用的时候，再创建对象</p><p><strong>2、简单工厂模式</strong></p><p><strong>3、工厂方法模式</strong> </p>]]></content>
    
    
    <summary type="html">对学习Java中多线程的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://example.com/2022/04/14/%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2022/04/14/%E9%80%92%E5%BD%92/</id>
    <published>2022-04-13T16:00:00.000Z</published>
    <updated>2022-05-23T06:30:18.138Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h5 id="方法定义中调用方法本身的现象"><a href="#方法定义中调用方法本身的现象" class="headerlink" title="方法定义中调用方法本身的现象"></a>方法定义中调用方法本身的现象</h5><p> 递归的注意事项：<br>        1、递归一定要有一个出口，结束条件，否则就是死递归<br>        2、递归的次数不能太多，否则就会造成栈内存溢出<br>        3、构造方法不能初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jieCheng</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//5 * jieCheng(4)</span></span><br><span class="line">            <span class="comment">//5 * 4 * jieCheng(3)</span></span><br><span class="line">            <span class="comment">//5 * 4 * 3 * jieCheng(2)</span></span><br><span class="line">            <span class="comment">//5 * 4 * 3 * 2 * jieCheng(1)</span></span><br><span class="line">            <span class="keyword">return</span> i * jieCheng(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对学习Java中递归的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="http://example.com/2022/04/13/Io%E6%B5%81/"/>
    <id>http://example.com/2022/04/13/Io%E6%B5%81/</id>
    <published>2022-04-12T16:00:00.000Z</published>
    <updated>2022-05-23T06:29:43.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><blockquote><p>按照流向：输入流、输出流</p></blockquote><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节"><a href="#1、一次读取一个字节" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>int b &#x3D; 0；</p><p>while(b &#x3D; fis.read() !&#x3D; -1){</p><p>​        Systeam.out.println((char) b );</p><p>}</p><h6 id="2、一次读取一个字节数组"><a href="#2、一次读取一个字节数组" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>byte[] bytes &#x3D; new byte[1024];</p><p>int   length &#x3D; 0;</p><p>while((length &#x3D; fis.read(bytes)) !&#x3D; -1){</p><p>​        String s &#x3D; new String(bytes,0,length);</p><p>​        Systeam.out.print(s);</p><p>}</p><h5 id="字节缓冲输入流"><a href="#字节缓冲输入流" class="headerlink" title="字节缓冲输入流"></a>字节缓冲输入流</h5><p>BufferedInputStream</p><p>BufferedInputStteam bis &#x3D; new BufferedInputStream(new FileInputStream(“文件名”))；</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节-1"><a href="#1、一次读取一个字节-1" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>​        int b &#x3D; 0;<br>​        while((b&#x3D;bis.read()) !&#x3D; -1){<br>​                System.out.print((char)b);<br>​        }</p><h6 id="2、一次读取一个字节数组-1"><a href="#2、一次读取一个字节数组-1" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>​        byte[] bytes &#x3D; new byte[1024];<br>​        int length &#x3D; 0;<br>​        while((length &#x3D; bis.read(bytes)) !&#x3D; -1){<br>​                String s &#x3D; new String(bytes,0,length);<br>​                System.out.print(s);</p><p>}</p><h5 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>如果目标文件不存在，会自动创建</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>1、一次写一个int类型的数据<br>    fos.write(97);<br>2、一次写一个字节数组<br>    fos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    fos.write(bytes,1,3);</p></blockquote><h5 id="字节缓冲输出流"><a href="#字节缓冲输出流" class="headerlink" title="字节缓冲输出流"></a>字节缓冲输出流</h5><p>BufferedOutputStream</p><p>BufferedOutputStream bos &#x3D; new BufferedOutputStream(new FileOutputStream(“..”));</p><blockquote><p>1、一次写一个int类型的数据<br>    bos.write(97);<br>2、一次写一个字节数组<br>    bos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    bos.write(bytes,1,3);</p></blockquote><h4 id="字符流-x3D-字节流-编码表"><a href="#字符流-x3D-字节流-编码表" class="headerlink" title="字符流 &#x3D; 字节流 + 编码表"></a>字符流 &#x3D; 字节流 + 编码表</h4><h5 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h5><p>Reader – InputStreamReader</p><p>InputStreamReader isr &#x3D; new InputStreamReader(new FileInputStream(“…”));</p><h6 id="1、一次读取一个字符"><a href="#1、一次读取一个字符" class="headerlink" title="1、一次读取一个字符"></a>1、一次读取一个字符</h6><p>​    int ch &#x3D; 0;<br>​    while((ch&#x3D;isr.read())!&#x3D;-1){<br>​            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>​    }</p><h6 id="2、一次读取一个字符数组"><a href="#2、一次读取一个字符数组" class="headerlink" title="2、一次读取一个字符数组"></a>2、一次读取一个字符数组</h6><p>​    char[] chars &#x3D; new char[1024];</p><p>​    int length &#x3D; 0;</p><p>​    while((length&#x3D;isr.read(chars))!&#x3D;-1){<br>​            String s &#x3D; new String(chars,0,length);<br>​            System.out.print(s);</p><p>}</p><h6 id="简化写法："><a href="#简化写法：" class="headerlink" title="简化写法："></a>简化写法：</h6><p>fileReader</p><p>fileReader fr &#x3D; new FileReader(“…”);<br>1、一次读取一个字符<br>              int ch &#x3D; 0;<br>              while((ch&#x3D;fr.read())!&#x3D;-1){<br>                 System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>              }</p><p> 2）一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;fr.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);</p><p>​        System.out.print(s);</p><p>}</p><h5 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h5><p>BufferedReader</p><p>BufferedReader br &#x3D; new BufferedReader(new OutputStreamReader(new FileOutputStream(“文件”)))</p><p> &#x2F;&#x2F;简化写法改进：<br>BufferedReader br &#x3D; new BufferedReader(new FileReader(“…”));<br>1、一次读取一个字符<br>    int ch &#x3D; 0;<br>    while((ch&#x3D;br.read())!&#x3D;-1){<br>            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>    }</p><p>2、一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;br.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);<br>            System.out.print(s);<br>    }</p><p>3、使用特殊方法一次读取一行</p><p>​    String line &#x3D; null;<br>​    while((line &#x3D; br.readLine())!&#x3D;null){<br>​            System.out.print(line);</p><p>​    }</p><h5 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h5><p>Writer –OutputStreamWriter</p><p>OutputStreamWriter osw &#x3D; new OutputStreamWriter(new FileOutputStream(“文件”));</p><p>简化写法：FileWriter<br>FileWriter fw &#x3D; new FileWriter(“…”);</p><h5 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h5><p>BufferedWriter</p><p>BufferedWriter bw &#x3D; new BufferedWriter(new OutputStreamWriter(new FileOutputStream(“文件”)));<br>简化写法改进：BufferedWriter bw &#x3D; new BufferedWriter(new FileWriter(“文件”));</p><p>特殊的方法：写换行符：newLine();</p>]]></content>
    
    
    <summary type="html">对学习Java中IO流的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>File类</title>
    <link href="http://example.com/2022/04/08/File%E7%B1%BB/"/>
    <id>http://example.com/2022/04/08/File%E7%B1%BB/</id>
    <published>2022-04-07T16:00:00.000Z</published>
    <updated>2022-05-23T06:29:00.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h4><blockquote><p>•public File(String pathname)</p><p>•public File(String parent,String child)</p><p>•public File(File parent,String child)</p></blockquote><h4 id="File类的成员方法"><a href="#File类的成员方法" class="headerlink" title="File类的成员方法"></a>File类的成员方法</h4><h5 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h5><p>•public boolean createNewFile()</p><p>•public boolean mkdir()</p><p>•public boolean mkdirs()</p><h5 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h5><p>•public boolean delete()</p><h5 id="重命名功能"><a href="#重命名功能" class="headerlink" title="重命名功能"></a>重命名功能</h5><p>•public boolean renameTo(File dest)</p><h5 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h5><p>•public boolean isDirectory()    判断是不是文件夹</p><p>•public boolean isFile()    判断是不是文件</p><p>•public boolean exists()    判断是否存在</p><p>•public boolean canRead()    判断是否可读</p><p>•public boolean canWrite()    判断是否可写</p><p>•public boolean isHidden()    判断是否隐藏</p><h5 id="基本获取功能"><a href="#基本获取功能" class="headerlink" title="基本获取功能"></a>基本获取功能</h5><p>•public String getAbsolutePath()    获取完整路径（绝对路径）</p><p>•public String getPath()    获取相对路径</p><p>•public String getName()    获取名称</p><p>•public long length()    获取文件或者文件夹的字节数</p><p>•public long lastModified()    获取文件最后一次修改时间，时间戳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;测试文件&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified());</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="高级获取功能"><a href="#高级获取功能" class="headerlink" title="高级获取功能"></a>高级获取功能</h5><p>•public String[] list()    将指定目录下的所有文件和文件夹的名称组成一个数组</p><p>•public File[] listFiles()    将指定目录下的所有文件和文件夹返回File对象数组，使用增强for循环遍历</p><h5 id="文件名称过滤器"><a href="#文件名称过滤器" class="headerlink" title="文件名称过滤器"></a>文件名称过滤器</h5><p>•public String[] list(FilenameFilter filter)    将指定目录下文件的名称过滤后组成一个数组</p><p>•public File[] listFiles(FilenameFilter filter)    将指定目录下文件的名称过滤后组成一个file对象数组</p>]]></content>
    
    
    <summary type="html">对学习Java中File类的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Collection集合</title>
    <link href="http://example.com/2022/04/04/collection%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2022/04/04/collection%E9%9B%86%E5%90%88/</id>
    <published>2022-04-03T16:00:00.000Z</published>
    <updated>2022-05-23T06:28:10.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection(接口)"></a>Collection(接口)</h3><h4 id="–-List-允许元素重复，且有序（存储和取出顺序一致）-接口"><a href="#–-List-允许元素重复，且有序（存储和取出顺序一致）-接口" class="headerlink" title="– List:允许元素重复，且有序（存储和取出顺序一致）(接口)"></a>– List:允许元素重复，且有序（存储和取出顺序一致）(接口)</h4><h5 id="–-ArrayList"><a href="#–-ArrayList" class="headerlink" title="– ArrayList"></a>– ArrayList</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程不安全，效率高</p></blockquote><h5 id="–-Vector"><a href="#–-Vector" class="headerlink" title="– Vector"></a>– Vector</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程安全，效率低</p></blockquote><h5 id="–-LinkedList"><a href="#–-LinkedList" class="headerlink" title="– LinkedList"></a>– LinkedList</h5><blockquote><p>底层数据结构是双链表，查询慢，增删快<br>线程不安全，效率高</p></blockquote><h5 id="List相关集合特点："><a href="#List相关集合特点：" class="headerlink" title="List相关集合特点："></a>List相关集合特点：</h5><blockquote><p>1、存在索引下标的概念，可以通过get()方法，通过索引获取集合中的元素<br>2、存储的元素和取出的顺序一致</p></blockquote><h4 id="–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口"><a href="#–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口" class="headerlink" title="– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)"></a>– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)</h4><h5 id="–-HashSet"><a href="#–-HashSet" class="headerlink" title="– HashSet"></a>– HashSet</h5><blockquote><p>底层数据结构是哈希表（元素是以链表节点的形式存在）<br>哈希表保证了元素的唯一性<br>线程不安全，效率高</p></blockquote><h5 id="–-LinkedHashSet"><a href="#–-LinkedHashSet" class="headerlink" title="– LinkedHashSet"></a>– LinkedHashSet</h5><blockquote><p>底层数据结构是双链表和哈希表共同决定的<br>哈希表保证元素的唯一性<br>双链表保证元素的顺序</p></blockquote><h5 id="–-TreeSet"><a href="#–-TreeSet" class="headerlink" title="– TreeSet"></a>– TreeSet</h5><blockquote><p>底层数据结构是红黑树（自平衡二叉树）<br>提供了两种排序方案：<br>1）自然排序<br>要求元素类实现Comparable<T>接口，并重写compareTo()方法<br>2）比较器排序<br>实现起来有两种方式，第一种是写具体的子类实现Comparator<T>接口，并重写compare(..,..)方法<br>第二种是匿名内部类当作TreeSet构造方法参数传入。</p></blockquote><h4 id="注意：遍历Collection集合的方式："><a href="#注意：遍历Collection集合的方式：" class="headerlink" title="注意：遍历Collection集合的方式："></a>注意：遍历Collection集合的方式：</h4><blockquote><p>1、迭代器遍历<br>2、增强for循环<br>3、注意，其中我们说过的get()和size()方法使用普通for循环仅仅适用于List相关集合，因为只有List相关集合才存在索引下标。</p></blockquote>]]></content>
    
    
    <summary type="html">对学习Java中Collection集合的一些知识笔记</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
</feed>
