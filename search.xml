<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/04/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>一般是指  <strong>OSI</strong>（Open System Interconnection开放系统互连）参考模型</p><p> TCP&#x2F;IP参考模型</p><p><img src="https://s2.loli.net/2022/04/12/im2Ahos6F5baYTI.png" alt="屏幕截图 2022-04-12 223205"></p><h4 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h4><p>1、IP地址:InetAddress</p><p>2、端口号</p><p>3、传输协议：UDP、TCP</p><h5 id="InetAddress类的使用"><a href="#InetAddress类的使用" class="headerlink" title="InetAddress类的使用"></a>InetAddress类的使用</h5><blockquote><p>获取任意主机：getByName</p><p>主机名：getHostName</p><p>主机Ip地址：getHostAddress</p></blockquote><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><blockquote><p>1、物理端口     网卡口</p></blockquote><blockquote><p>2、逻辑端口     一般端口号指的就是逻辑端口</p><p>有效端口：0<del>65535，其中0</del>1024系统使用或保留端口        通过netstat -ano可以查看端口号</p></blockquote><h5 id="传输协议：UDP、TCP"><a href="#传输协议：UDP、TCP" class="headerlink" title="传输协议：UDP、TCP"></a>传输协议：UDP、TCP</h5><blockquote><p>UDP：将数据源和目的封装成数据包中，不需要建立连接；每个数据报包的大小在限制在64k；因无连接，是不可靠协议；不需要建立连接，速度快</p></blockquote><blockquote><p>TCP：建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连接，是可靠协议；必须建立连接，效率会稍低</p></blockquote><h5 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h5><p>Socket套接字：</p><blockquote><p>•网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</p><p>Socket原理机制：</p><p>•通信的两端都有Socket。</p><p>•网络通信其实就是Socket间的通信。</p><p>•数据在两个Socket间通过IO传输。</p></blockquote><p><img src="https://s2.loli.net/2022/04/12/ztSLHWufJV4QpXm.png" alt="image-20220412213817650"></p><h5 id="UDP传输"><a href="#UDP传输" class="headerlink" title="UDP传输"></a>UDP传输</h5><blockquote><p>1、DatagramSocket与DatagramPacket</p><p>2、建立发送端，接收端。</p><p>3、建立数据包。</p><p>4、调用Socket的发送接收方法。</p><p>5、关闭Socket。</p><p>6、发送端与接收端是两个独立的运行程序。</p></blockquote><h5 id="UDP传输-发送端思路"><a href="#UDP传输-发送端思路" class="headerlink" title="UDP传输-发送端思路"></a>UDP传输-发送端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:将要发送的数据封装成数据包</p><p>3:通过udp的socket服务,将数据包发送出</p><p>4:关闭资源</p></blockquote><h5 id="UDP传输-接收端思路"><a href="#UDP传输-接收端思路" class="headerlink" title="UDP传输-接收端思路"></a>UDP传输-接收端思路</h5><blockquote><p>1:建立udp的socket服务</p><p>2:通过receive方法接收数据</p><p>3:将收到的数据存储到数据包对象中</p><p>4:通过数据包对象的功能来完成对接收到数据进行解析</p><p>5:可以对资源进行关闭</p></blockquote><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h5><blockquote><p>1、Socket和ServerSocket</p><p>2、建立客户端和服务器端</p><p>3、建立连接后，通过Socket中的IO流进行数据的传输</p><p>4、关闭socket</p><p>5、同样，客户端与服务器端是两个独立的应用程序。</p></blockquote><h5 id="TCP传输-客户端思路"><a href="#TCP传输-客户端思路" class="headerlink" title="TCP传输-客户端思路"></a>TCP传输-客户端思路</h5><blockquote><p>1:建立客户端的Socket服务,并明确要连接的服务器。</p><p>2:如果连接建立成功,就表明,已经建立了数据传输的通道.就可以在该通道通过IO进行数据的读取和写入.该通道称为Socket流,Socket流中既有读取流,也有写入流.</p><p>3:通过Socket对象的方法,可以获取这两个流</p><p>4:通过流的对象可以对数据进行传输</p><p>5:如果传输数据完毕,关闭资源</p></blockquote><h5 id="TCP传输-服务器端思路"><a href="#TCP传输-服务器端思路" class="headerlink" title="TCP传输-服务器端思路"></a>TCP传输-服务器端思路</h5><blockquote><p>1:建立服务器端的socket服务，需要一个端口</p><p>2:服务端没有直接流的操作,而是通过accept方法获取客户端对象，在通过获取到的客户端对象的流和客户端进行通信</p><p>3:通过客户端的获取流对象的方法,读取数据或者写入数据</p><p>4:如果服务完成,需要关闭客户端,然后关闭服务器，但是,一般会关闭客户端,不会关闭服务器,因为服务端是一直提供服务的</p></blockquote><h5 id="TCP传输容易出现的问题"><a href="#TCP传输容易出现的问题" class="headerlink" title="TCP传输容易出现的问题"></a>TCP传输容易出现的问题</h5><blockquote><p>客户端连接上服务端，两端都在等待，没有任何数据传输。</p><p>通过例程分析：</p><p>因为read方法或者readLine方法是阻塞式。</p><p>解决办法：</p><p>自定义结束标记</p><p>使用shutdownInput，shutdownOutput方法。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2022/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h4><blockquote><p>是指正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都有它自己的内存空间和资源，在windows下通过任务管理器查看</p></blockquote><h4 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h4><blockquote><p>是进程的单个顺序控制流，或者就是说是一个单独执行的路径<br>如果一个进程只有一条执行路径，称之为单线程<br>如果一个进程有多条执行路径，称之为多线程<br><strong>线程</strong>包含在<strong>进程</strong>中</p></blockquote><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><blockquote><p>指一个程序中所有的任务都是按照先后顺序执行的，在前一个任务还没有处理完的情况下，是不会进行处理下一个任务的。<br>举例：理发店只有一个理发师，很多人去理发，就需要排队，就有先后顺序，先等前面的人理完发，再轮到后面的人。</p></blockquote><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><blockquote><p>指将任务分给不同的处理器去处理，每一个处理器中的任务再进行串行处理<br>举例：火车站上有很多卖票窗口，多个窗口同时卖票，但是呢，针对于某一个窗口来说，是一个接着一个去处理的。</p></blockquote><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>指一个现象，并发需要处理器的支持，比如在处理一个任务的时候，操作系统可以调用资源去处理其他的任务，这个任务并行还是串行都可以。<br>无论是串行还是并行，都需要处理支持并发。<br>举例：假设喝水是一个任务，每个火车站售票员，他再售票的同时也能喝水，这就表示支持并发。</p></blockquote><h5 id="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"><a href="#在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。" class="headerlink" title="在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。"></a><strong>在启动JVM的时候，最低的要求是需要启动两个线程，其中包含了主线程，垃圾回收线程所以JVM启动的时候是多线程程序。</strong></h5><h4 id="java中实现线程的方式"><a href="#java中实现线程的方式" class="headerlink" title="java中实现线程的方式"></a>java中实现线程的方式</h4><blockquote><p>有三种</p></blockquote><blockquote><p>第一种，继承Thread类，重写run方法，使用start启动线程；（thread默认是从0开始）<br>第一种，实现Runnable接口，实现run方法，借助Thread类创建线程对象，使用start方法启动；<br>第三种，实现Callable接口，实现call方法，需要结合线程池的方式创建线程对象，提交到线程池执行。（thread默认是从1开始）</p></blockquote><h5 id="start-启动线程"><a href="#start-启动线程" class="headerlink" title="start() 启动线程"></a>start() 启动线程</h5><h5 id="setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"><a href="#setName-给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）" class="headerlink" title="setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）"></a>setName() 给线程命名，还有一种方法是在创建线程对象的同时给线程命名（需要自己添加有参和无参构造方法）</h5><h5 id="getName-获取线程名字"><a href="#getName-获取线程名字" class="headerlink" title="getName() 获取线程名字"></a>getName() 获取线程名字</h5><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><h5 id="线程有两种调度模型："><a href="#线程有两种调度模型：" class="headerlink" title="线程有两种调度模型："></a>线程有两种调度模型：</h5><blockquote><p>1、分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片<br>2、抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。</p></blockquote><h5 id="Java使用的是抢占式调度模型"><a href="#Java使用的是抢占式调度模型" class="headerlink" title="Java使用的是抢占式调度模型"></a>Java使用的是抢占式调度模型</h5><blockquote><p>1、线程的默认优先级是5<br>2、设置优先级的时候，范围是1-10<br>3、线程的优先级越高仅仅表示的是获取CPU时间片的机率会高一些，并不能保证一定会先执行。</p></blockquote><h5 id="获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。"><a href="#获取线程中的优先级方法：public-final-int-getPriority-返回此线程的优先级。" class="headerlink" title="获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。"></a>获取线程中的优先级方法：public final int getPriority() 返回此线程的优先级。</h5><p>设置线程优先级的方法：public final void setPriority(int newPriority) 更改此线程的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>; 线程可以拥有的最小的优先级</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>; 线程可以拥有的最大的优先级</span><br></pre></td></tr></table></figure><h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><h5 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h5 id="线程加入"><a href="#线程加入" class="headerlink" title="线程加入"></a>线程加入</h5><blockquote><p>public final void join()    加入线程<br>线程对象调用该方法的时候，目的是让调用该方法的当前线程先执行完，执行完毕后，再让其他线程执行，其他没有调用join方法的线程，他们之间还是会抢CPU执行权的。</p></blockquote><p><strong>注意：join方法的调用，必须是紧跟着当前线程start()方法后调用，否则不起作用。</strong></p><h5 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h5><blockquote><p>public final void yield()    礼让线程</p></blockquote><blockquote><p>礼让线程的目的是暂停当前正在执行的线程，并让其他线程执行，它的作用实际上是为了让线程之间看起来更加和谐，它并不能保证多个线程之间一人一次。</p></blockquote><h5 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h5><blockquote><p>public final void setDaemon(boolean on)    后台线程(守护线程)</p><p><strong>Java中有两类：用户线程，守护线程</strong><br><strong>用户线程</strong>：在学习线程之前，运行起来的一个一个程序中的线程都是用户线程<br><strong>守护线程</strong>：所谓的守护线程，指的是程序运行的时候，在后台提供了一个通用的服务线程，比如说垃圾回收线程，就是一个守护线程。这种线程不一定是要存在的，但是可能程序会出问题。只要程序存在用户线程，程序就不会停止.</p><p><strong>守护线程进行设置</strong><br>   public final void setDaemon(boolean on)</p><p>注意事项：</p><p>​    <strong>守护线程必须在启动之前进行设置</strong></p></blockquote><h5 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h5><blockquote><p>public final void stop()    已弃用<br>public void interrupt()    打断线程</p></blockquote><h5 id="休眠线程"><a href="#休眠线程" class="headerlink" title="休眠线程"></a>休眠线程</h5><blockquote><p>public static void sleep(long millis)    休眠线程（睡眠线程）</p></blockquote><h4 id="线程的生命周期图"><a href="#线程的生命周期图" class="headerlink" title="线程的生命周期图"></a>线程的生命周期图</h4><p><img src="https://s2.loli.net/2022/04/11/SYz8thrRo27uw6N.png" alt="image-20220411225244933"></p><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>•格式：</p><p><strong>synchronized</strong>(对象){</p><p>​        需要同步的代码;</p><p>}</p><blockquote><p>同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。</p></blockquote><h5 id="同步的前提"><a href="#同步的前提" class="headerlink" title="同步的前提"></a>同步的前提</h5><blockquote><p>•多个线程</p></blockquote><blockquote><p>•多个线程使用的是同一个锁对象</p></blockquote><h5 id="同步的好处"><a href="#同步的好处" class="headerlink" title="同步的好处"></a>同步的好处</h5><blockquote><p>•同步的出现解决了多线程的安全问题。</p></blockquote><h5 id="同步的弊端"><a href="#同步的弊端" class="headerlink" title="同步的弊端"></a>同步的弊端</h5><blockquote><p>•当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。</p></blockquote><h5 id="同步弊端"><a href="#同步弊端" class="headerlink" title="同步弊端"></a>同步弊端</h5><blockquote><p>•效率低</p></blockquote><blockquote><p>•如果出现了同步嵌套，就容易产生死锁问题</p></blockquote><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><blockquote><p>•是指两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象</p></blockquote><h4 id="线程的状态转换图"><a href="#线程的状态转换图" class="headerlink" title="线程的状态转换图"></a>线程的状态转换图</h4><p><img src="https://s2.loli.net/2022/04/11/pPl9cG7ZnMdLxOB.png" alt="image-20220411225833446"></p><h4 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a><strong>线程组</strong></h4><blockquote><p>Java中使用<strong>ThreadGroup</strong>来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</p><p>•默认情况下，所有的线程都属于主线程组。</p><p>•<strong>public final ThreadGroup getThreadGroup()</strong></p><p>•我们也可以给线程设置分组</p><p>•<strong>Thread(ThreadGroup group, Runnable target, String name)</strong> </p></blockquote><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><p>•线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。</p></blockquote><p>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法</p><p>•public static ExecutorService newCachedThreadPool()</p><p>•public static ExecutorService newFixedThreadPool(int nThreads)</p><p>•public static ExecutorService newSingleThreadExecutor()</p><p>•这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</p><p>•Future&lt;?&gt; submit(Runnable task)</p><p>•<T> Future<T> submit(Callable<T> task)</p><p>•案例演示</p><p>•创建线程池对象</p><p>•创建Runnable实例</p><p>•提交Runnable实例</p><p>•关闭线程池</p><h4 id="匿名内部类方式使用多线程"><a href="#匿名内部类方式使用多线程" class="headerlink" title="匿名内部类方式使用多线程"></a><strong>匿名内部类方式使用多线程</strong></h4><blockquote><p>匿名内部类方式使用多线程</p><p>new Thread(){代码…}.start();</p><p>New Thread(new Runnable(){代码…}).start();</p></blockquote><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><blockquote><p>在java中可以通过Timer和TimerTask类来实现定义调度的功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建定时对象</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">MyTask</span>(timer),<span class="number">2000</span>,<span class="number">3000</span>);<span class="comment">//2秒后开始打印，并且每隔3秒执行一次打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Timer timer;</span><br><span class="line">        MyTask(Timer timer)&#123;</span><br><span class="line">            <span class="built_in">this</span>.timer=timer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"><span class="comment">//            timer.cancel();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AzKaBan是一个完全由java编写的开源调度框架</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><blockquote><p>1、创建型    创建对象</p><p>2、结构型    对象的组成</p><p>3、行为型    对象的功能</p></blockquote><h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p><strong>1、单例模式</strong>    指的是在程序运行过程中，内存只允许有一个对象存在</p><blockquote><p>保障类在内存中只有一个对象</p><p>1、构造方法私有化</p><p>2、在类的内部成员变量位置上创建一个对象</p><p>3、提供公共的方法将唯一的对象返回出来获取</p></blockquote><p>​    饿汉式：类一加载，对象就创建好了（线程安全）</p><p>​    懒汉式：用的时候，再创建对象</p><p><strong>2、简单工厂模式</strong></p><p><strong>3、工厂方法模式</strong> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/04/08/Io%E6%B5%81/"/>
      <url>/2022/04/08/Io%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><blockquote><p>按照流向：输入流、输出流</p></blockquote><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节"><a href="#1、一次读取一个字节" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>int b &#x3D; 0；</p><p>while(b &#x3D; fis.read() !&#x3D; -1){</p><p>​        Systeam.out.println((char) b );</p><p>}</p><h6 id="2、一次读取一个字节数组"><a href="#2、一次读取一个字节数组" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>byte[] bytes &#x3D; new byte[1024];</p><p>int   length &#x3D; 0;</p><p>while((length &#x3D; fis.read(bytes)) !&#x3D; -1){</p><p>​        String s &#x3D; new String(bytes,0,length);</p><p>​        Systeam.out.print(s);</p><p>}</p><h5 id="字节缓冲输入流"><a href="#字节缓冲输入流" class="headerlink" title="字节缓冲输入流"></a>字节缓冲输入流</h5><p>BufferedInputStream</p><p>BufferedInputStteam bis &#x3D; new BufferedInputStream(new FileInputStream(“文件名”))；</p><blockquote><p>读取数据的两种方式：</p></blockquote><h6 id="1、一次读取一个字节-1"><a href="#1、一次读取一个字节-1" class="headerlink" title="1、一次读取一个字节"></a>1、一次读取一个字节</h6><p>​        int b &#x3D; 0;<br>​        while((b&#x3D;bis.read()) !&#x3D; -1){<br>​                System.out.print((char)b);<br>​        }</p><h6 id="2、一次读取一个字节数组-1"><a href="#2、一次读取一个字节数组-1" class="headerlink" title="2、一次读取一个字节数组"></a>2、一次读取一个字节数组</h6><p>​        byte[] bytes &#x3D; new byte[1024];<br>​        int length &#x3D; 0;<br>​        while((length &#x3D; bis.read(bytes)) !&#x3D; -1){<br>​                String s &#x3D; new String(bytes,0,length);<br>​                System.out.print(s);</p><p>}</p><h5 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h5><p>InputStream（抽象父类）</p><p>FileInputStream（具体继承子类）</p><p>如果目标文件不存在，会自动创建</p><p>FileInputStream fis &#x3D; new FileInputStream(“文件名”)</p><blockquote><p>1、一次写一个int类型的数据<br>    fos.write(97);<br>2、一次写一个字节数组<br>    fos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    fos.write(bytes,1,3);</p></blockquote><h5 id="字节缓冲输出流"><a href="#字节缓冲输出流" class="headerlink" title="字节缓冲输出流"></a>字节缓冲输出流</h5><p>BufferedOutputStream</p><p>BufferedOutputStream bos &#x3D; new BufferedOutputStream(new FileOutputStream(“..”));</p><blockquote><p>1、一次写一个int类型的数据<br>    bos.write(97);<br>2、一次写一个字节数组<br>    bos.write(bytes);<br>3、一次写一个字节数组的一部分<br>    bos.write(bytes,1,3);</p></blockquote><h4 id="字符流-x3D-字节流-编码表"><a href="#字符流-x3D-字节流-编码表" class="headerlink" title="字符流 &#x3D; 字节流 + 编码表"></a>字符流 &#x3D; 字节流 + 编码表</h4><h5 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h5><p>Reader – InputStreamReader</p><p>InputStreamReader isr &#x3D; new InputStreamReader(new FileInputStream(“…”));</p><h6 id="1、一次读取一个字符"><a href="#1、一次读取一个字符" class="headerlink" title="1、一次读取一个字符"></a>1、一次读取一个字符</h6><p>​    int ch &#x3D; 0;<br>​    while((ch&#x3D;isr.read())!&#x3D;-1){<br>​            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>​    }</p><h6 id="2、一次读取一个字符数组"><a href="#2、一次读取一个字符数组" class="headerlink" title="2、一次读取一个字符数组"></a>2、一次读取一个字符数组</h6><p>​    char[] chars &#x3D; new char[1024];</p><p>​    int length &#x3D; 0;</p><p>​    while((length&#x3D;isr.read(chars))!&#x3D;-1){<br>​            String s &#x3D; new String(chars,0,length);<br>​            System.out.print(s);</p><p>}</p><h6 id="简化写法："><a href="#简化写法：" class="headerlink" title="简化写法："></a>简化写法：</h6><p>fileReader</p><p>fileReader fr &#x3D; new FileReader(“…”);<br>1、一次读取一个字符<br>              int ch &#x3D; 0;<br>              while((ch&#x3D;fr.read())!&#x3D;-1){<br>                 System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>              }</p><p> 2）一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;fr.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);</p><p>​        System.out.print(s);</p><p>}</p><h5 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h5><p>BufferedReader</p><p>BufferedReader br &#x3D; new BufferedReader(new OutputStreamReader(new FileOutputStream(“文件”)))</p><p> &#x2F;&#x2F;简化写法改进：<br>BufferedReader br &#x3D; new BufferedReader(new FileReader(“…”));<br>1、一次读取一个字符<br>    int ch &#x3D; 0;<br>    while((ch&#x3D;br.read())!&#x3D;-1){<br>            System.out.print((char)ch); &#x2F;&#x2F;这里不会出现乱码<br>    }</p><p>2、一次读取一个字符数组<br>    char[] chars &#x3D; new char[1024];<br>    int length &#x3D; 0;<br>    while((length&#x3D;br.read(chars))!&#x3D;-1){<br>            String s &#x3D; new String(chars,0,length);<br>            System.out.print(s);<br>    }</p><p>3、使用特殊方法一次读取一行</p><p>​    String line &#x3D; null;<br>​    while((line &#x3D; br.readLine())!&#x3D;null){<br>​            System.out.print(line);</p><p>​    }</p><h5 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h5><p>Writer –OutputStreamWriter</p><p>OutputStreamWriter osw &#x3D; new OutputStreamWriter(new FileOutputStream(“文件”));</p><p>简化写法：FileWriter<br>FileWriter fw &#x3D; new FileWriter(“…”);</p><h5 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h5><p>BufferedWriter</p><p>BufferedWriter bw &#x3D; new BufferedWriter(new OutputStreamWriter(new FileOutputStream(“文件”)));<br>简化写法改进：BufferedWriter bw &#x3D; new BufferedWriter(new FileWriter(“文件”));</p><p>特殊的方法：写换行符：newLine();</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><p><img src="https://s2.loli.net/2022/04/06/asuo1fbJLt4mIRZ.png" alt="image-20220406205727748"></p><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><p><img src="https://s2.loli.net/2022/04/06/oWvhCb9R1UucIVO.png" alt="image-20220406205910981"></p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><img src="https://s2.loli.net/2022/04/06/lQZNqR4ijroWKFc.png" alt="image-20220406210017338"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://s2.loli.net/2022/04/06/1FmKhpXzNIdqu8x.png" alt="image-20220406210122779"></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="https://s2.loli.net/2022/04/06/j1lcME2yN3axgSG.png" alt="image-20220406210221158"></p><blockquote><p>给定N个权值作为N个<a href="https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)</p></blockquote><blockquote><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Collection集合</title>
      <link href="/2022/04/05/collection%E9%9B%86%E5%90%88/"/>
      <url>/2022/04/05/collection%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection(接口)"></a>Collection(接口)</h3><h4 id="–-List-允许元素重复，且有序（存储和取出顺序一致）-接口"><a href="#–-List-允许元素重复，且有序（存储和取出顺序一致）-接口" class="headerlink" title="– List:允许元素重复，且有序（存储和取出顺序一致）(接口)"></a>– List:允许元素重复，且有序（存储和取出顺序一致）(接口)</h4><h5 id="–-ArrayList"><a href="#–-ArrayList" class="headerlink" title="– ArrayList"></a>– ArrayList</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程不安全，效率高</p></blockquote><h5 id="–-Vector"><a href="#–-Vector" class="headerlink" title="– Vector"></a>– Vector</h5><blockquote><p>底层数据结构是数组，查询快，增删慢<br>线程安全，效率低</p></blockquote><h5 id="–-LinkedList"><a href="#–-LinkedList" class="headerlink" title="– LinkedList"></a>– LinkedList</h5><blockquote><p>底层数据结构是双链表，查询慢，增删快<br>线程不安全，效率高</p></blockquote><h5 id="List相关集合特点："><a href="#List相关集合特点：" class="headerlink" title="List相关集合特点："></a>List相关集合特点：</h5><blockquote><p>1、存在索引下标的概念，可以通过get()方法，通过索引获取集合中的元素<br>2、存储的元素和取出的顺序一致</p></blockquote><h4 id="–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口"><a href="#–-Set-元素唯一，且无序（存储和取出的顺序不能保证）-接口" class="headerlink" title="– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)"></a>– Set:元素唯一，且无序（存储和取出的顺序不能保证）(接口)</h4><h5 id="–-HashSet"><a href="#–-HashSet" class="headerlink" title="– HashSet"></a>– HashSet</h5><blockquote><p>底层数据结构是哈希表（元素是以链表节点的形式存在）<br>哈希表保证了元素的唯一性<br>线程不安全，效率高</p></blockquote><h5 id="–-LinkedHashSet"><a href="#–-LinkedHashSet" class="headerlink" title="– LinkedHashSet"></a>– LinkedHashSet</h5><blockquote><p>底层数据结构是双链表和哈希表共同决定的<br>哈希表保证元素的唯一性<br>双链表保证元素的顺序</p></blockquote><h5 id="–-TreeSet"><a href="#–-TreeSet" class="headerlink" title="– TreeSet"></a>– TreeSet</h5><blockquote><p>底层数据结构是红黑树（自平衡二叉树）<br>提供了两种排序方案：<br>1）自然排序<br>要求元素类实现Comparable<T>接口，并重写compareTo()方法<br>2）比较器排序<br>实现起来有两种方式，第一种是写具体的子类实现Comparator<T>接口，并重写compare(..,..)方法<br>第二种是匿名内部类当作TreeSet构造方法参数传入。</p></blockquote><h4 id="注意：遍历Collection集合的方式："><a href="#注意：遍历Collection集合的方式：" class="headerlink" title="注意：遍历Collection集合的方式："></a>注意：遍历Collection集合的方式：</h4><blockquote><p>1、迭代器遍历<br>2、增强for循环<br>3、注意，其中我们说过的get()和size()方法使用普通for循环仅仅适用于List相关集合，因为只有List相关集合才存在索引下标。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/04/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p>需求：编写一个java程序检验qq号是否符合规范</p><p>​    1、必须全部都是数字</p><p>​    2、必须是5-10</p><p>​    3、不能以0开头</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：编写一个java程序检验qq号是否符合规范</span></span><br><span class="line"><span class="comment">    1、必须是5-10</span></span><br><span class="line"><span class="comment">    2、不能以0开头</span></span><br><span class="line"><span class="comment">3、必须全部都是数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1165872335&quot;</span>;</span><br><span class="line">        System.out.println(checkQQ(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//感受一下使用正则表达式来解决这个需求</span></span><br><span class="line">        System.out.println(checkQQ2(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ2</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正则表达式可以很容易地完成字符串地查找匹配替换等工作</span></span><br><span class="line">        <span class="comment">//正则表达式实现</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[1-9][0-9]&#123;4,9&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> s.matches(regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是5-10位</span></span><br><span class="line">        <span class="keyword">if</span>(s.length()&gt;=<span class="number">5</span> &amp;&amp; s.length()&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//不能以0开头</span></span><br><span class="line">            <span class="keyword">if</span>(!s.startsWith(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将字符串转成字符数组</span></span><br><span class="line">                <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++)&#123;</span><br><span class="line">                    <span class="comment">//包装类Character类中有一个方法可以进行判断该字符是否是数字</span></span><br><span class="line">                    <span class="comment">//public static boolean isDigit(char ch)确定指定的字符是否是数字。</span></span><br><span class="line">                    <span class="keyword">if</span>(!Character.isDigit(chars[i]))&#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;长度不符合规范，不是qq号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">长度不符合规范，不是qq号</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="学习正则表达式-正则表达式本身是一个字符串"><a href="#学习正则表达式-正则表达式本身是一个字符串" class="headerlink" title="学习正则表达式(正则表达式本身是一个字符串)"></a>学习正则表达式(正则表达式本身是一个字符串)</h4><blockquote><p>学习正则表达式的目的：通过正则表达式进行处理字符串的复杂的查找&#x2F;替换&#x2F;匹配&#x2F;分割等工作。</p><p>正则表达式是一个独立于任何一门语言的技术，不依附于java,但是它可以在java中进行使用，也可以在python&#x2F;Js等语言中进行使用</p></blockquote><h3 id="正则表达式的概述"><a href="#正则表达式的概述" class="headerlink" title="正则表达式的概述"></a>正则表达式的概述</h3><blockquote><p>概念：使用单个字符串来描述或者匹配一系列符合某种语法规则的字符串</p><p>正则表达式的使用步骤：</p><p>​    1、使用大量的字符串来寻找规律使用正则语法来定义规则<br>​    2、使用这种规则区匹配新的字符串</p><p>​    3、匹配成功后的相应的操作</p></blockquote><p><a href="mailto:&#x31;&#49;&#54;&#x35;&#56;&#55;&#50;&#x33;&#51;&#53;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x31;&#49;&#54;&#x35;&#56;&#55;&#50;&#x33;&#51;&#53;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;</a></p><h3 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h3><h4 id="1、原义字符（字符本身就可以当作一个正则表达式）"><a href="#1、原义字符（字符本身就可以当作一个正则表达式）" class="headerlink" title="1、原义字符（字符本身就可以当作一个正则表达式）"></a>1、原义字符（字符本身就可以当作一个正则表达式）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a\b\c\...\z \t \r \n</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        原义字符（字符本身就可以当作一个正则表达式）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc12342121sadsa&amp;.;123!&quot;</span>;</span><br><span class="line">        <span class="comment">//String replaceAll(String regex, String replacement)</span></span><br><span class="line">        <span class="comment">//用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串。</span></span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_bc12342121s_ds_&amp;.;<span class="number">123</span>!</span><br></pre></td></tr></table></figure><h4 id="正则表达是元字符高级用法"><a href="#正则表达是元字符高级用法" class="headerlink" title="正则表达是元字符高级用法"></a>正则表达是元字符高级用法</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”&#96;(?&lt;&#x3D;95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”&#96;(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h5 id="字符类："><a href="#字符类：" class="headerlink" title="字符类："></a>字符类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式的语法规则：</span></span><br><span class="line"><span class="comment">        字符类：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//[]作用是将字符进行分类，可以匹配到中括号中的任意一个字符</span></span><br><span class="line">        <span class="comment">//[abc]将来会匹配到abc中任意一个字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[abc]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc1234cc21c21sadcsa&amp;.;123!&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">___1234__21_21s_d_s_&amp;.;<span class="number">123</span>!</span><br></pre></td></tr></table></figure><h5 id="范围类："><a href="#范围类：" class="headerlink" title="范围类："></a>范围类：</h5><blockquote><p>其实就是在字符类的基础之上增加了一个范围</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        范围类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求1：我想要匹配所有的小写字母</span></span><br><span class="line"><span class="comment">//        String regex = &quot;[abcdefghijklmnopqrstuvwxyz]&quot;;</span></span><br><span class="line">        <span class="comment">//[a-z]表示匹配a到z中的所有小写字母</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-z]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcABC1234ERQcc21c21sDASadcsABCCa&amp;.;123!&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我想要匹配所有的大写字母</span></span><br><span class="line">        regex = <span class="string">&quot;[A-Z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：我即想要匹配小写字母，也想要匹配大写字母</span></span><br><span class="line"><span class="comment">//        regex = &quot;[a-zA-Z]&quot;;</span></span><br><span class="line">        regex = <span class="string">&quot;[A-z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：我想要匹配所有的数字</span></span><br><span class="line">        regex = <span class="string">&quot;[0-9]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：我想匹配不仅大小写数字还有感叹号，分号咋办？</span></span><br><span class="line">        regex = <span class="string">&quot;[0-9a-zA-Z!;&amp;.]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需求6：我想匹配除了大小写字母和数字以外的符号</span></span><br><span class="line">        regex = <span class="string">&quot;[^0-9a-zA-Z]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abcABC1234ERQcc21c21sDASadcsABCCa&amp;.;<span class="number">123</span>!</span><br><span class="line">==========================================</span><br><span class="line">___ABC1234ERQ__21_21_DAS____ABCC_&amp;.;<span class="number">123</span>!</span><br><span class="line">abc___1234___cc21c21s___adcs____a&amp;.;<span class="number">123</span>!</span><br><span class="line">______1234_____21_21_____________&amp;.;<span class="number">123</span>!</span><br><span class="line">abcABC____ERQcc__c__sDASadcsABCCa&amp;.;___!</span><br><span class="line">________________________________________</span><br><span class="line">abcABC1234ERQcc21c21sDASadcsABCCa___123_</span><br></pre></td></tr></table></figure><h5 id="预定义类："><a href="#预定义类：" class="headerlink" title="预定义类："></a>预定义类：</h5><blockquote><p>我们在上面的范围类的情况下，在实际开发中我们可能会遇见一些常见的需求：判断是否是数字，是否是小写字母，是否是大写字母等等这些情况，用上面范围类的写法的话正则会比较长，所以在正则表达式中会给出一些含有特殊含义的表达式，这些表达式更加简化了我们使用范围类的用法，统称为预定义类，具体我们来探讨一下有哪些：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d == [0-9] 代表的是数字</span><br><span class="line">\D == [^0-9]代表的是非数字</span><br><span class="line">\s == 空白字符</span><br><span class="line">\w == [a-zA-Z0-9]</span><br><span class="line">\W == [^a-zA-Z0-9]</span><br><span class="line">.  == 任意字符</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        预定义类</span></span><br><span class="line"><span class="comment">        \d == [0-9] 代表的是数字</span></span><br><span class="line"><span class="comment">        \D == [^0-9]代表的是非数字</span></span><br><span class="line"><span class="comment">        \s == 空白字符</span></span><br><span class="line"><span class="comment">        \w == [a-zA-Z0-9]</span></span><br><span class="line"><span class="comment">        \W == [^a-zA-Z0-9]</span></span><br><span class="line"><span class="comment">        .  == 任意字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d&quot;</span>;  <span class="comment">// \\d代表转义，使用它原本的意思</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcABC 1234  ERQcc2 1c21sDA Sadcs ABC Ca&amp;.;12  3!&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\D&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\s&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\w&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;\\W&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//仅仅单纯要匹配一个字符.</span></span><br><span class="line">        regex = <span class="string">&quot;[.]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        regex = <span class="string">&quot;\\.&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;.;<span class="number">12</span>  <span class="number">3</span>!</span><br><span class="line">==========================================</span><br><span class="line">abcABC ____  ERQcc_ _c__sDA Sadcs ABC Ca&amp;.;__  _!</span><br><span class="line">_______1234_______2_1_21___________________12__3_</span><br><span class="line">abcABC_1234__ERQcc2_1c21sDA_Sadcs_ABC_Ca&amp;.;<span class="number">12__3</span>!</span><br><span class="line">______ ____  ______ _______ _____ ___ __&amp;.;__  _!</span><br><span class="line">abcABC_1234__ERQcc2_1c21sDA_Sadcs_ABC_Ca___12__3_</span><br><span class="line">_________________________________________________</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;_;<span class="number">12</span>  <span class="number">3</span>!</span><br><span class="line">abcABC <span class="number">1234</span>  ERQcc2 1c21sDA Sadcs ABC Ca&amp;_;<span class="number">12</span>  <span class="number">3</span>!</span><br></pre></td></tr></table></figure><h5 id="边界类字符"><a href="#边界类字符" class="headerlink" title="边界类字符"></a>边界类字符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^:以xxx开头</span><br><span class="line">$:以xxx结尾</span><br><span class="line">\b:单词边界</span><br><span class="line">\B:非单词边界</span><br></pre></td></tr></table></figure><h5 id="量词分类"><a href="#量词分类" class="headerlink" title="量词分类"></a>量词分类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?:出现了<span class="number">0</span>次或者<span class="number">1</span>次</span><br><span class="line">+:代表出现了<span class="number">1</span>次或者多次</span><br><span class="line">*:代表出现了任意次</span><br><span class="line">&#123;n&#125;:代表出现了n次</span><br><span class="line">&#123;n,m&#125;:出现了n-m次</span><br><span class="line">&#123;n,&#125;:代表出现了至少n次</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        量词分类：</span></span><br><span class="line"><span class="comment">        ?:出现了0次或者1次</span></span><br><span class="line"><span class="comment">        +:代表出现了1次或者多次</span></span><br><span class="line"><span class="comment">        *:代表出现了任意次</span></span><br><span class="line"><span class="comment">        &#123;n&#125;:代表出现了n次</span></span><br><span class="line"><span class="comment">        &#123;n,m&#125;:出现了n-m次</span></span><br><span class="line"><span class="comment">        &#123;n,&#125;:代表出现了至少n次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^b?&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;aaaaaabaaacdeaaaafg&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^b+&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a+&quot;</span>; <span class="comment">//匹配连续出现1次以上并且是开头的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;a+&quot;</span>; <span class="comment">//匹配连续出现1次以上的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a&#123;2&#125;&quot;</span>; <span class="comment">//匹配连续出现2次的a</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;^a&#123;2,5&#125;&quot;</span>; <span class="comment">//匹配连续出现2次到5次的a开头</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;a&#123;4,&#125;&quot;</span>; <span class="comment">//匹配连续出现4次以上</span></span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">aaaaaabaaacdeaaaafg</span><br><span class="line">==========================================</span><br><span class="line">_aaaaaabaaacdeaaaafg</span><br><span class="line">aaaaaabaaacdeaaaafg</span><br><span class="line">_baaacdeaaaafg</span><br><span class="line">_b_cde_fg</span><br><span class="line">_aaaabaaacdeaaaafg</span><br><span class="line">_abaaacdeaaaafg</span><br><span class="line">_baaacde_fg</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分组的符号：()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式语法：</span></span><br><span class="line"><span class="comment">        分组：()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将连续出现了3次以上的abc替换成_</span></span><br><span class="line"><span class="comment">//        String regex = &quot;abc&#123;3,&#125;&quot;; //ab后面接着3次以上的c</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(abc)&#123;3,&#125;&quot;</span>; <span class="comment">//使用小括号将abc看作是一组，然后匹配这组出现了3次以上</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abccccccccABC123ABC123abcABCabcabcabc123ABC123123&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;要匹配的字符串为：\n&quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：ABC后面跟上出现1次以上的123为一个整体进行匹配</span></span><br><span class="line">        <span class="comment">//ABC123123123</span></span><br><span class="line">        regex = <span class="string">&quot;ABC(123)&#123;1,&#125;&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：ABC后面跟上出现1次以上的123或者abc为一个整体进行匹配</span></span><br><span class="line">        <span class="comment">//ABC123123</span></span><br><span class="line">        <span class="comment">//ABCabcabc</span></span><br><span class="line">        regex = <span class="string">&quot;ABC(123|abc)&#123;1,&#125;&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">要匹配的字符串为：</span><br><span class="line">abccccccccABC123ABC123abcABCabcabcabc123ABC123123</span><br><span class="line">==========================================</span><br><span class="line">abccccccccABC123ABC123abcABC_123ABC123123</span><br><span class="line">abcccccccc__abcABCabcabcabc123_</span><br><span class="line">abcccccccc____</span><br></pre></td></tr></table></figure><h5 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        反向引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//日期案例</span></span><br><span class="line">        <span class="comment">// 2022-03-28  ---&gt; 03/28/2022</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-03-28 dasdas 2022-04-05&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;$2/$3/$1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我不想你取出月份</span></span><br><span class="line">        regex = <span class="string">&quot;(\\d&#123;4&#125;)-(?:\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;$2/$1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">03</span>/<span class="number">28</span>/<span class="number">2022</span> dasdas <span class="number">04</span>/<span class="number">05</span>/<span class="number">2022</span></span><br><span class="line"><span class="number">28</span>/<span class="number">2022</span> dasdas <span class="number">05</span>/<span class="number">2022</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式在java中的应用"><a href="#正则表达式在java中的应用" class="headerlink" title="正则表达式在java中的应用"></a>正则表达式在java中的应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、字符串的查找操作：Pattern和Matcher</span><br><span class="line">2、字符串的匹配操作：可以使用字符串String类中matches()方法</span><br><span class="line">3、字符串的分割操作：可以使用字符串String类中的split()方法</span><br><span class="line">4、字符串的替换工作：字符串中的replaceAll()方法和replaceFirst()方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shujia.wyh.day17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        正则表达式在Java中的应用：</span></span><br><span class="line"><span class="comment">        1、字符串的查找操作：Pattern和Matcher</span></span><br><span class="line"><span class="comment">        2、字符串的匹配操作：可以使用字符串String类中matches()方法</span></span><br><span class="line"><span class="comment">        3、字符串的分割操作：可以使用字符串String类中的split()方法</span></span><br><span class="line"><span class="comment">        4、字符串的替换工作：字符串中的replaceAll()方法和replaceFirst()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\w&#123;3,&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdef123;!&quot;</span>;</span><br><span class="line">        <span class="comment">//public boolean matches(String regex)告诉这个字符串是否匹配给定的regular expression 。</span></span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">&quot;[a-z]&#123;2,&#125;&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abc def hello 123dsa&quot;</span>;</span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">        System.out.println(str.replaceFirst(regex, <span class="string">&quot;_&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;hllo wdw worel spark&quot;</span>;</span><br><span class="line">        <span class="comment">//public String[] split(String regex)将此字符串拆分为给定的regular expression的匹配。</span></span><br><span class="line">        String[] strings = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            System.out.println(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        String[] ws = str.split(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.toString(ws);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//字符串的查找操作：Pattern和Matcher</span></span><br><span class="line">        regex = <span class="string">&quot;\\w&#123;3,7&#125;&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abcd123qqqq122321dddd44&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个java对应的正则表达式对象</span></span><br><span class="line">        <span class="comment">//public static Pattern compile(String regex)将给定的正则表达式编译为模式</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">compile</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="comment">//public Matcher matcher(CharSequence input)创建一个匹配器，匹配给定的输入与此模式。</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> compile.matcher(str);</span><br><span class="line">        <span class="comment">//boolean matches()</span></span><br><span class="line">        <span class="comment">//尝试将整个区域与模式进行匹配。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.matches());</span></span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//boolean find()</span></span><br><span class="line">        <span class="comment">//尝试找到匹配模式的输入序列的下一个子序列。</span></span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line"><span class="comment">//        System.out.println(matcher.group());</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        <span class="comment">//int end()</span></span><br><span class="line">        <span class="comment">//返回最后一个字符匹配后的偏移量。</span></span><br><span class="line">        <span class="comment">//public int start()返回上一个匹配的起始索引。</span></span><br><span class="line"><span class="comment">//        System.out.println(matcher.start());</span></span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line">        <span class="comment">//String group()</span></span><br><span class="line">        <span class="comment">//返回与上一个匹配匹配的输入子序列。</span></span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line">======================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">_ _ _ 123_</span><br><span class="line">_ def hello 123dsa</span><br><span class="line">=======================================</span><br><span class="line">hllo</span><br><span class="line">wdw</span><br><span class="line"><span class="type">worel</span></span><br><span class="line"><span class="variable">spark</span></span><br><span class="line"><span class="operator">=</span>======================================</span><br><span class="line">[hllo , d,  , orel spark]</span><br><span class="line">=======================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">abcd123</span><br><span class="line">====================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line">qqqq122</span><br><span class="line">================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line">321dddd</span><br><span class="line">==================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalStateException: No match available</span><br><span class="line">at java.util.regex.Matcher.end(Matcher.java:<span class="number">415</span>)</span><br><span class="line">at com.shujia.wyh.day17.RegularDemo10.main(RegularDemo10.java:<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="正则表达式练习："><a href="#正则表达式练习：" class="headerlink" title="正则表达式练习："></a>正则表达式练习：</h5><p>题目：治疗口吃</p><p>将字符串“我我我我我我我……….我……..要要要要要………….要要要要….学习习习……习习习习习习习习习编程程程程程程程程程程程…..程程程程程程程程” —-&gt; “我要学习编程”</p><p>分析：1、先将.去掉      2、再将叠词变成一个</p><p>帮助理解正则表达式的网址：<a href="https://regexper.com/">https://regexper.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
